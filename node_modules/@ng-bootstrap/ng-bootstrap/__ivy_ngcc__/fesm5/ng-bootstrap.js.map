{"version":3,"sources":["C:/Users/Miguel√ÅngelBuenoRive/Desktop/Angular project/ExperienceBCN/node_modules/@ng-bootstrap/ng-bootstrap/fesm5/ng-bootstrap.js"],"names":[],"mappingssF0L;;;;;gDAG/J;;;;;;;;;;;;;;;;;;;;SAoBlB;;;;;;4EAGc;;;;;;;;;;;;;;SAcd;;;;;;4EAGa;;;;;;;;;;;;SAYb;;;;;;4EAGe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAoD0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAGjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA2IqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA+BY,AAY1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACgB;;;;;;;KAOlB;;;;;;;;;;;;;;;;;gDAGsB;;;;;;;;;;;;;;;0KAe+I;;;;;gDAGnJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CA0CqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAU3B;;;;;;KAMZ;;;;;;;gDAGkB;;;;;;KAMlB;;;;;;;;;;;gDAMkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA0EiC;;;;;;;;;;;;;;;;;;;;;;;;;;oBAapC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA8D4B;;;;;;;;oBAG1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CA4FuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAa5B;;;;;;;KAOZ;;;;;;;;;;;;;gDAGoB;;;;;;;;;;;;;;;;;;;sLAmB6J;;;;;gDAG5J;;;;;;;;;;;;;;;;;;;;;;;yCAuBe;;;;;;;;oBAGxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA6Ma,AAevB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACa;;;;;;;;;;;;;;;;;;;;;;KAsBf;;;;;;;;;gDAGqB;;;;;;;;;;;;;;;;mDAgByB;;;;;;;;;;;;;;;oBAO/B;;;;;;KAMf;;;;;;;gDAGqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iIA4GuG;;;;;gDAG7G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgFd;;;;;;0BAGuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8MAqNiL;;;;;gDAGpL;;;;;;;;;;;;;;;;;;;;;;;;2CAwBiB,AAEpC;;;;;;;;;kCAC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6RxB;;;;;kGAGoB;;;;;;;;;;;;;;;;;;;;;;;;;;8LA0BiK;;;;;gDAGlK;;;;;;;;;;;;;;;;;;;;;;2IAsB+G;;;;;gDAGpH;;;;;;;;;;;;;;;;;;;;;;;MAuBjB;;;;;;0BAGuB;;;;;;;;;;;;;;;;;;;;SAoBpB;;;;;;4EAGoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAsRqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAW5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kOAuE4M;;;;;gDAG7L;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDA8Ce;;;;;;;;;;;;;;;;;;;;;;;oBASzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DAiDiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+JA6W+H;;;;;gDAGhI;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2BzB;;;;;;0BAG4B;;;;;;;;;;;;;;;;;;;;;kNAqBgL;;;;;;0BAGjL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAoWI,AAgB9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACoB;;;;;;;;;;;;;;;;;;;;;;;;;;2DA0BgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiB9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sEAkDyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAShC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyFhC;;;;;;0BAGmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4GnuQ7B;;;;;;0BAGqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4GAqXiF;;;;;;0BAGlF;;;;;;;;;;;;;;;;;;;;;;;;;yGAyB+E;;;;;;0BAGzE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkC1B;;;;;;0BAGuB;;;;;;;;;;;;;;;;;;;;;;MAsBvB;;;;;;0BAG0B;;;;;;KAM3B;;;;;;;;;;;;;;;;;;;;;;;;gDAWuB;;;;;;;;;;;;;;;sLAe0J;;;;;gDAG5J;;;;;;KAMrB;;;;;;gDAGa;;;;;;;;;;;;;;;;;;;;;;;;;;;oDA2BkC;;;;;;;;;;oBAG5B;;;;;;;;;;;;;;;;;;;;kCAoBU,AAiB3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACiB;;;;;;;;;;;;;;;;;;;;;oCAqBY,AAK7B;;;;;;;;;;;;;;;+DACmB;;;;;;;;;;;;;;;;;;;0DAmBgC,AAiBnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAsTI,AAEvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEa;;;;;;;KAOf;;;;;;;;;;;;;;;;;gDAGqB;;;;;;;;;;;;;;;;;0KAiBgJ;;;;;gDAGnJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA6HK,AAErB;;;;;;;;;kCACW;;;;;;;;;4DAS0C;;;;;;;;;;;;;;;oBAQnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAsOQ,AAe1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAwMS,AAEzB;;;;;;;;;mHACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2PAyDqO;;;;;uKAG1O;;;;;;KAMZ;;;;;;;;;;;;gDAOkB;;;;;;;;;;;;;;;;;;;kKAmB2I;;;;;gDAG7I;;;;;;;;;;;;;;;;;;SAkBZ;;;;;;4EAGa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAqEO,AAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAyJM,AAiBlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEQ;;;;;;;;;;;;;;;;;;;;;;;;;6BAyBc,AAkBtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uGACY;;;;;;;;;;;;;;;;;8CAiB2B;;;;;;;;;;;;;;;;;;;;;;oBAQzB;;;;;;;KAOhB;;;;;;;;;;;;;;;gDAGgB;;;;;;;;;;;;;;;;;;;;8LAoByK;;;;;gDAGlK;;;;;;;;;;;;;;;SAenB;;;;;;4EAGqB;;;;;;;;;;;;;;SAcrB;;;;;;4EAGkB;;;;;;;;;;;;;;SAclB;;;;;;4EAGiB;;;;;;;;;;;;;;SAcjB;;;;;;4EAGiB;;;;;;;;;;;;;;SAcjB;;;;;;4EAGmB;;;;;;;;;;;;;;SAcnB;;;;;;4EAGqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAuMkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ1B;;;;;;;;;;KAUjB;;;;;;;;;;;;;;;;;;;gDAGuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kLA+GsJ;;;;;gDAGzJ;;;;;;;;;;;;;;;;;;;;sDAoB6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAU7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAqLI,AAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACY;;;;;;KAMd;;;;;;;;;;;;;gDAQoB;;;;;;;;;;;;;;;;;kMAiByK;;;;;gDAGrK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAgEsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ5B;;;;;;KAMlB;;;;;;;gDAGwB;;;;;;;;;;;;;;;;8KAgBiJ;;;;;gDAGtJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDA0J0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAsBhC;;;;;;KAMb;;;;;;;gDAGmB;;;;;;;;;;;;;;;;;;8KAkBsJ;;;;;gDAGtJ;;;;;;;;;;;;;;;;;;SAkBf;;;;;;4EAGW;;;;;;;;;;;;;;SAcX;;;;;;4EAGa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA2C0B;;;;;;;;;;;;;;;;;;;;;;;;;oBAGjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAuFkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ/B;;;;;;;;;;KAUb;;;;;;;;;;;;;gDAGmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LA0EsK;;;;;gDAGlK;;;;;;;;;;;;;;;;;;;;;;;2IAuB+G;;;;;gDAGpH;;;;;;;;;;;;;;;;;;;;;;;MAuBjB;;;;;;0BAGuB;;;;;;;;;;;;;;;+MAekL;;;;;gDAGrL;;;;;;;;;;;;;;;2CAeiB,AAEpC;;;;;;;;;kCAC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAuLe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS1B;;;;;;KAMjB;;;;;;;gDAGuB;;;;;;;;;;;;;;;;;0KAiB8I;;;;;gDAGnJ;;;;;;;;;;;;KAYlB;;;;;;gDAGkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA2EI,AAepB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACU;;;;;;KAMZ;;;;;;;;;gDAGkB;;;;;;;;;;;;;;;;;;;kLAmB2J;;;;;gDAGzJ;;;;;;;;;;;;;2DAakC;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAmLI,AAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACY;;;;;;KAMd;;;;;;;;gDAGoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAiCsB;;;;;;;;;;;;;;;;;;;;;;;;oBAW1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEAiF6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAoDJ,AAEhB;;;;;;;;;;;;kCACM;;;;;;;;;;;;;;;;;0LAiB6K;;;;;gDAG/J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA4RI,AAoBxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACc;;;;;;KAMhB;;;;;;;;;;;;;;;gDAQsB;;;;;;;;;;;;;KAatB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAGa","file":"ng-bootstrap.js","sourcesContent":["import { __decorate, __param, __read, __extends, __assign, __values } from 'tslib';\nimport { …µ…µdefineInjectable, Injectable, TemplateRef, Directive, Input, ContentChildren, EventEmitter, Output, Component, ViewEncapsulation, Optional, Host, NgModule, Renderer2, ElementRef, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, Inject, PLATFORM_ID, NgZone, HostListener, …µ…µinject, LOCALE_ID, ViewChild, ContentChild, ViewContainerRef, ComponentFactoryResolver, Injector, ApplicationRef, RendererFactory2, INJECTOR, Attribute, InjectionToken } from '@angular/core';\nimport { CommonModule, isPlatformBrowser, getLocaleDayNames, FormStyle, TranslationWidth, getLocaleMonthNames, formatDate, DOCUMENT, getLocaleDayPeriods } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { Subject, BehaviorSubject, combineLatest, timer, NEVER, fromEvent, merge, race, Observable } from 'rxjs';\nimport { map, startWith, distinctUntilChanged, switchMap, takeUntil, filter, take, tap, withLatestFrom, delay, share } from 'rxjs/operators';\n\nfunction toInteger(value) {\n    return parseInt(\"\" + value, 10);\n}\nfunction toString(value) {\n    return (value !== undefined && value !== null) ? \"\" + value : '';\n}\nfunction getValueInRange(value, max, min) {\n    if (min === void 0) { min = 0; }\n    return Math.max(Math.min(value, max), min);\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isNumber(value) {\n    return !isNaN(toInteger(value));\n}\nfunction isInteger(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\nfunction isDefined(value) {\n    return value !== undefined && value !== null;\n}\nfunction padNumber(value) {\n    if (isNumber(value)) {\n        return (\"0\" + value).slice(-2);\n    }\n    else {\n        return '';\n    }\n}\nfunction regExpEscape(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\nfunction hasClassName(element, className) {\n    return element && element.className && element.className.split &&\n        element.className.split(/\\s+/).indexOf(className) >= 0;\n}\nif (typeof Element !== 'undefined' && !Element.prototype.closest) {\n    // Polyfill for ie10+\n    if (!Element.prototype.matches) {\n        // IE uses the non-standard name: msMatchesSelector\n        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n    }\n    Element.prototype.closest = function (s) {\n        var el = this;\n        if (!document.documentElement.contains(el)) {\n            return null;\n        }\n        do {\n            if (el.matches(s)) {\n                return el;\n            }\n            el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}\nfunction closest(element, selector) {\n    if (!selector) {\n        return null;\n    }\n    /*\n     * In certain browsers (e.g. Edge 44.18362.449.0) HTMLDocument does\n     * not support `Element.prototype.closest`. To emulate the correct behaviour\n     * we return null when the method is missing.\n     *\n     * Note that in evergreen browsers `closest(document.documentElement, 'html')`\n     * will return the document element whilst in Edge null will be returned. This\n     * compromise was deemed good enough.\n     */\n    if (typeof element.closest === 'undefined') {\n        return null;\n    }\n    return element.closest(selector);\n}\n\n/**\n * A configuration service for the [NgbAccordion](#/components/accordion/api#NgbAccordion) component.\n *\n * You can inject this service, typically in your root component, and customize its properties\n * to provide default values for all accordions used in the application.\n */\nvar NgbAccordionConfig = /** @class */ (function () {\n    function NgbAccordionConfig() {\n        this.closeOthers = false;\n    }\n    NgbAccordionConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbAccordionConfig_Factory() { return new NgbAccordionConfig(); }, token: NgbAccordionConfig, providedIn: \"root\" });\n    NgbAccordionConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbAccordionConfig);\n    return NgbAccordionConfig;\n}());\n\nvar nextId = 0;\n/**\n * A directive that wraps an accordion panel header with any HTML markup and a toggling button\n * marked with [`NgbPanelToggle`](#/components/accordion/api#NgbPanelToggle).\n * See the [header customization demo](#/components/accordion/examples#header) for more details.\n *\n * You can also use [`NgbPanelTitle`](#/components/accordion/api#NgbPanelTitle) to customize only the panel title.\n *\n * @since 4.1.0\n */\nvar NgbPanelHeader = /** @class */ (function () {\n    function NgbPanelHeader(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPanelHeader.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPanelHeader = __decorate([\n        Directive({ selector: 'ng-template[ngbPanelHeader]' })\n    ], NgbPanelHeader);\n    return NgbPanelHeader;\n}());\n/**\n * A directive that wraps only the panel title with HTML markup inside.\n *\n * You can also use [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader) to customize the full panel header.\n */\nvar NgbPanelTitle = /** @class */ (function () {\n    function NgbPanelTitle(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPanelTitle.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPanelTitle = __decorate([\n        Directive({ selector: 'ng-template[ngbPanelTitle]' })\n    ], NgbPanelTitle);\n    return NgbPanelTitle;\n}());\n/**\n * A directive that wraps the accordion panel content.\n */\nvar NgbPanelContent = /** @class */ (function () {\n    function NgbPanelContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPanelContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPanelContent = __decorate([\n        Directive({ selector: 'ng-template[ngbPanelContent]' })\n    ], NgbPanelContent);\n    return NgbPanelContent;\n}());\n/**\n * A directive that wraps an individual accordion panel with title and collapsible content.\n */\nvar NgbPanel = /** @class */ (function () {\n    function NgbPanel() {\n        /**\n         *  If `true`, the panel is disabled an can't be toggled.\n         */\n        this.disabled = false;\n        /**\n         *  An optional id for the panel that must be unique on the page.\n         *\n         *  If not provided, it will be auto-generated in the `ngb-panel-xxx` format.\n         */\n        this.id = \"ngb-panel-\" + nextId++;\n        this.isOpen = false;\n    }\n    NgbPanel.prototype.ngAfterContentChecked = function () {\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\n        // only @ContentChildren allows us to specify the {descendants: false} option.\n        // Without {descendants: false} we are hitting bugs described in:\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n        this.titleTpl = this.titleTpls.first;\n        this.headerTpl = this.headerTpls.first;\n        this.contentTpl = this.contentTpls.first;\n    };\n    __decorate([\n        Input()\n    ], NgbPanel.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbPanel.prototype, \"id\", void 0);\n    __decorate([\n        Input()\n    ], NgbPanel.prototype, \"title\", void 0);\n    __decorate([\n        Input()\n    ], NgbPanel.prototype, \"type\", void 0);\n    __decorate([\n        Input()\n    ], NgbPanel.prototype, \"cardClass\", void 0);\n    __decorate([\n        ContentChildren(NgbPanelTitle, { descendants: false })\n    ], NgbPanel.prototype, \"titleTpls\", void 0);\n    __decorate([\n        ContentChildren(NgbPanelHeader, { descendants: false })\n    ], NgbPanel.prototype, \"headerTpls\", void 0);\n    __decorate([\n        ContentChildren(NgbPanelContent, { descendants: false })\n    ], NgbPanel.prototype, \"contentTpls\", void 0);\n    NgbPanel = __decorate([\n        Directive({ selector: 'ngb-panel' })\n    ], NgbPanel);\n    return NgbPanel;\n}());\n/**\n * Accordion is a collection of collapsible panels (bootstrap cards).\n *\n * It can ensure only one panel is opened at a time and allows to customize panel\n * headers.\n */\nvar NgbAccordion = /** @class */ (function () {\n    function NgbAccordion(config) {\n        /**\n         * An array or comma separated strings of panel ids that should be opened **initially**.\n         *\n         * For subsequent changes use methods like `expand()`, `collapse()`, etc. and\n         * the `(panelChange)` event.\n         */\n        this.activeIds = [];\n        /**\n         * If `true`, panel content will be detached from DOM and not simply hidden when the panel is collapsed.\n         */\n        this.destroyOnHide = true;\n        /**\n         * Event emitted right before the panel toggle happens.\n         *\n         * See [NgbPanelChangeEvent](#/components/accordion/api#NgbPanelChangeEvent) for payload details.\n         */\n        this.panelChange = new EventEmitter();\n        this.type = config.type;\n        this.closeOtherPanels = config.closeOthers;\n    }\n    /**\n     * Checks if a panel with a given id is expanded.\n     */\n    NgbAccordion.prototype.isExpanded = function (panelId) { return this.activeIds.indexOf(panelId) > -1; };\n    /**\n     * Expands a panel with a given id.\n     *\n     * Has no effect if the panel is already expanded or disabled.\n     */\n    NgbAccordion.prototype.expand = function (panelId) { this._changeOpenState(this._findPanelById(panelId), true); };\n    /**\n     * Expands all panels, if `[closeOthers]` is `false`.\n     *\n     * If `[closeOthers]` is `true`, it will expand the first panel, unless there is already a panel opened.\n     */\n    NgbAccordion.prototype.expandAll = function () {\n        var _this = this;\n        if (this.closeOtherPanels) {\n            if (this.activeIds.length === 0 && this.panels.length) {\n                this._changeOpenState(this.panels.first, true);\n            }\n        }\n        else {\n            this.panels.forEach(function (panel) { return _this._changeOpenState(panel, true); });\n        }\n    };\n    /**\n     * Collapses a panel with the given id.\n     *\n     * Has no effect if the panel is already collapsed or disabled.\n     */\n    NgbAccordion.prototype.collapse = function (panelId) { this._changeOpenState(this._findPanelById(panelId), false); };\n    /**\n     * Collapses all opened panels.\n     */\n    NgbAccordion.prototype.collapseAll = function () {\n        var _this = this;\n        this.panels.forEach(function (panel) { _this._changeOpenState(panel, false); });\n    };\n    /**\n     * Toggles a panel with the given id.\n     *\n     * Has no effect if the panel is disabled.\n     */\n    NgbAccordion.prototype.toggle = function (panelId) {\n        var panel = this._findPanelById(panelId);\n        if (panel) {\n            this._changeOpenState(panel, !panel.isOpen);\n        }\n    };\n    NgbAccordion.prototype.ngAfterContentChecked = function () {\n        var _this = this;\n        // active id updates\n        if (isString(this.activeIds)) {\n            this.activeIds = this.activeIds.split(/\\s*,\\s*/);\n        }\n        // update panels open states\n        this.panels.forEach(function (panel) { return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1; });\n        // closeOthers updates\n        if (this.activeIds.length > 1 && this.closeOtherPanels) {\n            this._closeOthers(this.activeIds[0]);\n            this._updateActiveIds();\n        }\n    };\n    NgbAccordion.prototype._changeOpenState = function (panel, nextState) {\n        if (panel != null && !panel.disabled && panel.isOpen !== nextState) {\n            var defaultPrevented_1 = false;\n            this.panelChange.emit({ panelId: panel.id, nextState: nextState, preventDefault: function () { defaultPrevented_1 = true; } });\n            if (!defaultPrevented_1) {\n                panel.isOpen = nextState;\n                if (nextState && this.closeOtherPanels) {\n                    this._closeOthers(panel.id);\n                }\n                this._updateActiveIds();\n            }\n        }\n    };\n    NgbAccordion.prototype._closeOthers = function (panelId) {\n        this.panels.forEach(function (panel) {\n            if (panel.id !== panelId) {\n                panel.isOpen = false;\n            }\n        });\n    };\n    NgbAccordion.prototype._findPanelById = function (panelId) { return this.panels.find(function (p) { return p.id === panelId; }) || null; };\n    NgbAccordion.prototype._updateActiveIds = function () {\n        this.activeIds = this.panels.filter(function (panel) { return panel.isOpen && !panel.disabled; }).map(function (panel) { return panel.id; });\n    };\n    NgbAccordion.ctorParameters = function () { return [\n        { type: NgbAccordionConfig }\n    ]; };\n    __decorate([\n        ContentChildren(NgbPanel)\n    ], NgbAccordion.prototype, \"panels\", void 0);\n    __decorate([\n        Input()\n    ], NgbAccordion.prototype, \"activeIds\", void 0);\n    __decorate([\n        Input('closeOthers')\n    ], NgbAccordion.prototype, \"closeOtherPanels\", void 0);\n    __decorate([\n        Input()\n    ], NgbAccordion.prototype, \"destroyOnHide\", void 0);\n    __decorate([\n        Input()\n    ], NgbAccordion.prototype, \"type\", void 0);\n    __decorate([\n        Output()\n    ], NgbAccordion.prototype, \"panelChange\", void 0);\n    NgbAccordion = __decorate([\n        Component({\n            selector: 'ngb-accordion',\n            exportAs: 'ngbAccordion',\n            encapsulation: ViewEncapsulation.None,\n            host: { 'class': 'accordion', 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },\n            template: \"\\n    <ng-template #t ngbPanelHeader let-panel>\\n      <button class=\\\"btn btn-link\\\" [ngbPanelToggle]=\\\"panel\\\">\\n        {{panel.title}}<ng-template [ngTemplateOutlet]=\\\"panel.titleTpl?.templateRef\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n    <ng-template ngFor let-panel [ngForOf]=\\\"panels\\\">\\n      <div [class]=\\\"'card ' + (panel.cardClass || '')\\\">\\n        <div role=\\\"tab\\\" id=\\\"{{panel.id}}-header\\\" [class]=\\\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"panel.headerTpl?.templateRef || t\\\"\\n                       [ngTemplateOutletContext]=\\\"{$implicit: panel, opened: panel.isOpen}\\\"></ng-template>\\n        </div>\\n        <div id=\\\"{{panel.id}}\\\" role=\\\"tabpanel\\\" [attr.aria-labelledby]=\\\"panel.id + '-header'\\\"\\n             class=\\\"collapse\\\" [class.show]=\\\"panel.isOpen\\\" *ngIf=\\\"!destroyOnHide || panel.isOpen\\\">\\n          <div class=\\\"card-body\\\">\\n               <ng-template [ngTemplateOutlet]=\\\"panel.contentTpl?.templateRef || null\\\"></ng-template>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \"\n        })\n    ], NgbAccordion);\n    return NgbAccordion;\n}());\n/**\n * A directive to put on a button that toggles panel opening and closing.\n *\n * To be used inside the [`NgbPanelHeader`](#/components/accordion/api#NgbPanelHeader)\n *\n * @since 4.1.0\n */\nvar NgbPanelToggle = /** @class */ (function () {\n    function NgbPanelToggle(accordion, panel) {\n        this.accordion = accordion;\n        this.panel = panel;\n    }\n    Object.defineProperty(NgbPanelToggle.prototype, \"ngbPanelToggle\", {\n        set: function (panel) {\n            if (panel) {\n                this.panel = panel;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbPanelToggle.ctorParameters = function () { return [\n        { type: NgbAccordion },\n        { type: NgbPanel, decorators: [{ type: Optional }, { type: Host }] }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbPanelToggle.prototype, \"ngbPanelToggle\", null);\n    NgbPanelToggle = __decorate([\n        Directive({\n            selector: 'button[ngbPanelToggle]',\n            host: {\n                'type': 'button',\n                '[disabled]': 'panel.disabled',\n                '[class.collapsed]': '!panel.isOpen',\n                '[attr.aria-expanded]': 'panel.isOpen',\n                '[attr.aria-controls]': 'panel.id',\n                '(click)': 'accordion.toggle(panel.id)'\n            }\n        }),\n        __param(1, Optional()), __param(1, Host())\n    ], NgbPanelToggle);\n    return NgbPanelToggle;\n}());\n\nvar NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbPanelHeader, NgbPanelToggle];\nvar NgbAccordionModule = /** @class */ (function () {\n    function NgbAccordionModule() {\n    }\n    NgbAccordionModule = __decorate([\n        NgModule({ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [CommonModule] })\n    ], NgbAccordionModule);\n    return NgbAccordionModule;\n}());\n\n/**\n * A configuration service for the [NgbAlert](#/components/alert/api#NgbAlert) component.\n *\n * You can inject this service, typically in your root component, and customize its properties\n * to provide default values for all alerts used in the application.\n */\nvar NgbAlertConfig = /** @class */ (function () {\n    function NgbAlertConfig() {\n        this.dismissible = true;\n        this.type = 'warning';\n    }\n    NgbAlertConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbAlertConfig_Factory() { return new NgbAlertConfig(); }, token: NgbAlertConfig, providedIn: \"root\" });\n    NgbAlertConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbAlertConfig);\n    return NgbAlertConfig;\n}());\n\n/**\n * Alert is a component to provide contextual feedback messages for user.\n *\n * It supports several alert types and can be dismissed.\n */\nvar NgbAlert = /** @class */ (function () {\n    function NgbAlert(config, _renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n        /**\n         * An event emitted when the close button is clicked. It has no payload and only relevant for dismissible alerts.\n         */\n        this.close = new EventEmitter();\n        this.dismissible = config.dismissible;\n        this.type = config.type;\n    }\n    NgbAlert.prototype.closeHandler = function () { this.close.emit(); };\n    NgbAlert.prototype.ngOnChanges = function (changes) {\n        var typeChange = changes['type'];\n        if (typeChange && !typeChange.firstChange) {\n            this._renderer.removeClass(this._element.nativeElement, \"alert-\" + typeChange.previousValue);\n            this._renderer.addClass(this._element.nativeElement, \"alert-\" + typeChange.currentValue);\n        }\n    };\n    NgbAlert.prototype.ngOnInit = function () { this._renderer.addClass(this._element.nativeElement, \"alert-\" + this.type); };\n    NgbAlert.ctorParameters = function () { return [\n        { type: NgbAlertConfig },\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbAlert.prototype, \"dismissible\", void 0);\n    __decorate([\n        Input()\n    ], NgbAlert.prototype, \"type\", void 0);\n    __decorate([\n        Output()\n    ], NgbAlert.prototype, \"close\", void 0);\n    NgbAlert = __decorate([\n        Component({\n            selector: 'ngb-alert',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            host: { 'role': 'alert', 'class': 'alert', '[class.alert-dismissible]': 'dismissible' },\n            template: \"\\n    <ng-content></ng-content>\\n    <button *ngIf=\\\"dismissible\\\" type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" i18n-aria-label=\\\"@@ngb.alert.close\\\"\\n      (click)=\\\"closeHandler()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n    \",\n            styles: [\"ngb-alert{display:block}\"]\n        })\n    ], NgbAlert);\n    return NgbAlert;\n}());\n\nvar NgbAlertModule = /** @class */ (function () {\n    function NgbAlertModule() {\n    }\n    NgbAlertModule = __decorate([\n        NgModule({ declarations: [NgbAlert], exports: [NgbAlert], imports: [CommonModule], entryComponents: [NgbAlert] })\n    ], NgbAlertModule);\n    return NgbAlertModule;\n}());\n\nvar NgbButtonLabel = /** @class */ (function () {\n    function NgbButtonLabel() {\n    }\n    NgbButtonLabel = __decorate([\n        Directive({\n            selector: '[ngbButtonLabel]',\n            host: { '[class.btn]': 'true', '[class.active]': 'active', '[class.disabled]': 'disabled', '[class.focus]': 'focused' }\n        })\n    ], NgbButtonLabel);\n    return NgbButtonLabel;\n}());\n\nvar NGB_CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbCheckBox; }),\n    multi: true\n};\n/**\n * Allows to easily create Bootstrap-style checkbox buttons.\n *\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\n * either in a reactive or template-driven way.\n */\nvar NgbCheckBox = /** @class */ (function () {\n    function NgbCheckBox(_label, _cd) {\n        this._label = _label;\n        this._cd = _cd;\n        /**\n         * If `true`, the checkbox button will be disabled\n         */\n        this.disabled = false;\n        /**\n         * The form control value when the checkbox is checked.\n         */\n        this.valueChecked = true;\n        /**\n         * The form control value when the checkbox is unchecked.\n         */\n        this.valueUnChecked = false;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    Object.defineProperty(NgbCheckBox.prototype, \"focused\", {\n        set: function (isFocused) {\n            this._label.focused = isFocused;\n            if (!isFocused) {\n                this.onTouched();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbCheckBox.prototype.onInputChange = function ($event) {\n        var modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;\n        this.onChange(modelToPropagate);\n        this.onTouched();\n        this.writeValue(modelToPropagate);\n    };\n    NgbCheckBox.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    NgbCheckBox.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    NgbCheckBox.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._label.disabled = isDisabled;\n    };\n    NgbCheckBox.prototype.writeValue = function (value) {\n        this.checked = value === this.valueChecked;\n        this._label.active = this.checked;\n        // label won't be updated, if it is inside the OnPush component when [ngModel] changes\n        this._cd.markForCheck();\n    };\n    NgbCheckBox.ctorParameters = function () { return [\n        { type: NgbButtonLabel },\n        { type: ChangeDetectorRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbCheckBox.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbCheckBox.prototype, \"valueChecked\", void 0);\n    __decorate([\n        Input()\n    ], NgbCheckBox.prototype, \"valueUnChecked\", void 0);\n    NgbCheckBox = __decorate([\n        Directive({\n            selector: '[ngbButton][type=checkbox]',\n            host: {\n                '[checked]': 'checked',\n                '[disabled]': 'disabled',\n                '(change)': 'onInputChange($event)',\n                '(focus)': 'focused = true',\n                '(blur)': 'focused = false'\n            },\n            providers: [NGB_CHECKBOX_VALUE_ACCESSOR]\n        })\n    ], NgbCheckBox);\n    return NgbCheckBox;\n}());\n\nvar NGB_RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbRadioGroup; }),\n    multi: true\n};\nvar nextId$1 = 0;\n/**\n * Allows to easily create Bootstrap-style radio buttons.\n *\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\n * either in a reactive or template-driven way.\n */\nvar NgbRadioGroup = /** @class */ (function () {\n    function NgbRadioGroup() {\n        this._radios = new Set();\n        this._value = null;\n        /**\n         * Name of the radio group applied to radio input elements.\n         *\n         * Will be applied to all radio input elements inside the group,\n         * unless [`NgbRadio`](#/components/buttons/api#NgbRadio)'s specify names themselves.\n         *\n         * If not provided, will be generated in the `ngb-radio-xx` format.\n         */\n        this.name = \"ngb-radio-\" + nextId$1++;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    Object.defineProperty(NgbRadioGroup.prototype, \"disabled\", {\n        get: function () { return this._disabled; },\n        set: function (isDisabled) { this.setDisabledState(isDisabled); },\n        enumerable: true,\n        configurable: true\n    });\n    NgbRadioGroup.prototype.onRadioChange = function (radio) {\n        this.writeValue(radio.value);\n        this.onChange(radio.value);\n    };\n    NgbRadioGroup.prototype.onRadioValueUpdate = function () { this._updateRadiosValue(); };\n    NgbRadioGroup.prototype.register = function (radio) { this._radios.add(radio); };\n    NgbRadioGroup.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    NgbRadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    NgbRadioGroup.prototype.setDisabledState = function (isDisabled) {\n        this._disabled = isDisabled;\n        this._updateRadiosDisabled();\n    };\n    NgbRadioGroup.prototype.unregister = function (radio) { this._radios.delete(radio); };\n    NgbRadioGroup.prototype.writeValue = function (value) {\n        this._value = value;\n        this._updateRadiosValue();\n    };\n    NgbRadioGroup.prototype._updateRadiosValue = function () {\n        var _this = this;\n        this._radios.forEach(function (radio) { return radio.updateValue(_this._value); });\n    };\n    NgbRadioGroup.prototype._updateRadiosDisabled = function () { this._radios.forEach(function (radio) { return radio.updateDisabled(); }); };\n    __decorate([\n        Input()\n    ], NgbRadioGroup.prototype, \"name\", void 0);\n    NgbRadioGroup = __decorate([\n        Directive({ selector: '[ngbRadioGroup]', host: { 'role': 'radiogroup' }, providers: [NGB_RADIO_VALUE_ACCESSOR] })\n    ], NgbRadioGroup);\n    return NgbRadioGroup;\n}());\n/**\n * A directive that marks an input of type \"radio\" as a part of the\n * [`NgbRadioGroup`](#/components/buttons/api#NgbRadioGroup).\n */\nvar NgbRadio = /** @class */ (function () {\n    function NgbRadio(_group, _label, _renderer, _element, _cd) {\n        this._group = _group;\n        this._label = _label;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._cd = _cd;\n        this._value = null;\n        this._group.register(this);\n        this.updateDisabled();\n    }\n    Object.defineProperty(NgbRadio.prototype, \"value\", {\n        get: function () { return this._value; },\n        /**\n         * The form control value when current radio button is checked.\n         */\n        set: function (value) {\n            this._value = value;\n            var stringValue = value ? value.toString() : '';\n            this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);\n            this._group.onRadioValueUpdate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"disabled\", {\n        get: function () { return this._group.disabled || this._disabled; },\n        /**\n         * If `true`, current radio button will be disabled.\n         */\n        set: function (isDisabled) {\n            this._disabled = isDisabled !== false;\n            this.updateDisabled();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"focused\", {\n        set: function (isFocused) {\n            if (this._label) {\n                this._label.focused = isFocused;\n            }\n            if (!isFocused) {\n                this._group.onTouched();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"checked\", {\n        get: function () { return this._checked; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"nameAttr\", {\n        get: function () { return this.name || this._group.name; },\n        enumerable: true,\n        configurable: true\n    });\n    NgbRadio.prototype.ngOnDestroy = function () { this._group.unregister(this); };\n    NgbRadio.prototype.onChange = function () { this._group.onRadioChange(this); };\n    NgbRadio.prototype.updateValue = function (value) {\n        // label won't be updated, if it is inside the OnPush component when [ngModel] changes\n        if (this.value !== value) {\n            this._cd.markForCheck();\n        }\n        this._checked = this.value === value;\n        this._label.active = this._checked;\n    };\n    NgbRadio.prototype.updateDisabled = function () { this._label.disabled = this.disabled; };\n    NgbRadio.ctorParameters = function () { return [\n        { type: NgbRadioGroup },\n        { type: NgbButtonLabel },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: ChangeDetectorRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbRadio.prototype, \"name\", void 0);\n    __decorate([\n        Input('value')\n    ], NgbRadio.prototype, \"value\", null);\n    __decorate([\n        Input('disabled')\n    ], NgbRadio.prototype, \"disabled\", null);\n    NgbRadio = __decorate([\n        Directive({\n            selector: '[ngbButton][type=radio]',\n            host: {\n                '[checked]': 'checked',\n                '[disabled]': 'disabled',\n                '[name]': 'nameAttr',\n                '(change)': 'onChange()',\n                '(focus)': 'focused = true',\n                '(blur)': 'focused = false'\n            }\n        })\n    ], NgbRadio);\n    return NgbRadio;\n}());\n\nvar NGB_BUTTON_DIRECTIVES = [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio];\nvar NgbButtonsModule = /** @class */ (function () {\n    function NgbButtonsModule() {\n    }\n    NgbButtonsModule = __decorate([\n        NgModule({ declarations: NGB_BUTTON_DIRECTIVES, exports: NGB_BUTTON_DIRECTIVES })\n    ], NgbButtonsModule);\n    return NgbButtonsModule;\n}());\n\n/**\n * A configuration service for the [NgbCarousel](#/components/carousel/api#NgbCarousel) component.\n *\n * You can inject this service, typically in your root component, and customize its properties\n * to provide default values for all carousels used in the application.\n */\nvar NgbCarouselConfig = /** @class */ (function () {\n    function NgbCarouselConfig() {\n        this.interval = 5000;\n        this.wrap = true;\n        this.keyboard = true;\n        this.pauseOnHover = true;\n        this.showNavigationArrows = true;\n        this.showNavigationIndicators = true;\n    }\n    NgbCarouselConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbCarouselConfig_Factory() { return new NgbCarouselConfig(); }, token: NgbCarouselConfig, providedIn: \"root\" });\n    NgbCarouselConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbCarouselConfig);\n    return NgbCarouselConfig;\n}());\n\nvar nextId$2 = 0;\n/**\n * A directive that wraps the individual carousel slide.\n */\nvar NgbSlide = /** @class */ (function () {\n    function NgbSlide(tplRef) {\n        this.tplRef = tplRef;\n        /**\n         * Slide id that must be unique for the entire document.\n         *\n         * If not provided, will be generated in the `ngb-slide-xx` format.\n         */\n        this.id = \"ngb-slide-\" + nextId$2++;\n    }\n    NgbSlide.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbSlide.prototype, \"id\", void 0);\n    NgbSlide = __decorate([\n        Directive({ selector: 'ng-template[ngbSlide]' })\n    ], NgbSlide);\n    return NgbSlide;\n}());\n/**\n * Carousel is a component to easily create and control slideshows.\n *\n * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.\n */\nvar NgbCarousel = /** @class */ (function () {\n    function NgbCarousel(config, _platformId, _ngZone, _cd) {\n        this._platformId = _platformId;\n        this._ngZone = _ngZone;\n        this._cd = _cd;\n        this.NgbSlideEventSource = NgbSlideEventSource;\n        this._destroy$ = new Subject();\n        this._interval$ = new BehaviorSubject(0);\n        this._mouseHover$ = new BehaviorSubject(false);\n        this._pauseOnHover$ = new BehaviorSubject(false);\n        this._pause$ = new BehaviorSubject(false);\n        this._wrap$ = new BehaviorSubject(false);\n        /**\n         * An event emitted right after the slide transition is completed.\n         *\n         * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\n         */\n        this.slide = new EventEmitter();\n        this.interval = config.interval;\n        this.wrap = config.wrap;\n        this.keyboard = config.keyboard;\n        this.pauseOnHover = config.pauseOnHover;\n        this.showNavigationArrows = config.showNavigationArrows;\n        this.showNavigationIndicators = config.showNavigationIndicators;\n    }\n    Object.defineProperty(NgbCarousel.prototype, \"interval\", {\n        get: function () { return this._interval$.value; },\n        /**\n         * Time in milliseconds before the next slide is shown.\n         */\n        set: function (value) {\n            this._interval$.next(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbCarousel.prototype, \"wrap\", {\n        get: function () { return this._wrap$.value; },\n        /**\n         * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\n         */\n        set: function (value) {\n            this._wrap$.next(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbCarousel.prototype, \"pauseOnHover\", {\n        get: function () { return this._pauseOnHover$.value; },\n        /**\n         * If `true`, will pause slide switching when mouse cursor hovers the slide.\n         *\n         * @since 2.2.0\n         */\n        set: function (value) {\n            this._pauseOnHover$.next(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbCarousel.prototype.mouseEnter = function () {\n        this._mouseHover$.next(true);\n    };\n    NgbCarousel.prototype.mouseLeave = function () {\n        this._mouseHover$.next(false);\n    };\n    NgbCarousel.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        // setInterval() doesn't play well with SSR and protractor,\n        // so we should run it in the browser and outside Angular\n        if (isPlatformBrowser(this._platformId)) {\n            this._ngZone.runOutsideAngular(function () {\n                var hasNextSlide$ = combineLatest([\n                    _this.slide.pipe(map(function (slideEvent) { return slideEvent.current; }), startWith(_this.activeId)),\n                    _this._wrap$, _this.slides.changes.pipe(startWith(null))\n                ])\n                    .pipe(map(function (_a) {\n                    var _b = __read(_a, 2), currentSlideId = _b[0], wrap = _b[1];\n                    var slideArr = _this.slides.toArray();\n                    var currentSlideIdx = _this._getSlideIdxById(currentSlideId);\n                    return wrap ? slideArr.length > 1 : currentSlideIdx < slideArr.length - 1;\n                }), distinctUntilChanged());\n                combineLatest([_this._pause$, _this._pauseOnHover$, _this._mouseHover$, _this._interval$, hasNextSlide$])\n                    .pipe(map(function (_a) {\n                    var _b = __read(_a, 5), pause = _b[0], pauseOnHover = _b[1], mouseHover = _b[2], interval = _b[3], hasNextSlide = _b[4];\n                    return ((pause || (pauseOnHover && mouseHover) || !hasNextSlide) ? 0 : interval);\n                }), distinctUntilChanged(), switchMap(function (interval) { return interval > 0 ? timer(interval, interval) : NEVER; }), takeUntil(_this._destroy$))\n                    .subscribe(function () { return _this._ngZone.run(function () { return _this.next(NgbSlideEventSource.TIMER); }); });\n            });\n        }\n        this.slides.changes.pipe(takeUntil(this._destroy$)).subscribe(function () { return _this._cd.markForCheck(); });\n    };\n    NgbCarousel.prototype.ngAfterContentChecked = function () {\n        var activeSlide = this._getSlideById(this.activeId);\n        this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : '');\n    };\n    NgbCarousel.prototype.ngOnDestroy = function () { this._destroy$.next(); };\n    /**\n     * Navigates to a slide with the specified identifier.\n     */\n    NgbCarousel.prototype.select = function (slideId, source) {\n        this._cycleToSelected(slideId, this._getSlideEventDirection(this.activeId, slideId), source);\n    };\n    /**\n     * Navigates to the previous slide.\n     */\n    NgbCarousel.prototype.prev = function (source) {\n        this._cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT, source);\n    };\n    /**\n     * Navigates to the next slide.\n     */\n    NgbCarousel.prototype.next = function (source) {\n        this._cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT, source);\n    };\n    /**\n     * Pauses cycling through the slides.\n     */\n    NgbCarousel.prototype.pause = function () { this._pause$.next(true); };\n    /**\n     * Restarts cycling through the slides from left to right.\n     */\n    NgbCarousel.prototype.cycle = function () { this._pause$.next(false); };\n    NgbCarousel.prototype._cycleToSelected = function (slideIdx, direction, source) {\n        var selectedSlide = this._getSlideById(slideIdx);\n        if (selectedSlide && selectedSlide.id !== this.activeId) {\n            this.slide.emit({ prev: this.activeId, current: selectedSlide.id, direction: direction, paused: this._pause$.value, source: source });\n            this.activeId = selectedSlide.id;\n        }\n        // we get here after the interval fires or any external API call like next(), prev() or select()\n        this._cd.markForCheck();\n    };\n    NgbCarousel.prototype._getSlideEventDirection = function (currentActiveSlideId, nextActiveSlideId) {\n        var currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\n        var nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\n        return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\n    };\n    NgbCarousel.prototype._getSlideById = function (slideId) {\n        return this.slides.find(function (slide) { return slide.id === slideId; }) || null;\n    };\n    NgbCarousel.prototype._getSlideIdxById = function (slideId) {\n        var slide = this._getSlideById(slideId);\n        return slide != null ? this.slides.toArray().indexOf(slide) : -1;\n    };\n    NgbCarousel.prototype._getNextSlide = function (currentSlideId) {\n        var slideArr = this.slides.toArray();\n        var currentSlideIdx = this._getSlideIdxById(currentSlideId);\n        var isLastSlide = currentSlideIdx === slideArr.length - 1;\n        return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\n            slideArr[currentSlideIdx + 1].id;\n    };\n    NgbCarousel.prototype._getPrevSlide = function (currentSlideId) {\n        var slideArr = this.slides.toArray();\n        var currentSlideIdx = this._getSlideIdxById(currentSlideId);\n        var isFirstSlide = currentSlideIdx === 0;\n        return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\n            slideArr[currentSlideIdx - 1].id;\n    };\n    NgbCarousel.ctorParameters = function () { return [\n        { type: NgbCarouselConfig },\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n        { type: NgZone },\n        { type: ChangeDetectorRef }\n    ]; };\n    __decorate([\n        ContentChildren(NgbSlide)\n    ], NgbCarousel.prototype, \"slides\", void 0);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"activeId\", void 0);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"interval\", null);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"wrap\", null);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"keyboard\", void 0);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"pauseOnHover\", null);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"showNavigationArrows\", void 0);\n    __decorate([\n        Input()\n    ], NgbCarousel.prototype, \"showNavigationIndicators\", void 0);\n    __decorate([\n        Output()\n    ], NgbCarousel.prototype, \"slide\", void 0);\n    __decorate([\n        HostListener('mouseenter')\n    ], NgbCarousel.prototype, \"mouseEnter\", null);\n    __decorate([\n        HostListener('mouseleave')\n    ], NgbCarousel.prototype, \"mouseLeave\", null);\n    NgbCarousel = __decorate([\n        Component({\n            selector: 'ngb-carousel',\n            exportAs: 'ngbCarousel',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            host: {\n                'class': 'carousel slide',\n                '[style.display]': '\"block\"',\n                'tabIndex': '0',\n                '(keydown.arrowLeft)': 'keyboard && prev(NgbSlideEventSource.ARROW_LEFT)',\n                '(keydown.arrowRight)': 'keyboard && next(NgbSlideEventSource.ARROW_RIGHT)'\n            },\n            template: \"\\n    <ol class=\\\"carousel-indicators\\\" *ngIf=\\\"showNavigationIndicators\\\">\\n      <li *ngFor=\\\"let slide of slides\\\" [id]=\\\"slide.id\\\" [class.active]=\\\"slide.id === activeId\\\"\\n          (click)=\\\"select(slide.id, NgbSlideEventSource.INDICATOR)\\\"></li>\\n    </ol>\\n    <div class=\\\"carousel-inner\\\">\\n      <div *ngFor=\\\"let slide of slides\\\" class=\\\"carousel-item\\\" [class.active]=\\\"slide.id === activeId\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"slide.tplRef\\\"></ng-template>\\n      </div>\\n    </div>\\n    <a class=\\\"carousel-control-prev\\\" role=\\\"button\\\" (click)=\\\"prev(NgbSlideEventSource.ARROW_LEFT)\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.previous\\\">Previous</span>\\n    </a>\\n    <a class=\\\"carousel-control-next\\\" role=\\\"button\\\" (click)=\\\"next(NgbSlideEventSource.ARROW_RIGHT)\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.next\\\">Next</span>\\n    </a>\\n  \"\n        }),\n        __param(1, Inject(PLATFORM_ID))\n    ], NgbCarousel);\n    return NgbCarousel;\n}());\n/**\n * Defines the carousel slide transition direction.\n */\nvar NgbSlideEventDirection;\n(function (NgbSlideEventDirection) {\n    NgbSlideEventDirection[NgbSlideEventDirection[\"LEFT\"] = 'left'] = \"LEFT\";\n    NgbSlideEventDirection[NgbSlideEventDirection[\"RIGHT\"] = 'right'] = \"RIGHT\";\n})(NgbSlideEventDirection || (NgbSlideEventDirection = {}));\nvar NgbSlideEventSource;\n(function (NgbSlideEventSource) {\n    NgbSlideEventSource[\"TIMER\"] = \"timer\";\n    NgbSlideEventSource[\"ARROW_LEFT\"] = \"arrowLeft\";\n    NgbSlideEventSource[\"ARROW_RIGHT\"] = \"arrowRight\";\n    NgbSlideEventSource[\"INDICATOR\"] = \"indicator\";\n})(NgbSlideEventSource || (NgbSlideEventSource = {}));\nvar NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\n\nvar NgbCarouselModule = /** @class */ (function () {\n    function NgbCarouselModule() {\n    }\n    NgbCarouselModule = __decorate([\n        NgModule({ declarations: NGB_CAROUSEL_DIRECTIVES, exports: NGB_CAROUSEL_DIRECTIVES, imports: [CommonModule] })\n    ], NgbCarouselModule);\n    return NgbCarouselModule;\n}());\n\n/**\n * A directive to provide a simple way of hiding and showing elements on the page.\n */\nvar NgbCollapse = /** @class */ (function () {\n    function NgbCollapse() {\n        /**\n         * If `true`, will collapse the element or show it otherwise.\n         */\n        this.collapsed = false;\n    }\n    __decorate([\n        Input('ngbCollapse')\n    ], NgbCollapse.prototype, \"collapsed\", void 0);\n    NgbCollapse = __decorate([\n        Directive({\n            selector: '[ngbCollapse]',\n            exportAs: 'ngbCollapse',\n            host: { '[class.collapse]': 'true', '[class.show]': '!collapsed' }\n        })\n    ], NgbCollapse);\n    return NgbCollapse;\n}());\n\nvar NgbCollapseModule = /** @class */ (function () {\n    function NgbCollapseModule() {\n    }\n    NgbCollapseModule = __decorate([\n        NgModule({ declarations: [NgbCollapse], exports: [NgbCollapse] })\n    ], NgbCollapseModule);\n    return NgbCollapseModule;\n}());\n\n/**\n * A simple class that represents a date that datepicker also uses internally.\n *\n * It is the implementation of the `NgbDateStruct` interface that adds some convenience methods,\n * like `.equals()`, `.before()`, etc.\n *\n * All datepicker APIs consume `NgbDateStruct`, but return `NgbDate`.\n *\n * In many cases it is simpler to manipulate these objects together with\n * [`NgbCalendar`](#/components/datepicker/api#NgbCalendar) than native JS Dates.\n *\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\n *\n * @since 3.0.0\n */\nvar NgbDate = /** @class */ (function () {\n    function NgbDate(year, month, day) {\n        this.year = isInteger(year) ? year : null;\n        this.month = isInteger(month) ? month : null;\n        this.day = isInteger(day) ? day : null;\n    }\n    /**\n     * A **static method** that creates a new date object from the `NgbDateStruct`,\n     *\n     * ex. `NgbDate.from({year: 2000, month: 5, day: 1})`.\n     *\n     * If the `date` is already of `NgbDate` type, the method will return the same object.\n     */\n    NgbDate.from = function (date) {\n        if (date instanceof NgbDate) {\n            return date;\n        }\n        return date ? new NgbDate(date.year, date.month, date.day) : null;\n    };\n    /**\n     * Checks if the current date is equal to another date.\n     */\n    NgbDate.prototype.equals = function (other) {\n        return other != null && this.year === other.year && this.month === other.month && this.day === other.day;\n    };\n    /**\n     * Checks if the current date is before another date.\n     */\n    NgbDate.prototype.before = function (other) {\n        if (!other) {\n            return false;\n        }\n        if (this.year === other.year) {\n            if (this.month === other.month) {\n                return this.day === other.day ? false : this.day < other.day;\n            }\n            else {\n                return this.month < other.month;\n            }\n        }\n        else {\n            return this.year < other.year;\n        }\n    };\n    /**\n     * Checks if the current date is after another date.\n     */\n    NgbDate.prototype.after = function (other) {\n        if (!other) {\n            return false;\n        }\n        if (this.year === other.year) {\n            if (this.month === other.month) {\n                return this.day === other.day ? false : this.day > other.day;\n            }\n            else {\n                return this.month > other.month;\n            }\n        }\n        else {\n            return this.year > other.year;\n        }\n    };\n    return NgbDate;\n}());\n\nfunction fromJSDate(jsDate) {\n    return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\n}\nfunction toJSDate(date) {\n    var jsDate = new Date(date.year, date.month - 1, date.day, 12);\n    // this is done avoid 30 -> 1930 conversion\n    if (!isNaN(jsDate.getTime())) {\n        jsDate.setFullYear(date.year);\n    }\n    return jsDate;\n}\nfunction NGB_DATEPICKER_CALENDAR_FACTORY() {\n    return new NgbCalendarGregorian();\n}\n/**\n * A service that represents the calendar used by the datepicker.\n *\n * The default implementation uses the Gregorian calendar. You can inject it in your own\n * implementations if necessary to simplify `NgbDate` calculations.\n */\nvar NgbCalendar = /** @class */ (function () {\n    function NgbCalendar() {\n    }\n    NgbCalendar.…µprov = …µ…µdefineInjectable({ factory: NGB_DATEPICKER_CALENDAR_FACTORY, token: NgbCalendar, providedIn: \"root\" });\n    NgbCalendar = __decorate([\n        Injectable({ providedIn: 'root', useFactory: NGB_DATEPICKER_CALENDAR_FACTORY })\n    ], NgbCalendar);\n    return NgbCalendar;\n}());\nvar NgbCalendarGregorian = /** @class */ (function (_super) {\n    __extends(NgbCalendarGregorian, _super);\n    function NgbCalendarGregorian() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbCalendarGregorian.prototype.getDaysPerWeek = function () { return 7; };\n    NgbCalendarGregorian.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\n    NgbCalendarGregorian.prototype.getWeeksPerMonth = function () { return 6; };\n    NgbCalendarGregorian.prototype.getNext = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        var jsDate = toJSDate(date);\n        var checkMonth = true;\n        var expectedMonth = jsDate.getMonth();\n        switch (period) {\n            case 'y':\n                jsDate.setFullYear(jsDate.getFullYear() + number);\n                break;\n            case 'm':\n                expectedMonth += number;\n                jsDate.setMonth(expectedMonth);\n                expectedMonth = expectedMonth % 12;\n                if (expectedMonth < 0) {\n                    expectedMonth = expectedMonth + 12;\n                }\n                break;\n            case 'd':\n                jsDate.setDate(jsDate.getDate() + number);\n                checkMonth = false;\n                break;\n            default:\n                return date;\n        }\n        if (checkMonth && jsDate.getMonth() !== expectedMonth) {\n            // this means the destination month has less days than the initial month\n            // let's go back to the end of the previous month:\n            jsDate.setDate(0);\n        }\n        return fromJSDate(jsDate);\n    };\n    NgbCalendarGregorian.prototype.getPrev = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    NgbCalendarGregorian.prototype.getWeekday = function (date) {\n        var jsDate = toJSDate(date);\n        var day = jsDate.getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    NgbCalendarGregorian.prototype.getWeekNumber = function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        var date = week[thursdayIndex];\n        var jsDate = toJSDate(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        var time = jsDate.getTime();\n        jsDate.setMonth(0); // Compare with Jan 1\n        jsDate.setDate(1);\n        return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\n    };\n    NgbCalendarGregorian.prototype.getToday = function () { return fromJSDate(new Date()); };\n    NgbCalendarGregorian.prototype.isValid = function (date) {\n        if (!date || !isInteger(date.year) || !isInteger(date.month) || !isInteger(date.day)) {\n            return false;\n        }\n        // year 0 doesn't exist in Gregorian calendar\n        if (date.year === 0) {\n            return false;\n        }\n        var jsDate = toJSDate(date);\n        return !isNaN(jsDate.getTime()) && jsDate.getFullYear() === date.year && jsDate.getMonth() + 1 === date.month &&\n            jsDate.getDate() === date.day;\n    };\n    NgbCalendarGregorian = __decorate([\n        Injectable()\n    ], NgbCalendarGregorian);\n    return NgbCalendarGregorian;\n}(NgbCalendar));\n\nfunction isChangedDate(prev, next) {\n    return !dateComparator(prev, next);\n}\nfunction isChangedMonth(prev, next) {\n    return !prev && !next ? false : !prev || !next ? true : prev.year !== next.year || prev.month !== next.month;\n}\nfunction dateComparator(prev, next) {\n    return (!prev && !next) || (!!prev && !!next && prev.equals(next));\n}\nfunction checkMinBeforeMax(minDate, maxDate) {\n    if (maxDate && minDate && maxDate.before(minDate)) {\n        throw new Error(\"'maxDate' \" + maxDate + \" should be greater than 'minDate' \" + minDate);\n    }\n}\nfunction checkDateInRange(date, minDate, maxDate) {\n    if (date && minDate && date.before(minDate)) {\n        return minDate;\n    }\n    if (date && maxDate && date.after(maxDate)) {\n        return maxDate;\n    }\n    return date || null;\n}\nfunction isDateSelectable(date, state) {\n    var minDate = state.minDate, maxDate = state.maxDate, disabled = state.disabled, markDisabled = state.markDisabled;\n    // clang-format off\n    return !(date === null ||\n        date === undefined ||\n        disabled ||\n        (markDisabled && markDisabled(date, { year: date.year, month: date.month })) ||\n        (minDate && date.before(minDate)) ||\n        (maxDate && date.after(maxDate)));\n    // clang-format on\n}\nfunction generateSelectBoxMonths(calendar, date, minDate, maxDate) {\n    if (!date) {\n        return [];\n    }\n    var months = calendar.getMonths(date.year);\n    if (minDate && date.year === minDate.year) {\n        var index = months.findIndex(function (month) { return month === minDate.month; });\n        months = months.slice(index);\n    }\n    if (maxDate && date.year === maxDate.year) {\n        var index = months.findIndex(function (month) { return month === maxDate.month; });\n        months = months.slice(0, index + 1);\n    }\n    return months;\n}\nfunction generateSelectBoxYears(date, minDate, maxDate) {\n    if (!date) {\n        return [];\n    }\n    var start = minDate ? Math.max(minDate.year, date.year - 500) : date.year - 10;\n    var end = maxDate ? Math.min(maxDate.year, date.year + 500) : date.year + 10;\n    var length = end - start + 1;\n    var numbers = Array(length);\n    for (var i = 0; i < length; i++) {\n        numbers[i] = start + i;\n    }\n    return numbers;\n}\nfunction nextMonthDisabled(calendar, date, maxDate) {\n    var nextDate = Object.assign(calendar.getNext(date, 'm'), { day: 1 });\n    return maxDate != null && nextDate.after(maxDate);\n}\nfunction prevMonthDisabled(calendar, date, minDate) {\n    var prevDate = Object.assign(calendar.getPrev(date, 'm'), { day: 1 });\n    return minDate != null && (prevDate.year === minDate.year && prevDate.month < minDate.month ||\n        prevDate.year < minDate.year && minDate.month === 1);\n}\nfunction buildMonths(calendar, date, state, i18n, force) {\n    var displayMonths = state.displayMonths, months = state.months;\n    // move old months to a temporary array\n    var monthsToReuse = months.splice(0, months.length);\n    // generate new first dates, nullify or reuse months\n    var firstDates = Array.from({ length: displayMonths }, function (_, i) {\n        var firstDate = Object.assign(calendar.getNext(date, 'm', i), { day: 1 });\n        months[i] = null;\n        if (!force) {\n            var reusedIndex = monthsToReuse.findIndex(function (month) { return month.firstDate.equals(firstDate); });\n            // move reused month back to months\n            if (reusedIndex !== -1) {\n                months[i] = monthsToReuse.splice(reusedIndex, 1)[0];\n            }\n        }\n        return firstDate;\n    });\n    // rebuild nullified months\n    firstDates.forEach(function (firstDate, i) {\n        if (months[i] === null) {\n            months[i] = buildMonth(calendar, firstDate, state, i18n, monthsToReuse.shift() || {});\n        }\n    });\n    return months;\n}\nfunction buildMonth(calendar, date, state, i18n, month) {\n    if (month === void 0) { month = {}; }\n    var dayTemplateData = state.dayTemplateData, minDate = state.minDate, maxDate = state.maxDate, firstDayOfWeek = state.firstDayOfWeek, markDisabled = state.markDisabled, outsideDays = state.outsideDays;\n    var calendarToday = calendar.getToday();\n    month.firstDate = null;\n    month.lastDate = null;\n    month.number = date.month;\n    month.year = date.year;\n    month.weeks = month.weeks || [];\n    month.weekdays = month.weekdays || [];\n    date = getFirstViewDate(calendar, date, firstDayOfWeek);\n    // month has weeks\n    for (var week = 0; week < calendar.getWeeksPerMonth(); week++) {\n        var weekObject = month.weeks[week];\n        if (!weekObject) {\n            weekObject = month.weeks[week] = { number: 0, days: [], collapsed: true };\n        }\n        var days = weekObject.days;\n        // week has days\n        for (var day = 0; day < calendar.getDaysPerWeek(); day++) {\n            if (week === 0) {\n                month.weekdays[day] = calendar.getWeekday(date);\n            }\n            var newDate = new NgbDate(date.year, date.month, date.day);\n            var nextDate = calendar.getNext(newDate);\n            var ariaLabel = i18n.getDayAriaLabel(newDate);\n            // marking date as disabled\n            var disabled = !!((minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate)));\n            if (!disabled && markDisabled) {\n                disabled = markDisabled(newDate, { month: month.number, year: month.year });\n            }\n            // today\n            var today = newDate.equals(calendarToday);\n            // adding user-provided data to the context\n            var contextUserData = dayTemplateData ? dayTemplateData(newDate, { month: month.number, year: month.year }) : undefined;\n            // saving first date of the month\n            if (month.firstDate === null && newDate.month === month.number) {\n                month.firstDate = newDate;\n            }\n            // saving last date of the month\n            if (newDate.month === month.number && nextDate.month !== month.number) {\n                month.lastDate = newDate;\n            }\n            var dayObject = days[day];\n            if (!dayObject) {\n                dayObject = days[day] = {};\n            }\n            dayObject.date = newDate;\n            dayObject.context = Object.assign(dayObject.context || {}, {\n                $implicit: newDate,\n                date: newDate,\n                data: contextUserData,\n                currentMonth: month.number,\n                currentYear: month.year, disabled: disabled,\n                focused: false,\n                selected: false, today: today\n            });\n            dayObject.tabindex = -1;\n            dayObject.ariaLabel = ariaLabel;\n            dayObject.hidden = false;\n            date = nextDate;\n        }\n        weekObject.number = calendar.getWeekNumber(days.map(function (day) { return day.date; }), firstDayOfWeek);\n        // marking week as collapsed\n        weekObject.collapsed = outsideDays === 'collapsed' && days[0].date.month !== month.number &&\n            days[days.length - 1].date.month !== month.number;\n    }\n    return month;\n}\nfunction getFirstViewDate(calendar, date, firstDayOfWeek) {\n    var daysPerWeek = calendar.getDaysPerWeek();\n    var firstMonthDate = new NgbDate(date.year, date.month, 1);\n    var dayOfWeek = calendar.getWeekday(firstMonthDate) % daysPerWeek;\n    return calendar.getPrev(firstMonthDate, 'd', (daysPerWeek + dayOfWeek - firstDayOfWeek) % daysPerWeek);\n}\n\nfunction NGB_DATEPICKER_18N_FACTORY(locale) {\n    return new NgbDatepickerI18nDefault(locale);\n}\n/**\n * A service supplying i18n data to the datepicker component.\n *\n * The default implementation of this service uses the Angular locale and registered locale data for\n * weekdays and month names (as explained in the Angular i18n guide).\n *\n * It also provides a way to i18n data that depends on calendar calculations, like aria labels, day, week and year\n * numerals. For other static labels the datepicker uses the default Angular i18n.\n *\n * See the [i18n demo](#/components/datepicker/examples#i18n) and\n * [Hebrew calendar demo](#/components/datepicker/calendars#hebrew) on how to extend this class and define\n * a custom provider for i18n.\n */\nvar NgbDatepickerI18n = /** @class */ (function () {\n    function NgbDatepickerI18n() {\n    }\n    /**\n     * Returns the textual representation of a day that is rendered in a day cell.\n     *\n     * @since 3.0.0\n     */\n    NgbDatepickerI18n.prototype.getDayNumerals = function (date) { return \"\" + date.day; };\n    /**\n     * Returns the textual representation of a week number rendered by datepicker.\n     *\n     * @since 3.0.0\n     */\n    NgbDatepickerI18n.prototype.getWeekNumerals = function (weekNumber) { return \"\" + weekNumber; };\n    /**\n     * Returns the textual representation of a year that is rendered in the datepicker year select box.\n     *\n     * @since 3.0.0\n     */\n    NgbDatepickerI18n.prototype.getYearNumerals = function (year) { return \"\" + year; };\n    NgbDatepickerI18n.…µprov = …µ…µdefineInjectable({ factory: function NgbDatepickerI18n_Factory() { return NGB_DATEPICKER_18N_FACTORY(…µ…µinject(LOCALE_ID)); }, token: NgbDatepickerI18n, providedIn: \"root\" });\n    NgbDatepickerI18n = __decorate([\n        Injectable({ providedIn: 'root', useFactory: NGB_DATEPICKER_18N_FACTORY, deps: [LOCALE_ID] })\n    ], NgbDatepickerI18n);\n    return NgbDatepickerI18n;\n}());\nvar NgbDatepickerI18nDefault = /** @class */ (function (_super) {\n    __extends(NgbDatepickerI18nDefault, _super);\n    function NgbDatepickerI18nDefault(_locale) {\n        var _this = _super.call(this) || this;\n        _this._locale = _locale;\n        var weekdaysStartingOnSunday = getLocaleDayNames(_locale, FormStyle.Standalone, TranslationWidth.Short);\n        _this._weekdaysShort = weekdaysStartingOnSunday.map(function (day, index) { return weekdaysStartingOnSunday[(index + 1) % 7]; });\n        _this._monthsShort = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Abbreviated);\n        _this._monthsFull = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Wide);\n        return _this;\n    }\n    NgbDatepickerI18nDefault.prototype.getWeekdayShortName = function (weekday) { return this._weekdaysShort[weekday - 1] || ''; };\n    NgbDatepickerI18nDefault.prototype.getMonthShortName = function (month) { return this._monthsShort[month - 1] || ''; };\n    NgbDatepickerI18nDefault.prototype.getMonthFullName = function (month) { return this._monthsFull[month - 1] || ''; };\n    NgbDatepickerI18nDefault.prototype.getDayAriaLabel = function (date) {\n        var jsDate = new Date(date.year, date.month - 1, date.day);\n        return formatDate(jsDate, 'fullDate', this._locale);\n    };\n    NgbDatepickerI18nDefault.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n    ]; };\n    NgbDatepickerI18nDefault = __decorate([\n        Injectable(),\n        __param(0, Inject(LOCALE_ID))\n    ], NgbDatepickerI18nDefault);\n    return NgbDatepickerI18nDefault;\n}(NgbDatepickerI18n));\n\nvar NgbDatepickerService = /** @class */ (function () {\n    function NgbDatepickerService(_calendar, _i18n) {\n        var _this = this;\n        this._calendar = _calendar;\n        this._i18n = _i18n;\n        this._VALIDATORS = {\n            dayTemplateData: function (dayTemplateData) {\n                if (_this._state.dayTemplateData !== dayTemplateData) {\n                    return { dayTemplateData: dayTemplateData };\n                }\n            },\n            displayMonths: function (displayMonths) {\n                displayMonths = toInteger(displayMonths);\n                if (isInteger(displayMonths) && displayMonths > 0 && _this._state.displayMonths !== displayMonths) {\n                    return { displayMonths: displayMonths };\n                }\n            },\n            disabled: function (disabled) {\n                if (_this._state.disabled !== disabled) {\n                    return { disabled: disabled };\n                }\n            },\n            firstDayOfWeek: function (firstDayOfWeek) {\n                firstDayOfWeek = toInteger(firstDayOfWeek);\n                if (isInteger(firstDayOfWeek) && firstDayOfWeek >= 0 && _this._state.firstDayOfWeek !== firstDayOfWeek) {\n                    return { firstDayOfWeek: firstDayOfWeek };\n                }\n            },\n            focusVisible: function (focusVisible) {\n                if (_this._state.focusVisible !== focusVisible && !_this._state.disabled) {\n                    return { focusVisible: focusVisible };\n                }\n            },\n            markDisabled: function (markDisabled) {\n                if (_this._state.markDisabled !== markDisabled) {\n                    return { markDisabled: markDisabled };\n                }\n            },\n            maxDate: function (date) {\n                var maxDate = _this.toValidDate(date, null);\n                if (isChangedDate(_this._state.maxDate, maxDate)) {\n                    return { maxDate: maxDate };\n                }\n            },\n            minDate: function (date) {\n                var minDate = _this.toValidDate(date, null);\n                if (isChangedDate(_this._state.minDate, minDate)) {\n                    return { minDate: minDate };\n                }\n            },\n            navigation: function (navigation) {\n                if (_this._state.navigation !== navigation) {\n                    return { navigation: navigation };\n                }\n            },\n            outsideDays: function (outsideDays) {\n                if (_this._state.outsideDays !== outsideDays) {\n                    return { outsideDays: outsideDays };\n                }\n            }\n        };\n        this._model$ = new Subject();\n        this._dateSelect$ = new Subject();\n        this._state = {\n            dayTemplateData: null,\n            markDisabled: null,\n            maxDate: null,\n            minDate: null,\n            disabled: false,\n            displayMonths: 1,\n            firstDate: null,\n            firstDayOfWeek: 1,\n            lastDate: null,\n            focusDate: null,\n            focusVisible: false,\n            months: [],\n            navigation: 'select',\n            outsideDays: 'visible',\n            prevDisabled: false,\n            nextDisabled: false,\n            selectedDate: null,\n            selectBoxes: { years: [], months: [] }\n        };\n    }\n    Object.defineProperty(NgbDatepickerService.prototype, \"model$\", {\n        get: function () { return this._model$.pipe(filter(function (model) { return model.months.length > 0; })); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"dateSelect$\", {\n        get: function () { return this._dateSelect$.pipe(filter(function (date) { return date !== null; })); },\n        enumerable: true,\n        configurable: true\n    });\n    NgbDatepickerService.prototype.set = function (options) {\n        var _this = this;\n        var patch = Object.keys(options)\n            .map(function (key) { return _this._VALIDATORS[key](options[key]); })\n            .reduce(function (obj, part) { return (__assign(__assign({}, obj), part)); }, {});\n        if (Object.keys(patch).length > 0) {\n            this._nextState(patch);\n        }\n    };\n    NgbDatepickerService.prototype.focus = function (date) {\n        var focusedDate = this.toValidDate(date, null);\n        if (focusedDate != null && !this._state.disabled && isChangedDate(this._state.focusDate, focusedDate)) {\n            this._nextState({ focusDate: date });\n        }\n    };\n    NgbDatepickerService.prototype.focusSelect = function () {\n        if (isDateSelectable(this._state.focusDate, this._state)) {\n            this.select(this._state.focusDate, { emitEvent: true });\n        }\n    };\n    NgbDatepickerService.prototype.open = function (date) {\n        var firstDate = this.toValidDate(date, this._calendar.getToday());\n        if (firstDate != null && !this._state.disabled &&\n            (!this._state.firstDate || isChangedMonth(this._state.firstDate, firstDate))) {\n            this._nextState({ firstDate: firstDate });\n        }\n    };\n    NgbDatepickerService.prototype.select = function (date, options) {\n        if (options === void 0) { options = {}; }\n        var selectedDate = this.toValidDate(date, null);\n        if (selectedDate != null && !this._state.disabled) {\n            if (isChangedDate(this._state.selectedDate, selectedDate)) {\n                this._nextState({ selectedDate: selectedDate });\n            }\n            if (options.emitEvent && isDateSelectable(selectedDate, this._state)) {\n                this._dateSelect$.next(selectedDate);\n            }\n        }\n    };\n    NgbDatepickerService.prototype.toValidDate = function (date, defaultValue) {\n        var ngbDate = NgbDate.from(date);\n        if (defaultValue === undefined) {\n            defaultValue = this._calendar.getToday();\n        }\n        return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\n    };\n    NgbDatepickerService.prototype.getMonth = function (struct) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._state.months), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var month = _c.value;\n                if (struct.month === month.number && struct.year === month.year) {\n                    return month;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        throw new Error(\"month \" + struct.month + \" of year \" + struct.year + \" not found\");\n    };\n    NgbDatepickerService.prototype._nextState = function (patch) {\n        var newState = this._updateState(patch);\n        this._patchContexts(newState);\n        this._state = newState;\n        this._model$.next(this._state);\n    };\n    NgbDatepickerService.prototype._patchContexts = function (state) {\n        var months = state.months, displayMonths = state.displayMonths, selectedDate = state.selectedDate, focusDate = state.focusDate, focusVisible = state.focusVisible, disabled = state.disabled, outsideDays = state.outsideDays;\n        state.months.forEach(function (month) {\n            month.weeks.forEach(function (week) {\n                week.days.forEach(function (day) {\n                    // patch focus flag\n                    if (focusDate) {\n                        day.context.focused = focusDate.equals(day.date) && focusVisible;\n                    }\n                    // calculating tabindex\n                    day.tabindex =\n                        !disabled && focusDate && day.date.equals(focusDate) && focusDate.month === month.number ? 0 : -1;\n                    // override context disabled\n                    if (disabled === true) {\n                        day.context.disabled = true;\n                    }\n                    // patch selection flag\n                    if (selectedDate !== undefined) {\n                        day.context.selected = selectedDate !== null && selectedDate.equals(day.date);\n                    }\n                    // visibility\n                    if (month.number !== day.date.month) {\n                        day.hidden = outsideDays === 'hidden' || outsideDays === 'collapsed' ||\n                            (displayMonths > 1 && day.date.after(months[0].firstDate) &&\n                                day.date.before(months[displayMonths - 1].lastDate));\n                    }\n                });\n            });\n        });\n    };\n    NgbDatepickerService.prototype._updateState = function (patch) {\n        // patching fields\n        var state = Object.assign({}, this._state, patch);\n        var startDate = state.firstDate;\n        // min/max dates changed\n        if ('minDate' in patch || 'maxDate' in patch) {\n            checkMinBeforeMax(state.minDate, state.maxDate);\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\n            startDate = state.focusDate;\n        }\n        // disabled\n        if ('disabled' in patch) {\n            state.focusVisible = false;\n        }\n        // initial rebuild via 'select()'\n        if ('selectedDate' in patch && this._state.months.length === 0) {\n            startDate = state.selectedDate;\n        }\n        // terminate early if only focus visibility was changed\n        if ('focusVisible' in patch) {\n            return state;\n        }\n        // focus date changed\n        if ('focusDate' in patch) {\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\n            startDate = state.focusDate;\n            // nothing to rebuild if only focus changed and it is still visible\n            if (state.months.length !== 0 && state.focusDate && !state.focusDate.before(state.firstDate) &&\n                !state.focusDate.after(state.lastDate)) {\n                return state;\n            }\n        }\n        // first date changed\n        if ('firstDate' in patch) {\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\n            startDate = state.firstDate;\n        }\n        // rebuilding months\n        if (startDate) {\n            var forceRebuild = 'dayTemplateData' in patch || 'firstDayOfWeek' in patch || 'markDisabled' in patch ||\n                'minDate' in patch || 'maxDate' in patch || 'disabled' in patch || 'outsideDays' in patch;\n            var months = buildMonths(this._calendar, startDate, state, this._i18n, forceRebuild);\n            // updating months and boundary dates\n            state.months = months;\n            state.firstDate = months[0].firstDate;\n            state.lastDate = months[months.length - 1].lastDate;\n            // reset selected date if 'markDisabled' returns true\n            if ('selectedDate' in patch && !isDateSelectable(state.selectedDate, state)) {\n                state.selectedDate = null;\n            }\n            // adjusting focus after months were built\n            if ('firstDate' in patch) {\n                if (!state.focusDate || state.focusDate.before(state.firstDate) || state.focusDate.after(state.lastDate)) {\n                    state.focusDate = startDate;\n                }\n            }\n            // adjusting months/years for the select box navigation\n            var yearChanged = !this._state.firstDate || this._state.firstDate.year !== state.firstDate.year;\n            var monthChanged = !this._state.firstDate || this._state.firstDate.month !== state.firstDate.month;\n            if (state.navigation === 'select') {\n                // years ->  boundaries (min/max were changed)\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.years.length === 0 || yearChanged) {\n                    state.selectBoxes.years = generateSelectBoxYears(state.firstDate, state.minDate, state.maxDate);\n                }\n                // months -> when current year or boundaries change\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.months.length === 0 || yearChanged) {\n                    state.selectBoxes.months =\n                        generateSelectBoxMonths(this._calendar, state.firstDate, state.minDate, state.maxDate);\n                }\n            }\n            else {\n                state.selectBoxes = { years: [], months: [] };\n            }\n            // updating navigation arrows -> boundaries change (min/max) or month/year changes\n            if ((state.navigation === 'arrows' || state.navigation === 'select') &&\n                (monthChanged || yearChanged || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch)) {\n                state.prevDisabled = state.disabled || prevMonthDisabled(this._calendar, state.firstDate, state.minDate);\n                state.nextDisabled = state.disabled || nextMonthDisabled(this._calendar, state.lastDate, state.maxDate);\n            }\n        }\n        return state;\n    };\n    NgbDatepickerService.ctorParameters = function () { return [\n        { type: NgbCalendar },\n        { type: NgbDatepickerI18n }\n    ]; };\n    NgbDatepickerService = __decorate([\n        Injectable()\n    ], NgbDatepickerService);\n    return NgbDatepickerService;\n}());\n\n// clang-format on\nvar NavigationEvent;\n(function (NavigationEvent) {\n    NavigationEvent[NavigationEvent[\"PREV\"] = 0] = \"PREV\";\n    NavigationEvent[NavigationEvent[\"NEXT\"] = 1] = \"NEXT\";\n})(NavigationEvent || (NavigationEvent = {}));\n\n/**\n * A configuration service for the [`NgbDatepicker`](#/components/datepicker/api#NgbDatepicker) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the datepickers used in the application.\n */\nvar NgbDatepickerConfig = /** @class */ (function () {\n    function NgbDatepickerConfig() {\n        this.displayMonths = 1;\n        this.firstDayOfWeek = 1;\n        this.navigation = 'select';\n        this.outsideDays = 'visible';\n        this.showWeekdays = true;\n        this.showWeekNumbers = false;\n    }\n    NgbDatepickerConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbDatepickerConfig_Factory() { return new NgbDatepickerConfig(); }, token: NgbDatepickerConfig, providedIn: \"root\" });\n    NgbDatepickerConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbDatepickerConfig);\n    return NgbDatepickerConfig;\n}());\n\nfunction NGB_DATEPICKER_DATE_ADAPTER_FACTORY() {\n    return new NgbDateStructAdapter();\n}\n/**\n * An abstract service that does the conversion between the internal datepicker `NgbDateStruct` model and\n * any provided user date model `D`, ex. a string, a native date, etc.\n *\n * The adapter is used **only** for conversion when binding datepicker to a form control,\n * ex. `[(ngModel)]=\"userDateModel\"`. Here `userDateModel` can be of any type.\n *\n * The default datepicker implementation assumes we use `NgbDateStruct` as a user model.\n *\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details\n * and the [custom adapter demo](#/components/datepicker/examples#adapter) for an example.\n */\nvar NgbDateAdapter = /** @class */ (function () {\n    function NgbDateAdapter() {\n    }\n    NgbDateAdapter.…µprov = …µ…µdefineInjectable({ factory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY, token: NgbDateAdapter, providedIn: \"root\" });\n    NgbDateAdapter = __decorate([\n        Injectable({ providedIn: 'root', useFactory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY })\n    ], NgbDateAdapter);\n    return NgbDateAdapter;\n}());\nvar NgbDateStructAdapter = /** @class */ (function (_super) {\n    __extends(NgbDateStructAdapter, _super);\n    function NgbDateStructAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     */\n    NgbDateStructAdapter.prototype.fromModel = function (date) {\n        return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\n            { year: date.year, month: date.month, day: date.day } :\n            null;\n    };\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     */\n    NgbDateStructAdapter.prototype.toModel = function (date) {\n        return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\n            { year: date.year, month: date.month, day: date.day } :\n            null;\n    };\n    NgbDateStructAdapter = __decorate([\n        Injectable()\n    ], NgbDateStructAdapter);\n    return NgbDateStructAdapter;\n}(NgbDateAdapter));\n\nvar NGB_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbDatepicker; }),\n    multi: true\n};\n/**\n * A directive that marks the content template that customizes the way datepicker months are displayed\n *\n * @since 5.3.0\n */\nvar NgbDatepickerContent = /** @class */ (function () {\n    function NgbDatepickerContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbDatepickerContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbDatepickerContent = __decorate([\n        Directive({ selector: 'ng-template[ngbDatepickerContent]' })\n    ], NgbDatepickerContent);\n    return NgbDatepickerContent;\n}());\n/**\n * A highly configurable component that helps you with selecting calendar dates.\n *\n * `NgbDatepicker` is meant to be displayed inline on a page or put inside a popup.\n */\nvar NgbDatepicker = /** @class */ (function () {\n    function NgbDatepicker(_service, _calendar, i18n, config, cd, _elementRef, _ngbDateAdapter, _ngZone) {\n        var _this = this;\n        this._service = _service;\n        this._calendar = _calendar;\n        this.i18n = i18n;\n        this._elementRef = _elementRef;\n        this._ngbDateAdapter = _ngbDateAdapter;\n        this._ngZone = _ngZone;\n        this._controlValue = null;\n        this._destroyed$ = new Subject();\n        this._publicState = {};\n        /**\n         * An event emitted right before the navigation happens and displayed month changes.\n         *\n         * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\n         */\n        this.navigate = new EventEmitter();\n        /**\n         * An event emitted when user selects a date using keyboard or mouse.\n         *\n         * The payload of the event is currently selected `NgbDate`.\n         *\n         * @since 5.2.0\n         */\n        this.dateSelect = new EventEmitter();\n        /**\n         * An event emitted when user selects a date using keyboard or mouse.\n         *\n         * The payload of the event is currently selected `NgbDate`.\n         *\n         * @deprecated 6.0.0 Please use 'dateSelect' output instead due to collision with native\n         * 'select' event.\n         */\n        this.select = this.dateSelect;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\n            'maxDate', 'navigation', 'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate']\n            .forEach(function (input) { return _this[input] = config[input]; });\n        _service.dateSelect$.pipe(takeUntil(this._destroyed$)).subscribe(function (date) { _this.dateSelect.emit(date); });\n        _service.model$.pipe(takeUntil(this._destroyed$)).subscribe(function (model) {\n            var newDate = model.firstDate;\n            var oldDate = _this.model ? _this.model.firstDate : null;\n            // update public state\n            _this._publicState = {\n                maxDate: model.maxDate,\n                minDate: model.minDate,\n                firstDate: model.firstDate,\n                lastDate: model.lastDate,\n                focusedDate: model.focusDate,\n                months: model.months.map(function (viewModel) { return viewModel.firstDate; })\n            };\n            var navigationPrevented = false;\n            // emitting navigation event if the first month changes\n            if (!newDate.equals(oldDate)) {\n                _this.navigate.emit({\n                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,\n                    next: { year: newDate.year, month: newDate.month },\n                    preventDefault: function () { return navigationPrevented = true; }\n                });\n                // can't prevent the very first navigation\n                if (navigationPrevented && oldDate !== null) {\n                    _this._service.open(oldDate);\n                    return;\n                }\n            }\n            var newSelectedDate = model.selectedDate;\n            var newFocusedDate = model.focusDate;\n            var oldFocusedDate = _this.model ? _this.model.focusDate : null;\n            _this.model = model;\n            // handling selection change\n            if (isChangedDate(newSelectedDate, _this._controlValue)) {\n                _this._controlValue = newSelectedDate;\n                _this.onTouched();\n                _this.onChange(_this._ngbDateAdapter.toModel(newSelectedDate));\n            }\n            // handling focus change\n            if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {\n                _this.focus();\n            }\n            cd.markForCheck();\n        });\n    }\n    Object.defineProperty(NgbDatepicker.prototype, \"state\", {\n        /**\n         *  Returns the readonly public state of the datepicker\n         *\n         * @since 5.2.0\n         */\n        get: function () { return this._publicState; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepicker.prototype, \"calendar\", {\n        /**\n         *  Returns the calendar service used in the specific datepicker instance.\n         *\n         *  @since 5.3.0\n         */\n        get: function () { return this._calendar; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Focuses on given date.\n     */\n    NgbDatepicker.prototype.focusDate = function (date) { this._service.focus(NgbDate.from(date)); };\n    /**\n     *  Selects focused date.\n     */\n    NgbDatepicker.prototype.focusSelect = function () { this._service.focusSelect(); };\n    NgbDatepicker.prototype.focus = function () {\n        var _this = this;\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n            var elementToFocus = _this._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex=\"0\"]');\n            if (elementToFocus) {\n                elementToFocus.focus();\n            }\n        });\n    };\n    /**\n     * Navigates to the provided date.\n     *\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     *\n     * Use the `[startDate]` input as an alternative.\n     */\n    NgbDatepicker.prototype.navigateTo = function (date) {\n        this._service.open(NgbDate.from(date ? date.day ? date : __assign(__assign({}, date), { day: 1 }) : null));\n    };\n    NgbDatepicker.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular(function () {\n            var focusIns$ = fromEvent(_this._contentEl.nativeElement, 'focusin');\n            var focusOuts$ = fromEvent(_this._contentEl.nativeElement, 'focusout');\n            var nativeElement = _this._elementRef.nativeElement;\n            // we're changing 'focusVisible' only when entering or leaving months view\n            // and ignoring all focus events where both 'target' and 'related' target are day cells\n            merge(focusIns$, focusOuts$)\n                .pipe(filter(function (_a) {\n                var target = _a.target, relatedTarget = _a.relatedTarget;\n                return !(hasClassName(target, 'ngb-dp-day') && hasClassName(relatedTarget, 'ngb-dp-day') &&\n                    nativeElement.contains(target) && nativeElement.contains(relatedTarget));\n            }), takeUntil(_this._destroyed$))\n                .subscribe(function (_a) {\n                var type = _a.type;\n                return _this._ngZone.run(function () { return _this._service.set({ focusVisible: type === 'focusin' }); });\n            });\n        });\n    };\n    NgbDatepicker.prototype.ngOnDestroy = function () { this._destroyed$.next(); };\n    NgbDatepicker.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.model === undefined) {\n            var inputs_1 = {};\n            ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\n                'outsideDays']\n                .forEach(function (name) { return inputs_1[name] = _this[name]; });\n            this._service.set(inputs_1);\n            this.navigateTo(this.startDate);\n        }\n        if (!this.dayTemplate) {\n            this.dayTemplate = this._defaultDayTemplate;\n        }\n    };\n    NgbDatepicker.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var inputs = {};\n        ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\n            'outsideDays']\n            .filter(function (name) { return name in changes; })\n            .forEach(function (name) { return inputs[name] = _this[name]; });\n        this._service.set(inputs);\n        if ('startDate' in changes) {\n            var _a = changes.startDate, currentValue = _a.currentValue, previousValue = _a.previousValue;\n            if (isChangedMonth(previousValue, currentValue)) {\n                this.navigateTo(this.startDate);\n            }\n        }\n    };\n    NgbDatepicker.prototype.onDateSelect = function (date) {\n        this._service.focus(date);\n        this._service.select(date, { emitEvent: true });\n    };\n    NgbDatepicker.prototype.onNavigateDateSelect = function (date) { this._service.open(date); };\n    NgbDatepicker.prototype.onNavigateEvent = function (event) {\n        switch (event) {\n            case NavigationEvent.PREV:\n                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));\n                break;\n            case NavigationEvent.NEXT:\n                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));\n                break;\n        }\n    };\n    NgbDatepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    NgbDatepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    NgbDatepicker.prototype.setDisabledState = function (disabled) { this._service.set({ disabled: disabled }); };\n    NgbDatepicker.prototype.writeValue = function (value) {\n        this._controlValue = NgbDate.from(this._ngbDateAdapter.fromModel(value));\n        this._service.select(this._controlValue);\n    };\n    NgbDatepicker.ctorParameters = function () { return [\n        { type: NgbDatepickerService },\n        { type: NgbCalendar },\n        { type: NgbDatepickerI18n },\n        { type: NgbDatepickerConfig },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: NgbDateAdapter },\n        { type: NgZone }\n    ]; };\n    __decorate([\n        ViewChild('defaultDayTemplate', { static: true })\n    ], NgbDatepicker.prototype, \"_defaultDayTemplate\", void 0);\n    __decorate([\n        ViewChild('content', { static: true })\n    ], NgbDatepicker.prototype, \"_contentEl\", void 0);\n    __decorate([\n        ContentChild(NgbDatepickerContent, { static: true })\n    ], NgbDatepicker.prototype, \"contentTemplate\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"dayTemplate\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"dayTemplateData\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"displayMonths\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"firstDayOfWeek\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"footerTemplate\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"markDisabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"maxDate\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"minDate\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"navigation\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"outsideDays\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"showWeekdays\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"showWeekNumbers\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepicker.prototype, \"startDate\", void 0);\n    __decorate([\n        Output()\n    ], NgbDatepicker.prototype, \"navigate\", void 0);\n    __decorate([\n        Output()\n    ], NgbDatepicker.prototype, \"dateSelect\", void 0);\n    __decorate([\n        Output()\n    ], NgbDatepicker.prototype, \"select\", void 0);\n    NgbDatepicker = __decorate([\n        Component({\n            exportAs: 'ngbDatepicker',\n            selector: 'ngb-datepicker',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <ng-template #defaultDayTemplate let-date=\\\"date\\\" let-currentMonth=\\\"currentMonth\\\" let-selected=\\\"selected\\\"\\n                 let-disabled=\\\"disabled\\\" let-focused=\\\"focused\\\">\\n      <div ngbDatepickerDayView\\n        [date]=\\\"date\\\"\\n        [currentMonth]=\\\"currentMonth\\\"\\n        [selected]=\\\"selected\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [focused]=\\\"focused\\\">\\n      </div>\\n    </ng-template>\\n\\n    <ng-template #defaultContentTemplate>\\n      <div *ngFor=\\\"let month of model.months; let i = index;\\\" class=\\\"ngb-dp-month\\\">\\n        <div *ngIf=\\\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\\\" class=\\\"ngb-dp-month-name\\\">\\n          {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\\n        </div>\\n        <ngb-datepicker-month [month]=\\\"month.firstDate\\\"></ngb-datepicker-month>\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"ngb-dp-header\\\">\\n      <ngb-datepicker-navigation *ngIf=\\\"navigation !== 'none'\\\"\\n        [date]=\\\"model.firstDate!\\\"\\n        [months]=\\\"model.months\\\"\\n        [disabled]=\\\"model.disabled\\\"\\n        [showSelect]=\\\"model.navigation === 'select'\\\"\\n        [prevDisabled]=\\\"model.prevDisabled\\\"\\n        [nextDisabled]=\\\"model.nextDisabled\\\"\\n        [selectBoxes]=\\\"model.selectBoxes\\\"\\n        (navigate)=\\\"onNavigateEvent($event)\\\"\\n        (select)=\\\"onNavigateDateSelect($event)\\\">\\n      </ngb-datepicker-navigation>\\n    </div>\\n\\n    <div class=\\\"ngb-dp-content\\\" [class.ngb-dp-months]=\\\"!contentTemplate\\\" #content>\\n      <ng-template [ngTemplateOutlet]=\\\"contentTemplate?.templateRef || defaultContentTemplate\\\"></ng-template>\\n    </div>\\n\\n    <ng-template [ngTemplateOutlet]=\\\"footerTemplate\\\"></ng-template>\\n  \",\n            providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService],\n            styles: [\"ngb-datepicker{border:1px solid #dfdfdf;border-radius:.25rem;display:inline-block}ngb-datepicker-month{pointer-events:auto}ngb-datepicker.dropdown-menu{padding:0}.ngb-dp-body{z-index:1050}.ngb-dp-header{border-bottom:0;border-radius:.25rem .25rem 0 0;padding-top:.25rem;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-months{display:-ms-flexbox;display:flex}.ngb-dp-month{pointer-events:none}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-month+.ngb-dp-month .ngb-dp-month-name,.ngb-dp-month+.ngb-dp-month .ngb-dp-week{padding-left:1rem}.ngb-dp-month:last-child .ngb-dp-week{padding-right:.25rem}.ngb-dp-month:first-child .ngb-dp-week{padding-left:.25rem}.ngb-dp-month .ngb-dp-week:last-child{padding-bottom:.25rem}\"]\n        })\n    ], NgbDatepicker);\n    return NgbDatepicker;\n}());\n\nvar Key;\n(function (Key) {\n    Key[Key[\"Tab\"] = 9] = \"Tab\";\n    Key[Key[\"Enter\"] = 13] = \"Enter\";\n    Key[Key[\"Escape\"] = 27] = \"Escape\";\n    Key[Key[\"Space\"] = 32] = \"Space\";\n    Key[Key[\"PageUp\"] = 33] = \"PageUp\";\n    Key[Key[\"PageDown\"] = 34] = \"PageDown\";\n    Key[Key[\"End\"] = 35] = \"End\";\n    Key[Key[\"Home\"] = 36] = \"Home\";\n    Key[Key[\"ArrowLeft\"] = 37] = \"ArrowLeft\";\n    Key[Key[\"ArrowUp\"] = 38] = \"ArrowUp\";\n    Key[Key[\"ArrowRight\"] = 39] = \"ArrowRight\";\n    Key[Key[\"ArrowDown\"] = 40] = \"ArrowDown\";\n})(Key || (Key = {}));\n\n/**\n * A service that represents the keyboard navigation.\n *\n * Default keyboard shortcuts [are documented in the overview](#/components/datepicker/overview#keyboard-shortcuts)\n *\n * @since 5.2.0\n */\nvar NgbDatepickerKeyboardService = /** @class */ (function () {\n    function NgbDatepickerKeyboardService() {\n    }\n    /**\n     * Processes a keyboard event.\n     */\n    NgbDatepickerKeyboardService.prototype.processKey = function (event, datepicker) {\n        var state = datepicker.state, calendar = datepicker.calendar;\n        // tslint:disable-next-line:deprecation\n        switch (event.which) {\n            case Key.PageUp:\n                datepicker.focusDate(calendar.getPrev(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));\n                break;\n            case Key.PageDown:\n                datepicker.focusDate(calendar.getNext(state.focusedDate, event.shiftKey ? 'y' : 'm', 1));\n                break;\n            case Key.End:\n                datepicker.focusDate(event.shiftKey ? state.maxDate : state.lastDate);\n                break;\n            case Key.Home:\n                datepicker.focusDate(event.shiftKey ? state.minDate : state.firstDate);\n                break;\n            case Key.ArrowLeft:\n                datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', 1));\n                break;\n            case Key.ArrowUp:\n                datepicker.focusDate(calendar.getPrev(state.focusedDate, 'd', calendar.getDaysPerWeek()));\n                break;\n            case Key.ArrowRight:\n                datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', 1));\n                break;\n            case Key.ArrowDown:\n                datepicker.focusDate(calendar.getNext(state.focusedDate, 'd', calendar.getDaysPerWeek()));\n                break;\n            case Key.Enter:\n            case Key.Space:\n                datepicker.focusSelect();\n                break;\n            default:\n                return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    };\n    NgbDatepickerKeyboardService.…µprov = …µ…µdefineInjectable({ factory: function NgbDatepickerKeyboardService_Factory() { return new NgbDatepickerKeyboardService(); }, token: NgbDatepickerKeyboardService, providedIn: \"root\" });\n    NgbDatepickerKeyboardService = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbDatepickerKeyboardService);\n    return NgbDatepickerKeyboardService;\n}());\n\n/**\n * A component that renders one month including all the days, weekdays and week numbers. Can be used inside\n * the `<ng-template ngbDatepickerMonths></ng-template>` when you want to customize months layout.\n *\n * For a usage example, see [custom month layout demo](#/components/datepicker/examples#custommonth)\n *\n * @since 5.3.0\n */\nvar NgbDatepickerMonth = /** @class */ (function () {\n    function NgbDatepickerMonth(i18n, datepicker, _keyboardService, _service) {\n        this.i18n = i18n;\n        this.datepicker = datepicker;\n        this._keyboardService = _keyboardService;\n        this._service = _service;\n    }\n    Object.defineProperty(NgbDatepickerMonth.prototype, \"month\", {\n        /**\n         * The first date of month to be rendered.\n         *\n         * This month must one of the months present in the\n         * [datepicker state](#/components/datepicker/api#NgbDatepickerState).\n         */\n        set: function (month) {\n            this.viewModel = this._service.getMonth(month);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbDatepickerMonth.prototype.onKeyDown = function (event) { this._keyboardService.processKey(event, this.datepicker); };\n    NgbDatepickerMonth.prototype.doSelect = function (day) {\n        if (!day.context.disabled && !day.hidden) {\n            this.datepicker.onDateSelect(day.date);\n        }\n    };\n    NgbDatepickerMonth.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n },\n        { type: NgbDatepicker },\n        { type: NgbDatepickerKeyboardService },\n        { type: NgbDatepickerService }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbDatepickerMonth.prototype, \"month\", null);\n    NgbDatepickerMonth = __decorate([\n        Component({\n            selector: 'ngb-datepicker-month',\n            host: { 'role': 'grid', '(keydown)': 'onKeyDown($event)' },\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <div *ngIf=\\\"datepicker.showWeekdays\\\" class=\\\"ngb-dp-week ngb-dp-weekdays\\\" role=\\\"row\\\">\\n      <div *ngIf=\\\"datepicker.showWeekNumbers\\\" class=\\\"ngb-dp-weekday ngb-dp-showweek\\\"></div>\\n      <div *ngFor=\\\"let w of viewModel.weekdays\\\" class=\\\"ngb-dp-weekday small\\\" role=\\\"columnheader\\\">\\n        {{ i18n.getWeekdayShortName(w) }}\\n      </div>\\n    </div>\\n    <ng-template ngFor let-week [ngForOf]=\\\"viewModel.weeks\\\">\\n      <div *ngIf=\\\"!week.collapsed\\\" class=\\\"ngb-dp-week\\\" role=\\\"row\\\">\\n        <div *ngIf=\\\"datepicker.showWeekNumbers\\\" class=\\\"ngb-dp-week-number small text-muted\\\">{{ i18n.getWeekNumerals(week.number) }}</div>\\n        <div *ngFor=\\\"let day of week.days\\\" (click)=\\\"doSelect(day); $event.preventDefault()\\\" class=\\\"ngb-dp-day\\\" role=\\\"gridcell\\\"\\n          [class.disabled]=\\\"day.context.disabled\\\"\\n          [tabindex]=\\\"day.tabindex\\\"\\n          [class.hidden]=\\\"day.hidden\\\"\\n          [class.ngb-dp-today]=\\\"day.context.today\\\"\\n          [attr.aria-label]=\\\"day.ariaLabel\\\">\\n          <ng-template [ngIf]=\\\"!day.hidden\\\">\\n            <ng-template [ngTemplateOutlet]=\\\"datepicker.dayTemplate\\\" [ngTemplateOutletContext]=\\\"day.context\\\"></ng-template>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \",\n            styles: [\"ngb-datepicker-month{display:block}.ngb-dp-week-number,.ngb-dp-weekday{line-height:2rem;text-align:center;font-style:italic}.ngb-dp-weekday{color:#5bc0de;color:var(--info)}.ngb-dp-week{border-radius:.25rem;display:-ms-flexbox;display:flex}.ngb-dp-weekdays{border-bottom:1px solid rgba(0,0,0,.125);border-radius:0;background-color:#f8f9fa;background-color:var(--light)}.ngb-dp-day,.ngb-dp-week-number,.ngb-dp-weekday{width:2rem;height:2rem}.ngb-dp-day{cursor:pointer}.ngb-dp-day.disabled,.ngb-dp-day.hidden{cursor:default;pointer-events:none}.ngb-dp-day[tabindex=\\\"0\\\"]{z-index:1}\"]\n        })\n    ], NgbDatepickerMonth);\n    return NgbDatepickerMonth;\n}());\n\nvar NgbDatepickerNavigation = /** @class */ (function () {\n    function NgbDatepickerNavigation(i18n) {\n        this.i18n = i18n;\n        this.navigation = NavigationEvent;\n        this.months = [];\n        this.navigate = new EventEmitter();\n        this.select = new EventEmitter();\n    }\n    NgbDatepickerNavigation.prototype.onClickPrev = function (event) {\n        event.currentTarget.focus();\n        this.navigate.emit(this.navigation.PREV);\n    };\n    NgbDatepickerNavigation.prototype.onClickNext = function (event) {\n        event.currentTarget.focus();\n        this.navigate.emit(this.navigation.NEXT);\n    };\n    NgbDatepickerNavigation.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"date\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"months\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"showSelect\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"prevDisabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"nextDisabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigation.prototype, \"selectBoxes\", void 0);\n    __decorate([\n        Output()\n    ], NgbDatepickerNavigation.prototype, \"navigate\", void 0);\n    __decorate([\n        Output()\n    ], NgbDatepickerNavigation.prototype, \"select\", void 0);\n    NgbDatepickerNavigation = __decorate([\n        Component({\n            selector: 'ngb-datepicker-navigation',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <div class=\\\"ngb-dp-arrow\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"onClickPrev($event)\\\" [disabled]=\\\"prevDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.previous-month\\\" aria-label=\\\"Previous month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.previous-month\\\" title=\\\"Previous month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    <ngb-datepicker-navigation-select *ngIf=\\\"showSelect\\\" class=\\\"ngb-dp-navigation-select\\\"\\n      [date]=\\\"date\\\"\\n      [disabled] = \\\"disabled\\\"\\n      [months]=\\\"selectBoxes.months\\\"\\n      [years]=\\\"selectBoxes.years\\\"\\n      (select)=\\\"select.emit($event)\\\">\\n    </ngb-datepicker-navigation-select>\\n\\n    <ng-template *ngIf=\\\"!showSelect\\\" ngFor let-month [ngForOf]=\\\"months\\\" let-i=\\\"index\\\">\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i > 0\\\"></div>\\n      <div class=\\\"ngb-dp-month-name\\\">\\n        {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\\n      </div>\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i !== months.length - 1\\\"></div>\\n    </ng-template>\\n    <div class=\\\"ngb-dp-arrow right\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"onClickNext($event)\\\" [disabled]=\\\"nextDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.next-month\\\" aria-label=\\\"Next month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.next-month\\\" title=\\\"Next month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    \",\n            styles: [\"ngb-datepicker-navigation{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-dp-navigation-chevron{border-style:solid;border-width:.2em .2em 0 0;display:inline-block;width:.75em;height:.75em;margin-left:.25em;margin-right:.15em;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.right .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg);margin-left:.15em;margin-right:.25em}.ngb-dp-arrow{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;padding-right:0;padding-left:0;margin:0;width:2rem;height:2rem}.ngb-dp-arrow.right{-ms-flex-pack:end;justify-content:flex-end}.ngb-dp-arrow-btn{padding:0 .25rem;margin:0 .5rem;border:none;background-color:transparent;z-index:1}.ngb-dp-arrow-btn:focus{outline-width:1px;outline-style:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.ngb-dp-arrow-btn:focus{outline-style:solid}}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-navigation-select{display:-ms-flexbox;display:flex;-ms-flex:1 1 9rem;flex:1 1 9rem}\"]\n        })\n    ], NgbDatepickerNavigation);\n    return NgbDatepickerNavigation;\n}());\n\nvar isContainedIn = function (element, array) {\n    return array ? array.some(function (item) { return item.contains(element); }) : false;\n};\nvar …µ0 = isContainedIn;\nvar matchesSelectorIfAny = function (element, selector) {\n    return !selector || closest(element, selector) != null;\n};\nvar …µ1 = matchesSelectorIfAny;\nvar …µ2 = function () {\n    var isIOS = function () { return /iPad|iPhone|iPod/.test(navigator.userAgent) ||\n        (/Macintosh/.test(navigator.userAgent) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2); };\n    var isAndroid = function () { return /Android/.test(navigator.userAgent); };\n    return typeof navigator !== 'undefined' ? !!navigator.userAgent && (isIOS() || isAndroid()) : false;\n};\n// we have to add a more significant delay to avoid re-opening when handling (click) on a toggling element\n// TODO: use proper Angular platform detection when NgbAutoClose becomes a service and we can inject PLATFORM_ID\nvar isMobile = (…µ2)();\n// setting 'ngbAutoClose' synchronously on mobile results in immediate popup closing\n// when tapping on the triggering element\nvar wrapAsyncForMobile = function (fn) { return isMobile ? function () { return setTimeout(function () { return fn(); }, 100); } : fn; };\nvar …µ3 = wrapAsyncForMobile;\nfunction ngbAutoClose(zone, document, type, close, closed$, insideElements, ignoreElements, insideSelector) {\n    // closing on ESC and outside clicks\n    if (type) {\n        zone.runOutsideAngular(wrapAsyncForMobile(function () {\n            var shouldCloseOnClick = function (event) {\n                var element = event.target;\n                if (event.button === 2 || isContainedIn(element, ignoreElements)) {\n                    return false;\n                }\n                if (type === 'inside') {\n                    return isContainedIn(element, insideElements) && matchesSelectorIfAny(element, insideSelector);\n                }\n                else if (type === 'outside') {\n                    return !isContainedIn(element, insideElements);\n                }\n                else /* if (type === true) */ {\n                    return matchesSelectorIfAny(element, insideSelector) || !isContainedIn(element, insideElements);\n                }\n            };\n            var escapes$ = fromEvent(document, 'keydown')\n                .pipe(takeUntil(closed$), \n            // tslint:disable-next-line:deprecation\n            filter(function (e) { return e.which === Key.Escape; }), tap(function (e) { return e.preventDefault(); }));\n            // we have to pre-calculate 'shouldCloseOnClick' on 'mousedown',\n            // because on 'mouseup' DOM nodes might be detached\n            var mouseDowns$ = fromEvent(document, 'mousedown').pipe(map(shouldCloseOnClick), takeUntil(closed$));\n            var closeableClicks$ = fromEvent(document, 'mouseup')\n                .pipe(withLatestFrom(mouseDowns$), filter(function (_a) {\n                var _b = __read(_a, 2), _ = _b[0], shouldClose = _b[1];\n                return shouldClose;\n            }), delay(0), takeUntil(closed$));\n            race([\n                escapes$.pipe(map(function (_) { return 0 /* ESCAPE */; })), closeableClicks$.pipe(map(function (_) { return 1 /* CLICK */; }))\n            ]).subscribe(function (source) { return zone.run(function () { return close(source); }); });\n        }));\n    }\n}\n\nvar FOCUSABLE_ELEMENTS_SELECTOR = [\n    'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\n    'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\n].join(', ');\n/**\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\n */\nfunction getFocusableBoundaryElements(element) {\n    var list = Array.from(element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR))\n        .filter(function (el) { return el.tabIndex !== -1; });\n    return [list[0], list[list.length - 1]];\n}\n/**\n * Function that enforces browser focus to be trapped inside a DOM element.\n *\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\n *\n * @param zone Angular zone\n * @param element The element around which focus will be trapped inside\n * @param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\n * and free internal resources\n * @param refocusOnClick Put the focus back to the last focused element whenever a click occurs on element (default to\n * false)\n */\nvar ngbFocusTrap = function (zone, element, stopFocusTrap$, refocusOnClick) {\n    if (refocusOnClick === void 0) { refocusOnClick = false; }\n    zone.runOutsideAngular(function () {\n        // last focused element\n        var lastFocusedElement$ = fromEvent(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map(function (e) { return e.target; }));\n        // 'tab' / 'shift+tab' stream\n        fromEvent(element, 'keydown')\n            .pipe(takeUntil(stopFocusTrap$), \n        // tslint:disable:deprecation\n        filter(function (e) { return e.which === Key.Tab; }), \n        // tslint:enable:deprecation\n        withLatestFrom(lastFocusedElement$))\n            .subscribe(function (_a) {\n            var _b = __read(_a, 2), tabEvent = _b[0], focusedElement = _b[1];\n            var _c = __read(getFocusableBoundaryElements(element), 2), first = _c[0], last = _c[1];\n            if ((focusedElement === first || focusedElement === element) && tabEvent.shiftKey) {\n                last.focus();\n                tabEvent.preventDefault();\n            }\n            if (focusedElement === last && !tabEvent.shiftKey) {\n                first.focus();\n                tabEvent.preventDefault();\n            }\n        });\n        // inside click\n        if (refocusOnClick) {\n            fromEvent(element, 'click')\n                .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map(function (arr) { return arr[1]; }))\n                .subscribe(function (lastFocusedElement) { return lastFocusedElement.focus(); });\n        }\n    });\n};\n\n// previous version:\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\nvar Positioning = /** @class */ (function () {\n    function Positioning() {\n    }\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\n    Positioning.prototype.isStaticPositioned = function (element) {\n        return (this.getStyle(element, 'position') || 'static') === 'static';\n    };\n    Positioning.prototype.offsetParent = function (element) {\n        var offsetParentEl = element.offsetParent || document.documentElement;\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n            offsetParentEl = offsetParentEl.offsetParent;\n        }\n        return offsetParentEl || document.documentElement;\n    };\n    Positioning.prototype.position = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elPosition;\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\n        if (this.getStyle(element, 'position') === 'fixed') {\n            elPosition = element.getBoundingClientRect();\n            elPosition = {\n                top: elPosition.top,\n                bottom: elPosition.bottom,\n                left: elPosition.left,\n                right: elPosition.right,\n                height: elPosition.height,\n                width: elPosition.width\n            };\n        }\n        else {\n            var offsetParentEl = this.offsetParent(element);\n            elPosition = this.offset(element, false);\n            if (offsetParentEl !== document.documentElement) {\n                parentOffset = this.offset(offsetParentEl, false);\n            }\n            parentOffset.top += offsetParentEl.clientTop;\n            parentOffset.left += offsetParentEl.clientLeft;\n        }\n        elPosition.top -= parentOffset.top;\n        elPosition.bottom -= parentOffset.top;\n        elPosition.left -= parentOffset.left;\n        elPosition.right -= parentOffset.left;\n        if (round) {\n            elPosition.top = Math.round(elPosition.top);\n            elPosition.bottom = Math.round(elPosition.bottom);\n            elPosition.left = Math.round(elPosition.left);\n            elPosition.right = Math.round(elPosition.right);\n        }\n        return elPosition;\n    };\n    Positioning.prototype.offset = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elBcr = element.getBoundingClientRect();\n        var viewportOffset = {\n            top: window.pageYOffset - document.documentElement.clientTop,\n            left: window.pageXOffset - document.documentElement.clientLeft\n        };\n        var elOffset = {\n            height: elBcr.height || element.offsetHeight,\n            width: elBcr.width || element.offsetWidth,\n            top: elBcr.top + viewportOffset.top,\n            bottom: elBcr.bottom + viewportOffset.top,\n            left: elBcr.left + viewportOffset.left,\n            right: elBcr.right + viewportOffset.left\n        };\n        if (round) {\n            elOffset.height = Math.round(elOffset.height);\n            elOffset.width = Math.round(elOffset.width);\n            elOffset.top = Math.round(elOffset.top);\n            elOffset.bottom = Math.round(elOffset.bottom);\n            elOffset.left = Math.round(elOffset.left);\n            elOffset.right = Math.round(elOffset.right);\n        }\n        return elOffset;\n    };\n    /*\n      Return false if the element to position is outside the viewport\n    */\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\n        var _a = __read(placement.split('-'), 2), _b = _a[0], placementPrimary = _b === void 0 ? 'top' : _b, _c = _a[1], placementSecondary = _c === void 0 ? 'center' : _c;\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n        var targetElStyles = this.getAllStyles(targetElement);\n        var marginTop = parseFloat(targetElStyles.marginTop);\n        var marginBottom = parseFloat(targetElStyles.marginBottom);\n        var marginLeft = parseFloat(targetElStyles.marginLeft);\n        var marginRight = parseFloat(targetElStyles.marginRight);\n        var topPosition = 0;\n        var leftPosition = 0;\n        switch (placementPrimary) {\n            case 'top':\n                topPosition = (hostElPosition.top - (targetElement.offsetHeight + marginTop + marginBottom));\n                break;\n            case 'bottom':\n                topPosition = (hostElPosition.top + hostElPosition.height);\n                break;\n            case 'left':\n                leftPosition = (hostElPosition.left - (targetElement.offsetWidth + marginLeft + marginRight));\n                break;\n            case 'right':\n                leftPosition = (hostElPosition.left + hostElPosition.width);\n                break;\n        }\n        switch (placementSecondary) {\n            case 'top':\n                topPosition = hostElPosition.top;\n                break;\n            case 'bottom':\n                topPosition = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\n                break;\n            case 'left':\n                leftPosition = hostElPosition.left;\n                break;\n            case 'right':\n                leftPosition = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\n                break;\n            case 'center':\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\n                    leftPosition = (hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2);\n                }\n                else {\n                    topPosition = (hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2);\n                }\n                break;\n        }\n        /// The translate3d/gpu acceleration render a blurry text on chrome, the next line is commented until a browser fix\n        // targetElement.style.transform = `translate3d(${Math.round(leftPosition)}px, ${Math.floor(topPosition)}px, 0px)`;\n        targetElement.style.transform = \"translate(\" + Math.round(leftPosition) + \"px, \" + Math.round(topPosition) + \"px)\";\n        // Check if the targetElement is inside the viewport\n        var targetElBCR = targetElement.getBoundingClientRect();\n        var html = document.documentElement;\n        var windowHeight = window.innerHeight || html.clientHeight;\n        var windowWidth = window.innerWidth || html.clientWidth;\n        return targetElBCR.left >= 0 && targetElBCR.top >= 0 && targetElBCR.right <= windowWidth &&\n            targetElBCR.bottom <= windowHeight;\n    };\n    return Positioning;\n}());\nvar placementSeparator = /\\s+/;\nvar positionService = new Positioning();\n/*\n * Accept the placement array and applies the appropriate placement dependent on the viewport.\n * Returns the applied placement.\n * In case of auto placement, placements are selected in order\n *   'top', 'bottom', 'left', 'right',\n *   'top-left', 'top-right',\n *   'bottom-left', 'bottom-right',\n *   'left-top', 'left-bottom',\n *   'right-top', 'right-bottom'.\n * */\nfunction positionElements(hostElement, targetElement, placement, appendToBody, baseClass) {\n    var e_1, _a;\n    var placementVals = Array.isArray(placement) ? placement : placement.split(placementSeparator);\n    var allowedPlacements = [\n        'top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom',\n        'right-top', 'right-bottom'\n    ];\n    var classList = targetElement.classList;\n    var addClassesToTarget = function (targetPlacement) {\n        var _a = __read(targetPlacement.split('-'), 2), primary = _a[0], secondary = _a[1];\n        var classes = [];\n        if (baseClass) {\n            classes.push(baseClass + \"-\" + primary);\n            if (secondary) {\n                classes.push(baseClass + \"-\" + primary + \"-\" + secondary);\n            }\n            classes.forEach(function (classname) { classList.add(classname); });\n        }\n        return classes;\n    };\n    // Remove old placement classes to avoid issues\n    if (baseClass) {\n        allowedPlacements.forEach(function (placementToRemove) { classList.remove(baseClass + \"-\" + placementToRemove); });\n    }\n    // replace auto placement with other placements\n    var hasAuto = placementVals.findIndex(function (val) { return val === 'auto'; });\n    if (hasAuto >= 0) {\n        allowedPlacements.forEach(function (obj) {\n            if (placementVals.find(function (val) { return val.search('^' + obj) !== -1; }) == null) {\n                placementVals.splice(hasAuto++, 1, obj);\n            }\n        });\n    }\n    // coordinates where to position\n    // Required for transform:\n    var style = targetElement.style;\n    style.position = 'absolute';\n    style.top = '0';\n    style.left = '0';\n    style['will-change'] = 'transform';\n    var testPlacement = null;\n    var isInViewport = false;\n    try {\n        for (var placementVals_1 = __values(placementVals), placementVals_1_1 = placementVals_1.next(); !placementVals_1_1.done; placementVals_1_1 = placementVals_1.next()) {\n            testPlacement = placementVals_1_1.value;\n            var addedClasses = addClassesToTarget(testPlacement);\n            if (positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody)) {\n                isInViewport = true;\n                break;\n            }\n            // Remove the baseClasses for further calculation\n            if (baseClass) {\n                addedClasses.forEach(function (classname) { classList.remove(classname); });\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (placementVals_1_1 && !placementVals_1_1.done && (_a = placementVals_1.return)) _a.call(placementVals_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    if (!isInViewport) {\n        // If nothing match, the first placement is the default one\n        testPlacement = placementVals[0];\n        addClassesToTarget(testPlacement);\n        positionService.positionElements(hostElement, targetElement, testPlacement, appendToBody);\n    }\n    return testPlacement;\n}\n\nfunction NGB_DATEPICKER_PARSER_FORMATTER_FACTORY() {\n    return new NgbDateISOParserFormatter();\n}\n/**\n * An abstract service for parsing and formatting dates for the\n * [`NgbInputDatepicker`](#/components/datepicker/api#NgbInputDatepicker) directive.\n * Converts between the internal `NgbDateStruct` model presentation and a `string` that is displayed in the\n * input element.\n *\n * When user types something in the input this service attempts to parse it into a `NgbDateStruct` object.\n * And vice versa, when users selects a date in the calendar with the mouse, it must be displayed as a `string`\n * in the input.\n *\n * Default implementation uses the ISO 8601 format, but you can provide another implementation via DI\n * to use an alternative string format or a custom parsing logic.\n *\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details.\n */\nvar NgbDateParserFormatter = /** @class */ (function () {\n    function NgbDateParserFormatter() {\n    }\n    NgbDateParserFormatter.…µprov = …µ…µdefineInjectable({ factory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY, token: NgbDateParserFormatter, providedIn: \"root\" });\n    NgbDateParserFormatter = __decorate([\n        Injectable({ providedIn: 'root', useFactory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY })\n    ], NgbDateParserFormatter);\n    return NgbDateParserFormatter;\n}());\nvar NgbDateISOParserFormatter = /** @class */ (function (_super) {\n    __extends(NgbDateISOParserFormatter, _super);\n    function NgbDateISOParserFormatter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbDateISOParserFormatter.prototype.parse = function (value) {\n        if (value != null) {\n            var dateParts = value.trim().split('-');\n            if (dateParts.length === 1 && isNumber(dateParts[0])) {\n                return { year: toInteger(dateParts[0]), month: null, day: null };\n            }\n            else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };\n            }\n            else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };\n            }\n        }\n        return null;\n    };\n    NgbDateISOParserFormatter.prototype.format = function (date) {\n        return date ?\n            date.year + \"-\" + (isNumber(date.month) ? padNumber(date.month) : '') + \"-\" + (isNumber(date.day) ? padNumber(date.day) : '') :\n            '';\n    };\n    NgbDateISOParserFormatter = __decorate([\n        Injectable()\n    ], NgbDateISOParserFormatter);\n    return NgbDateISOParserFormatter;\n}(NgbDateParserFormatter));\n\n/**\n * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the datepicker inputs used in the application.\n *\n * @since 5.2.0\n */\nvar NgbInputDatepickerConfig = /** @class */ (function (_super) {\n    __extends(NgbInputDatepickerConfig, _super);\n    function NgbInputDatepickerConfig() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.autoClose = true;\n        _this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\n        _this.restoreFocus = true;\n        return _this;\n    }\n    NgbInputDatepickerConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbInputDatepickerConfig_Factory() { return new NgbInputDatepickerConfig(); }, token: NgbInputDatepickerConfig, providedIn: \"root\" });\n    NgbInputDatepickerConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbInputDatepickerConfig);\n    return NgbInputDatepickerConfig;\n}(NgbDatepickerConfig));\n\nvar NGB_DATEPICKER_VALUE_ACCESSOR$1 = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbInputDatepicker; }),\n    multi: true\n};\nvar NGB_DATEPICKER_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return NgbInputDatepicker; }),\n    multi: true\n};\n/**\n * A directive that allows to stick a datepicker popup to an input field.\n *\n * Manages interaction with the input field itself, does value formatting and provides forms integration.\n */\nvar NgbInputDatepicker = /** @class */ (function () {\n    function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, _ngZone, _calendar, _dateAdapter, _document, _changeDetector, config) {\n        var _this = this;\n        this._parserFormatter = _parserFormatter;\n        this._elRef = _elRef;\n        this._vcRef = _vcRef;\n        this._renderer = _renderer;\n        this._cfr = _cfr;\n        this._ngZone = _ngZone;\n        this._calendar = _calendar;\n        this._dateAdapter = _dateAdapter;\n        this._document = _document;\n        this._changeDetector = _changeDetector;\n        this._cRef = null;\n        this._disabled = false;\n        this._elWithFocus = null;\n        this._model = null;\n        /**\n         * An event emitted when user selects a date using keyboard or mouse.\n         *\n         * The payload of the event is currently selected `NgbDate`.\n         *\n         * @since 1.1.1\n         */\n        this.dateSelect = new EventEmitter();\n        /**\n         * Event emitted right after the navigation happens and displayed month changes.\n         *\n         * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\n         */\n        this.navigate = new EventEmitter();\n        /**\n         * An event fired after closing datepicker window.\n         *\n         * @since 4.2.0\n         */\n        this.closed = new EventEmitter();\n        this._onChange = function (_) { };\n        this._onTouched = function () { };\n        this._validatorChange = function () { };\n        ['autoClose', 'container', 'positionTarget', 'placement'].forEach(function (input) { return _this[input] = config[input]; });\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () { return _this._updatePopupPosition(); });\n    }\n    Object.defineProperty(NgbInputDatepicker.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        set: function (value) {\n            this._disabled = value === '' || (value && value !== 'false');\n            if (this.isOpen()) {\n                this._cRef.instance.setDisabledState(this._disabled);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbInputDatepicker.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n    NgbInputDatepicker.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };\n    NgbInputDatepicker.prototype.registerOnValidatorChange = function (fn) { this._validatorChange = fn; };\n    NgbInputDatepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };\n    NgbInputDatepicker.prototype.validate = function (c) {\n        var value = c.value;\n        if (value != null) {\n            var ngbDate = this._fromDateStruct(this._dateAdapter.fromModel(value));\n            if (!ngbDate) {\n                return { 'ngbDate': { invalid: value } };\n            }\n            if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\n                return { 'ngbDate': { minDate: { minDate: this.minDate, actual: value } } };\n            }\n            if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\n                return { 'ngbDate': { maxDate: { maxDate: this.maxDate, actual: value } } };\n            }\n        }\n        return null;\n    };\n    NgbInputDatepicker.prototype.writeValue = function (value) {\n        this._model = this._fromDateStruct(this._dateAdapter.fromModel(value));\n        this._writeModelValue(this._model);\n    };\n    NgbInputDatepicker.prototype.manualDateChange = function (value, updateView) {\n        if (updateView === void 0) { updateView = false; }\n        var inputValueChanged = value !== this._inputValue;\n        if (inputValueChanged) {\n            this._inputValue = value;\n            this._model = this._fromDateStruct(this._parserFormatter.parse(value));\n        }\n        if (inputValueChanged || !updateView) {\n            this._onChange(this._model ? this._dateAdapter.toModel(this._model) : (value === '' ? null : value));\n        }\n        if (updateView && this._model) {\n            this._writeModelValue(this._model);\n        }\n    };\n    NgbInputDatepicker.prototype.isOpen = function () { return !!this._cRef; };\n    /**\n     * Opens the datepicker popup.\n     *\n     * If the related form control contains a valid date, the corresponding month will be opened.\n     */\n    NgbInputDatepicker.prototype.open = function () {\n        var _this = this;\n        if (!this.isOpen()) {\n            var cf = this._cfr.resolveComponentFactory(NgbDatepicker);\n            this._cRef = this._vcRef.createComponent(cf);\n            this._applyPopupStyling(this._cRef.location.nativeElement);\n            this._applyDatepickerInputs(this._cRef.instance);\n            this._subscribeForDatepickerOutputs(this._cRef.instance);\n            this._cRef.instance.ngOnInit();\n            this._cRef.instance.writeValue(this._dateAdapter.toModel(this._model));\n            // date selection event handling\n            this._cRef.instance.registerOnChange(function (selectedDate) {\n                _this.writeValue(selectedDate);\n                _this._onChange(selectedDate);\n                _this._onTouched();\n            });\n            this._cRef.changeDetectorRef.detectChanges();\n            this._cRef.instance.setDisabledState(this.disabled);\n            if (this.container === 'body') {\n                this._document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\n            }\n            // focus handling\n            this._elWithFocus = this._document.activeElement;\n            ngbFocusTrap(this._ngZone, this._cRef.location.nativeElement, this.closed, true);\n            this._cRef.instance.focus();\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, function () { return _this.close(); }, this.closed, [], [this._elRef.nativeElement, this._cRef.location.nativeElement]);\n        }\n    };\n    /**\n     * Closes the datepicker popup.\n     */\n    NgbInputDatepicker.prototype.close = function () {\n        if (this.isOpen()) {\n            this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\n            this._cRef = null;\n            this.closed.emit();\n            this._changeDetector.markForCheck();\n            // restore focus\n            var elementToFocus = this._elWithFocus;\n            if (isString(this.restoreFocus)) {\n                elementToFocus = this._document.querySelector(this.restoreFocus);\n            }\n            else if (this.restoreFocus !== undefined) {\n                elementToFocus = this.restoreFocus;\n            }\n            // in IE document.activeElement can contain an object without 'focus()' sometimes\n            if (elementToFocus && elementToFocus['focus']) {\n                elementToFocus.focus();\n            }\n            else {\n                this._document.body.focus();\n            }\n        }\n    };\n    /**\n     * Toggles the datepicker popup.\n     */\n    NgbInputDatepicker.prototype.toggle = function () {\n        if (this.isOpen()) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * Navigates to the provided date.\n     *\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     *\n     * Use the `[startDate]` input as an alternative.\n     */\n    NgbInputDatepicker.prototype.navigateTo = function (date) {\n        if (this.isOpen()) {\n            this._cRef.instance.navigateTo(date);\n        }\n    };\n    NgbInputDatepicker.prototype.onBlur = function () { this._onTouched(); };\n    NgbInputDatepicker.prototype.onFocus = function () { this._elWithFocus = this._elRef.nativeElement; };\n    NgbInputDatepicker.prototype.ngOnChanges = function (changes) {\n        if (changes['minDate'] || changes['maxDate']) {\n            this._validatorChange();\n            if (this.isOpen()) {\n                if (changes['minDate']) {\n                    this._cRef.instance.minDate = this.minDate;\n                }\n                if (changes['maxDate']) {\n                    this._cRef.instance.maxDate = this.maxDate;\n                }\n                this._cRef.instance.ngOnChanges(changes);\n            }\n        }\n    };\n    NgbInputDatepicker.prototype.ngOnDestroy = function () {\n        this.close();\n        this._zoneSubscription.unsubscribe();\n    };\n    NgbInputDatepicker.prototype._applyDatepickerInputs = function (datepickerInstance) {\n        var _this = this;\n        ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\n            'maxDate', 'navigation', 'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\n            .forEach(function (optionName) {\n            if (_this[optionName] !== undefined) {\n                datepickerInstance[optionName] = _this[optionName];\n            }\n        });\n        datepickerInstance.startDate = this.startDate || this._model;\n    };\n    NgbInputDatepicker.prototype._applyPopupStyling = function (nativeElement) {\n        this._renderer.addClass(nativeElement, 'dropdown-menu');\n        this._renderer.addClass(nativeElement, 'show');\n        if (this.container === 'body') {\n            this._renderer.addClass(nativeElement, 'ngb-dp-body');\n        }\n    };\n    NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = function (datepickerInstance) {\n        var _this = this;\n        datepickerInstance.navigate.subscribe(function (navigateEvent) { return _this.navigate.emit(navigateEvent); });\n        datepickerInstance.dateSelect.subscribe(function (date) {\n            _this.dateSelect.emit(date);\n            if (_this.autoClose === true || _this.autoClose === 'inside') {\n                _this.close();\n            }\n        });\n    };\n    NgbInputDatepicker.prototype._writeModelValue = function (model) {\n        var value = this._parserFormatter.format(model);\n        this._inputValue = value;\n        this._renderer.setProperty(this._elRef.nativeElement, 'value', value);\n        if (this.isOpen()) {\n            this._cRef.instance.writeValue(this._dateAdapter.toModel(model));\n            this._onTouched();\n        }\n    };\n    NgbInputDatepicker.prototype._fromDateStruct = function (date) {\n        var ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\n        return this._calendar.isValid(ngbDate) ? ngbDate : null;\n    };\n    NgbInputDatepicker.prototype._updatePopupPosition = function () {\n        if (!this._cRef) {\n            return;\n        }\n        var hostElement;\n        if (isString(this.positionTarget)) {\n            hostElement = this._document.querySelector(this.positionTarget);\n        }\n        else if (this.positionTarget instanceof HTMLElement) {\n            hostElement = this.positionTarget;\n        }\n        else {\n            hostElement = this._elRef.nativeElement;\n        }\n        if (this.positionTarget && !hostElement) {\n            throw new Error('ngbDatepicker could not find element declared in [positionTarget] to position against.');\n        }\n        positionElements(hostElement, this._cRef.location.nativeElement, this.placement, this.container === 'body');\n    };\n    NgbInputDatepicker.ctorParameters = function () { return [\n        { type: NgbDateParserFormatter },\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: Renderer2 },\n        { type: ComponentFactoryResolver },\n        { type: NgZone },\n        { type: NgbCalendar },\n        { type: NgbDateAdapter },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ChangeDetectorRef },\n        { type: NgbInputDatepickerConfig }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"autoClose\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"dayTemplate\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"dayTemplateData\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"displayMonths\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"firstDayOfWeek\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"footerTemplate\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"markDisabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"minDate\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"maxDate\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"navigation\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"outsideDays\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"placement\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"restoreFocus\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"showWeekdays\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"showWeekNumbers\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"startDate\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"container\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"positionTarget\", void 0);\n    __decorate([\n        Output()\n    ], NgbInputDatepicker.prototype, \"dateSelect\", void 0);\n    __decorate([\n        Output()\n    ], NgbInputDatepicker.prototype, \"navigate\", void 0);\n    __decorate([\n        Output()\n    ], NgbInputDatepicker.prototype, \"closed\", void 0);\n    __decorate([\n        Input()\n    ], NgbInputDatepicker.prototype, \"disabled\", null);\n    NgbInputDatepicker = __decorate([\n        Directive({\n            selector: 'input[ngbDatepicker]',\n            exportAs: 'ngbDatepicker',\n            host: {\n                '(input)': 'manualDateChange($event.target.value)',\n                '(change)': 'manualDateChange($event.target.value, true)',\n                '(focus)': 'onFocus()',\n                '(blur)': 'onBlur()',\n                '[disabled]': 'disabled'\n            },\n            providers: [\n                NGB_DATEPICKER_VALUE_ACCESSOR$1, NGB_DATEPICKER_VALIDATOR,\n                { provide: NgbDatepickerConfig, useExisting: NgbInputDatepickerConfig }\n            ],\n        }),\n        __param(8, Inject(DOCUMENT))\n    ], NgbInputDatepicker);\n    return NgbInputDatepicker;\n}());\n\nvar NgbDatepickerDayView = /** @class */ (function () {\n    function NgbDatepickerDayView(i18n) {\n        this.i18n = i18n;\n    }\n    NgbDatepickerDayView.prototype.isMuted = function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };\n    NgbDatepickerDayView.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbDatepickerDayView.prototype, \"currentMonth\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerDayView.prototype, \"date\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerDayView.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerDayView.prototype, \"focused\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerDayView.prototype, \"selected\", void 0);\n    NgbDatepickerDayView = __decorate([\n        Component({\n            selector: '[ngbDatepickerDayView]',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            host: {\n                'class': 'btn-light',\n                '[class.bg-primary]': 'selected',\n                '[class.text-white]': 'selected',\n                '[class.text-muted]': 'isMuted()',\n                '[class.outside]': 'isMuted()',\n                '[class.active]': 'focused'\n            },\n            template: \"{{ i18n.getDayNumerals(date) }}\",\n            styles: [\"[ngbDatepickerDayView]{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem;background:0 0}[ngbDatepickerDayView].outside{opacity:.5}\"]\n        })\n    ], NgbDatepickerDayView);\n    return NgbDatepickerDayView;\n}());\n\nvar NgbDatepickerNavigationSelect = /** @class */ (function () {\n    function NgbDatepickerNavigationSelect(i18n, _renderer) {\n        this.i18n = i18n;\n        this._renderer = _renderer;\n        this.select = new EventEmitter();\n        this._month = -1;\n        this._year = -1;\n    }\n    NgbDatepickerNavigationSelect.prototype.changeMonth = function (month) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); };\n    NgbDatepickerNavigationSelect.prototype.changeYear = function (year) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); };\n    NgbDatepickerNavigationSelect.prototype.ngAfterViewChecked = function () {\n        if (this.date) {\n            if (this.date.month !== this._month) {\n                this._month = this.date.month;\n                this._renderer.setProperty(this.monthSelect.nativeElement, 'value', this._month);\n            }\n            if (this.date.year !== this._year) {\n                this._year = this.date.year;\n                this._renderer.setProperty(this.yearSelect.nativeElement, 'value', this._year);\n            }\n        }\n    };\n    NgbDatepickerNavigationSelect.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n },\n        { type: Renderer2 }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigationSelect.prototype, \"date\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigationSelect.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigationSelect.prototype, \"months\", void 0);\n    __decorate([\n        Input()\n    ], NgbDatepickerNavigationSelect.prototype, \"years\", void 0);\n    __decorate([\n        Output()\n    ], NgbDatepickerNavigationSelect.prototype, \"select\", void 0);\n    __decorate([\n        ViewChild('month', { static: true, read: ElementRef })\n    ], NgbDatepickerNavigationSelect.prototype, \"monthSelect\", void 0);\n    __decorate([\n        ViewChild('year', { static: true, read: ElementRef })\n    ], NgbDatepickerNavigationSelect.prototype, \"yearSelect\", void 0);\n    NgbDatepickerNavigationSelect = __decorate([\n        Component({\n            selector: 'ngb-datepicker-navigation-select',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <select #month\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      i18n-aria-label=\\\"@@ngb.datepicker.select-month\\\" aria-label=\\\"Select month\\\"\\n      i18n-title=\\\"@@ngb.datepicker.select-month\\\" title=\\\"Select month\\\"\\n      (change)=\\\"changeMonth($any($event).target.value)\\\">\\n        <option *ngFor=\\\"let m of months\\\" [attr.aria-label]=\\\"i18n.getMonthFullName(m, date?.year)\\\"\\n                [value]=\\\"m\\\">{{ i18n.getMonthShortName(m, date?.year) }}</option>\\n    </select><select #year\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      i18n-aria-label=\\\"@@ngb.datepicker.select-year\\\" aria-label=\\\"Select year\\\"\\n      i18n-title=\\\"@@ngb.datepicker.select-year\\\" title=\\\"Select year\\\"\\n      (change)=\\\"changeYear($any($event).target.value)\\\">\\n        <option *ngFor=\\\"let y of years\\\" [value]=\\\"y\\\">{{ i18n.getYearNumerals(y) }}</option>\\n    </select>\\n  \",\n            styles: [\"ngb-datepicker-navigation-select>.custom-select{-ms-flex:1 1 auto;flex:1 1 auto;padding:0 .5rem;font-size:.875rem;height:1.85rem}ngb-datepicker-navigation-select>.custom-select:focus{z-index:1}ngb-datepicker-navigation-select>.custom-select::-ms-value{background-color:transparent!important}\"]\n        })\n    ], NgbDatepickerNavigationSelect);\n    return NgbDatepickerNavigationSelect;\n}());\n\nvar NgbCalendarHijri = /** @class */ (function (_super) {\n    __extends(NgbCalendarHijri, _super);\n    function NgbCalendarHijri() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbCalendarHijri.prototype.getDaysPerWeek = function () { return 7; };\n    NgbCalendarHijri.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\n    NgbCalendarHijri.prototype.getWeeksPerMonth = function () { return 6; };\n    NgbCalendarHijri.prototype.getNext = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        date = new NgbDate(date.year, date.month, date.day);\n        switch (period) {\n            case 'y':\n                date = this._setYear(date, date.year + number);\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = this._setMonth(date, date.month + number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return this._setDay(date, date.day + number);\n            default:\n                return date;\n        }\n    };\n    NgbCalendarHijri.prototype.getPrev = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    NgbCalendarHijri.prototype.getWeekday = function (date) {\n        var day = this.toGregorian(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    NgbCalendarHijri.prototype.getWeekNumber = function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        var date = week[thursdayIndex];\n        var jsDate = this.toGregorian(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        var time = jsDate.getTime();\n        var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1)); // Compare with Muharram 1\n        return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;\n    };\n    NgbCalendarHijri.prototype.getToday = function () { return this.fromGregorian(new Date()); };\n    NgbCalendarHijri.prototype.isValid = function (date) {\n        return date != null && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\n            !isNaN(this.toGregorian(date).getTime());\n    };\n    NgbCalendarHijri.prototype._setDay = function (date, day) {\n        day = +day;\n        var mDays = this.getDaysPerMonth(date.month, date.year);\n        if (day <= 0) {\n            while (day <= 0) {\n                date = this._setMonth(date, date.month - 1);\n                mDays = this.getDaysPerMonth(date.month, date.year);\n                day += mDays;\n            }\n        }\n        else if (day > mDays) {\n            while (day > mDays) {\n                day -= mDays;\n                date = this._setMonth(date, date.month + 1);\n                mDays = this.getDaysPerMonth(date.month, date.year);\n            }\n        }\n        date.day = day;\n        return date;\n    };\n    NgbCalendarHijri.prototype._setMonth = function (date, month) {\n        month = +month;\n        date.year = date.year + Math.floor((month - 1) / 12);\n        date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\n        return date;\n    };\n    NgbCalendarHijri.prototype._setYear = function (date, year) {\n        date.year = +year;\n        return date;\n    };\n    NgbCalendarHijri = __decorate([\n        Injectable()\n    ], NgbCalendarHijri);\n    return NgbCalendarHijri;\n}(NgbCalendar));\n\n/**\n * Checks if islamic year is a leap year\n */\nfunction isIslamicLeapYear(hYear) {\n    return (14 + 11 * hYear) % 30 < 11;\n}\n/**\n * Checks if gregorian years is a leap year\n */\nfunction isGregorianLeapYear(gDate) {\n    var year = gDate.getFullYear();\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * Returns the start of Hijri Month.\n * `hMonth` is 0 for Muharram, 1 for Safar, etc.\n * `hYear` is any Hijri hYear.\n */\nfunction getIslamicMonthStart(hYear, hMonth) {\n    return Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30.0);\n}\n/**\n * Returns the start of Hijri year.\n * `year` is any Hijri year.\n */\nfunction getIslamicYearStart(year) {\n    return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\n}\nfunction mod(a, b) {\n    return a - b * Math.floor(a / b);\n}\n/**\n * The civil calendar is one type of Hijri calendars used in islamic countries.\n * Uses a fixed cycle of alternating 29- and 30-day months,\n * with a leap day added to the last month of 11 out of every 30 years.\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\n * All the calculations here are based on the equations from \"Calendrical Calculations\" By Edward M. Reingold, Nachum\n * Dershowitz.\n */\nvar GREGORIAN_EPOCH = 1721425.5;\nvar ISLAMIC_EPOCH = 1948439.5;\nvar NgbCalendarIslamicCivil = /** @class */ (function (_super) {\n    __extends(NgbCalendarIslamicCivil, _super);\n    function NgbCalendarIslamicCivil() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n     * `gDate` is a JS Date to be converted to Hijri.\n     */\n    NgbCalendarIslamicCivil.prototype.fromGregorian = function (gDate) {\n        var gYear = gDate.getFullYear(), gMonth = gDate.getMonth(), gDay = gDate.getDate();\n        var julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) +\n            -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\n            Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(gDate) ? -1 : -2) + gDay);\n        julianDay = Math.floor(julianDay) + 0.5;\n        var days = julianDay - ISLAMIC_EPOCH;\n        var hYear = Math.floor((30 * days + 10646) / 10631.0);\n        var hMonth = Math.ceil((days - 29 - getIslamicYearStart(hYear)) / 29.5);\n        hMonth = Math.min(hMonth, 11);\n        var hDay = Math.ceil(days - getIslamicMonthStart(hYear, hMonth)) + 1;\n        return new NgbDate(hYear, hMonth + 1, hDay);\n    };\n    /**\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\n     * `hDate` is an islamic(civil) date to be converted to Gregorian.\n     */\n    NgbCalendarIslamicCivil.prototype.toGregorian = function (hDate) {\n        var hYear = hDate.year;\n        var hMonth = hDate.month - 1;\n        var hDay = hDate.day;\n        var julianDay = hDay + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;\n        var wjd = Math.floor(julianDay - 0.5) + 0.5, depoch = wjd - GREGORIAN_EPOCH, quadricent = Math.floor(depoch / 146097), dqc = mod(depoch, 146097), cent = Math.floor(dqc / 36524), dcent = mod(dqc, 36524), quad = Math.floor(dcent / 1461), dquad = mod(dcent, 1461), yindex = Math.floor(dquad / 365);\n        var year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n        if (!(cent === 4 || yindex === 4)) {\n            year++;\n        }\n        var gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n            Math.floor((year - 1) / 400);\n        var yearday = wjd - gYearStart;\n        var tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n            Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);\n        var leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;\n        var month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\n        var tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n            Math.floor((year - 1) / 400) +\n            Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) +\n                1);\n        var day = wjd - tjd2 + 1;\n        return new Date(year, month - 1, day);\n    };\n    /**\n     * Returns the number of days in a specific Hijri month.\n     * `month` is 1 for Muharram, 2 for Safar, etc.\n     * `year` is any Hijri year.\n     */\n    NgbCalendarIslamicCivil.prototype.getDaysPerMonth = function (month, year) {\n        year = year + Math.floor(month / 13);\n        month = ((month - 1) % 12) + 1;\n        var length = 29 + month % 2;\n        if (month === 12 && isIslamicLeapYear(year)) {\n            length++;\n        }\n        return length;\n    };\n    NgbCalendarIslamicCivil = __decorate([\n        Injectable()\n    ], NgbCalendarIslamicCivil);\n    return NgbCalendarIslamicCivil;\n}(NgbCalendarHijri));\n\n/**\n * Umalqura calendar is one type of Hijri calendars used in islamic countries.\n * This Calendar is used by Saudi Arabia for administrative purpose.\n * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\n */\nvar GREGORIAN_FIRST_DATE = new Date(1882, 10, 12);\nvar GREGORIAN_LAST_DATE = new Date(2174, 10, 25);\nvar HIJRI_BEGIN = 1300;\nvar HIJRI_END = 1600;\nvar ONE_DAY = 1000 * 60 * 60 * 24;\nvar MONTH_LENGTH = [\n    // 1300-1304\n    '101010101010', '110101010100', '111011001001', '011011010100', '011011101010',\n    // 1305-1309\n    '001101101100', '101010101101', '010101010101', '011010101001', '011110010010',\n    // 1310-1314\n    '101110101001', '010111010100', '101011011010', '010101011100', '110100101101',\n    // 1315-1319\n    '011010010101', '011101001010', '101101010100', '101101101010', '010110101101',\n    // 1320-1324\n    '010010101110', '101001001111', '010100010111', '011010001011', '011010100101',\n    // 1325-1329\n    '101011010101', '001011010110', '100101011011', '010010011101', '101001001101',\n    // 1330-1334\n    '110100100110', '110110010101', '010110101100', '100110110110', '001010111010',\n    // 1335-1339\n    '101001011011', '010100101011', '101010010101', '011011001010', '101011101001',\n    // 1340-1344\n    '001011110100', '100101110110', '001010110110', '100101010110', '101011001010',\n    // 1345-1349\n    '101110100100', '101111010010', '010111011001', '001011011100', '100101101101',\n    // 1350-1354\n    '010101001101', '101010100101', '101101010010', '101110100101', '010110110100',\n    // 1355-1359\n    '100110110110', '010101010111', '001010010111', '010101001011', '011010100011',\n    // 1360-1364\n    '011101010010', '101101100101', '010101101010', '101010101011', '010100101011',\n    // 1365-1369\n    '110010010101', '110101001010', '110110100101', '010111001010', '101011010110',\n    // 1370-1374\n    '100101010111', '010010101011', '100101001011', '101010100101', '101101010010',\n    // 1375-1379\n    '101101101010', '010101110101', '001001110110', '100010110111', '010001011011',\n    // 1380-1384\n    '010101010101', '010110101001', '010110110100', '100111011010', '010011011101',\n    // 1385-1389\n    '001001101110', '100100110110', '101010101010', '110101010100', '110110110010',\n    // 1390-1394\n    '010111010101', '001011011010', '100101011011', '010010101011', '101001010101',\n    // 1395-1399\n    '101101001001', '101101100100', '101101110001', '010110110100', '101010110101',\n    // 1400-1404\n    '101001010101', '110100100101', '111010010010', '111011001001', '011011010100',\n    // 1405-1409\n    '101011101001', '100101101011', '010010101011', '101010010011', '110101001001',\n    // 1410-1414\n    '110110100100', '110110110010', '101010111001', '010010111010', '101001011011',\n    // 1415-1419\n    '010100101011', '101010010101', '101100101010', '101101010101', '010101011100',\n    // 1420-1424\n    '010010111101', '001000111101', '100100011101', '101010010101', '101101001010',\n    // 1425-1429\n    '101101011010', '010101101101', '001010110110', '100100111011', '010010011011',\n    // 1430-1434\n    '011001010101', '011010101001', '011101010100', '101101101010', '010101101100',\n    // 1435-1439\n    '101010101101', '010101010101', '101100101001', '101110010010', '101110101001',\n    // 1440-1444\n    '010111010100', '101011011010', '010101011010', '101010101011', '010110010101',\n    // 1445-1449\n    '011101001001', '011101100100', '101110101010', '010110110101', '001010110110',\n    // 1450-1454\n    '101001010110', '111001001101', '101100100101', '101101010010', '101101101010',\n    // 1455-1459\n    '010110101101', '001010101110', '100100101111', '010010010111', '011001001011',\n    // 1460-1464\n    '011010100101', '011010101100', '101011010110', '010101011101', '010010011101',\n    // 1465-1469\n    '101001001101', '110100010110', '110110010101', '010110101010', '010110110101',\n    // 1470-1474\n    '001011011010', '100101011011', '010010101101', '010110010101', '011011001010',\n    // 1475-1479\n    '011011100100', '101011101010', '010011110101', '001010110110', '100101010110',\n    // 1480-1484\n    '101010101010', '101101010100', '101111010010', '010111011001', '001011101010',\n    // 1485-1489\n    '100101101101', '010010101101', '101010010101', '101101001010', '101110100101',\n    // 1490-1494\n    '010110110010', '100110110101', '010011010110', '101010010111', '010101000111',\n    // 1495-1499\n    '011010010011', '011101001001', '101101010101', '010101101010', '101001101011',\n    // 1500-1504\n    '010100101011', '101010001011', '110101000110', '110110100011', '010111001010',\n    // 1505-1509\n    '101011010110', '010011011011', '001001101011', '100101001011', '101010100101',\n    // 1510-1514\n    '101101010010', '101101101001', '010101110101', '000101110110', '100010110111',\n    // 1515-1519\n    '001001011011', '010100101011', '010101100101', '010110110100', '100111011010',\n    // 1520-1524\n    '010011101101', '000101101101', '100010110110', '101010100110', '110101010010',\n    // 1525-1529\n    '110110101001', '010111010100', '101011011010', '100101011011', '010010101011',\n    // 1530-1534\n    '011001010011', '011100101001', '011101100010', '101110101001', '010110110010',\n    // 1535-1539\n    '101010110101', '010101010101', '101100100101', '110110010010', '111011001001',\n    // 1540-1544\n    '011011010010', '101011101001', '010101101011', '010010101011', '101001010101',\n    // 1545-1549\n    '110100101001', '110101010100', '110110101010', '100110110101', '010010111010',\n    // 1550-1554\n    '101000111011', '010010011011', '101001001101', '101010101010', '101011010101',\n    // 1555-1559\n    '001011011010', '100101011101', '010001011110', '101000101110', '110010011010',\n    // 1560-1564\n    '110101010101', '011010110010', '011010111001', '010010111010', '101001011101',\n    // 1565-1569\n    '010100101101', '101010010101', '101101010010', '101110101000', '101110110100',\n    // 1570-1574\n    '010110111001', '001011011010', '100101011010', '101101001010', '110110100100',\n    // 1575-1579\n    '111011010001', '011011101000', '101101101010', '010101101101', '010100110101',\n    // 1580-1584\n    '011010010101', '110101001010', '110110101000', '110111010100', '011011011010',\n    // 1585-1589\n    '010101011011', '001010011101', '011000101011', '101100010101', '101101001010',\n    // 1590-1594\n    '101110010101', '010110101010', '101010101110', '100100101110', '110010001111',\n    // 1595-1599\n    '010100100111', '011010010101', '011010101010', '101011010110', '010101011101',\n    // 1600\n    '001010011101'\n];\nfunction getDaysDiff(date1, date2) {\n    // Ignores the time part in date1 and date2:\n    var time1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());\n    var time2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());\n    var diff = Math.abs(time1 - time2);\n    return Math.round(diff / ONE_DAY);\n}\nvar NgbCalendarIslamicUmalqura = /** @class */ (function (_super) {\n    __extends(NgbCalendarIslamicUmalqura, _super);\n    function NgbCalendarIslamicUmalqura() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n    * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\n    * `gdate` is s JS Date to be converted to Hijri.\n    */\n    NgbCalendarIslamicUmalqura.prototype.fromGregorian = function (gDate) {\n        var hDay = 1, hMonth = 0, hYear = 1300;\n        var daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);\n        if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {\n            var year = 1300;\n            for (var i = 0; i < MONTH_LENGTH.length; i++, year++) {\n                for (var j = 0; j < 12; j++) {\n                    var numOfDays = +MONTH_LENGTH[i][j] + 29;\n                    if (daysDiff <= numOfDays) {\n                        hDay = daysDiff + 1;\n                        if (hDay > numOfDays) {\n                            hDay = 1;\n                            j++;\n                        }\n                        if (j > 11) {\n                            j = 0;\n                            year++;\n                        }\n                        hMonth = j;\n                        hYear = year;\n                        return new NgbDate(hYear, hMonth + 1, hDay);\n                    }\n                    daysDiff = daysDiff - numOfDays;\n                }\n            }\n            return null;\n        }\n        else {\n            return _super.prototype.fromGregorian.call(this, gDate);\n        }\n    };\n    /**\n    * Converts the current Hijri date to Gregorian.\n    */\n    NgbCalendarIslamicUmalqura.prototype.toGregorian = function (hDate) {\n        var hYear = hDate.year;\n        var hMonth = hDate.month - 1;\n        var hDay = hDate.day;\n        var gDate = new Date(GREGORIAN_FIRST_DATE);\n        var dayDiff = hDay - 1;\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\n            for (var y = 0; y < hYear - HIJRI_BEGIN; y++) {\n                for (var m = 0; m < 12; m++) {\n                    dayDiff += +MONTH_LENGTH[y][m] + 29;\n                }\n            }\n            for (var m = 0; m < hMonth; m++) {\n                dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][m] + 29;\n            }\n            gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);\n        }\n        else {\n            gDate = _super.prototype.toGregorian.call(this, hDate);\n        }\n        return gDate;\n    };\n    /**\n    * Returns the number of days in a specific Hijri hMonth.\n    * `hMonth` is 1 for Muharram, 2 for Safar, etc.\n    * `hYear` is any Hijri hYear.\n    */\n    NgbCalendarIslamicUmalqura.prototype.getDaysPerMonth = function (hMonth, hYear) {\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\n            var pos = hYear - HIJRI_BEGIN;\n            return +MONTH_LENGTH[pos][hMonth - 1] + 29;\n        }\n        return _super.prototype.getDaysPerMonth.call(this, hMonth, hYear);\n    };\n    NgbCalendarIslamicUmalqura = __decorate([\n        Injectable()\n    ], NgbCalendarIslamicUmalqura);\n    return NgbCalendarIslamicUmalqura;\n}(NgbCalendarIslamicCivil));\n\n/**\n * Returns the equivalent JS date value for a give input Jalali date.\n * `jalaliDate` is an Jalali date to be converted to Gregorian.\n */\nfunction toGregorian(jalaliDate) {\n    var jdn = jalaliToJulian(jalaliDate.year, jalaliDate.month, jalaliDate.day);\n    var date = julianToGregorian(jdn);\n    date.setHours(6, 30, 3, 200);\n    return date;\n}\n/**\n * Returns the equivalent jalali date value for a give input Gregorian date.\n * `gdate` is a JS Date to be converted to jalali.\n * utc to local\n */\nfunction fromGregorian(gdate) {\n    var g2d = gregorianToJulian(gdate.getFullYear(), gdate.getMonth() + 1, gdate.getDate());\n    return julianToJalali(g2d);\n}\nfunction setJalaliYear(date, yearValue) {\n    date.year = +yearValue;\n    return date;\n}\nfunction setJalaliMonth(date, month) {\n    month = +month;\n    date.year = date.year + Math.floor((month - 1) / 12);\n    date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\n    return date;\n}\nfunction setJalaliDay(date, day) {\n    var mDays = getDaysPerMonth(date.month, date.year);\n    if (day <= 0) {\n        while (day <= 0) {\n            date = setJalaliMonth(date, date.month - 1);\n            mDays = getDaysPerMonth(date.month, date.year);\n            day += mDays;\n        }\n    }\n    else if (day > mDays) {\n        while (day > mDays) {\n            day -= mDays;\n            date = setJalaliMonth(date, date.month + 1);\n            mDays = getDaysPerMonth(date.month, date.year);\n        }\n    }\n    date.day = day;\n    return date;\n}\nfunction mod$1(a, b) {\n    return a - b * Math.floor(a / b);\n}\nfunction div(a, b) {\n    return Math.trunc(a / b);\n}\n/*\n This function determines if the Jalali (Persian) year is\n leap (366-day long) or is the common year (365 days), and\n finds the day in March (Gregorian calendar) of the first\n day of the Jalali year (jalaliYear).\n @param jalaliYear Jalali calendar year (-61 to 3177)\n @return\n leap: number of years since the last leap year (0 to 4)\n gYear: Gregorian year of the beginning of Jalali year\n march: the March day of Farvardin the 1st (1st day of jalaliYear)\n @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n @see: http://www.fourmilab.ch/documents/calendar/\n */\nfunction jalCal(jalaliYear) {\n    // Jalali years starting the 33-year rule.\n    var breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];\n    var breaksLength = breaks.length;\n    var gYear = jalaliYear + 621;\n    var leapJ = -14;\n    var jp = breaks[0];\n    if (jalaliYear < jp || jalaliYear >= breaks[breaksLength - 1]) {\n        throw new Error('Invalid Jalali year ' + jalaliYear);\n    }\n    // Find the limiting years for the Jalali year jalaliYear.\n    var jump;\n    for (var i = 1; i < breaksLength; i += 1) {\n        var jm = breaks[i];\n        jump = jm - jp;\n        if (jalaliYear < jm) {\n            break;\n        }\n        leapJ = leapJ + div(jump, 33) * 8 + div(mod$1(jump, 33), 4);\n        jp = jm;\n    }\n    var n = jalaliYear - jp;\n    // Find the number of leap years from AD 621 to the beginning\n    // of the current Jalali year in the Persian calendar.\n    leapJ = leapJ + div(n, 33) * 8 + div(mod$1(n, 33) + 3, 4);\n    if (mod$1(jump, 33) === 4 && jump - n === 4) {\n        leapJ += 1;\n    }\n    // And the same in the Gregorian calendar (until the year gYear).\n    var leapG = div(gYear, 4) - div((div(gYear, 100) + 1) * 3, 4) - 150;\n    // Determine the Gregorian date of Farvardin the 1st.\n    var march = 20 + leapJ - leapG;\n    // Find how many years have passed since the last leap year.\n    if (jump - n < 6) {\n        n = n - jump + div(jump + 4, 33) * 33;\n    }\n    var leap = mod$1(mod$1(n + 1, 33) - 1, 4);\n    if (leap === -1) {\n        leap = 4;\n    }\n    return { leap: leap, gy: gYear, march: march };\n}\n/*\n Calculates Gregorian and Julian calendar dates from the Julian Day number\n (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n calendars) to some millions years ahead of the present.\n @param jdn Julian Day number\n @return\n gYear: Calendar year (years BC numbered 0, -1, -2, ...)\n gMonth: Calendar month (1 to 12)\n gDay: Calendar day of the month M (1 to 28/29/30/31)\n */\nfunction julianToGregorian(julianDayNumber) {\n    var j = 4 * julianDayNumber + 139361631;\n    j = j + div(div(4 * julianDayNumber + 183187720, 146097) * 3, 4) * 4 - 3908;\n    var i = div(mod$1(j, 1461), 4) * 5 + 308;\n    var gDay = div(mod$1(i, 153), 5) + 1;\n    var gMonth = mod$1(div(i, 153), 12) + 1;\n    var gYear = div(j, 1461) - 100100 + div(8 - gMonth, 6);\n    return new Date(gYear, gMonth - 1, gDay);\n}\n/*\n Converts a date of the Jalali calendar to the Julian Day number.\n @param jy Jalali year (1 to 3100)\n @param jm Jalali month (1 to 12)\n @param jd Jalali day (1 to 29/31)\n @return Julian Day number\n */\nfunction gregorianToJulian(gy, gm, gd) {\n    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod$1(gm + 9, 12) + 2, 5) + gd - 34840408;\n    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\n    return d;\n}\n/*\n Converts the Julian Day number to a date in the Jalali calendar.\n @param julianDayNumber Julian Day number\n @return\n jalaliYear: Jalali year (1 to 3100)\n jalaliMonth: Jalali month (1 to 12)\n jalaliDay: Jalali day (1 to 29/31)\n */\nfunction julianToJalali(julianDayNumber) {\n    var gy = julianToGregorian(julianDayNumber).getFullYear() // Calculate Gregorian year (gy).\n    , jalaliYear = gy - 621, r = jalCal(jalaliYear), gregorianDay = gregorianToJulian(gy, 3, r.march), jalaliDay, jalaliMonth, numberOfDays;\n    // Find number of days that passed since 1 Farvardin.\n    numberOfDays = julianDayNumber - gregorianDay;\n    if (numberOfDays >= 0) {\n        if (numberOfDays <= 185) {\n            // The first 6 months.\n            jalaliMonth = 1 + div(numberOfDays, 31);\n            jalaliDay = mod$1(numberOfDays, 31) + 1;\n            return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\n        }\n        else {\n            // The remaining months.\n            numberOfDays -= 186;\n        }\n    }\n    else {\n        // Previous Jalali year.\n        jalaliYear -= 1;\n        numberOfDays += 179;\n        if (r.leap === 1) {\n            numberOfDays += 1;\n        }\n    }\n    jalaliMonth = 7 + div(numberOfDays, 30);\n    jalaliDay = mod$1(numberOfDays, 30) + 1;\n    return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\n}\n/*\n Converts a date of the Jalali calendar to the Julian Day number.\n @param jYear Jalali year (1 to 3100)\n @param jMonth Jalali month (1 to 12)\n @param jDay Jalali day (1 to 29/31)\n @return Julian Day number\n */\nfunction jalaliToJulian(jYear, jMonth, jDay) {\n    var r = jalCal(jYear);\n    return gregorianToJulian(r.gy, 3, r.march) + (jMonth - 1) * 31 - div(jMonth, 7) * (jMonth - 7) + jDay - 1;\n}\n/**\n * Returns the number of days in a specific jalali month.\n */\nfunction getDaysPerMonth(month, year) {\n    if (month <= 6) {\n        return 31;\n    }\n    if (month <= 11) {\n        return 30;\n    }\n    if (jalCal(year).leap === 0) {\n        return 30;\n    }\n    return 29;\n}\n\nvar NgbCalendarPersian = /** @class */ (function (_super) {\n    __extends(NgbCalendarPersian, _super);\n    function NgbCalendarPersian() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbCalendarPersian.prototype.getDaysPerWeek = function () { return 7; };\n    NgbCalendarPersian.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\n    NgbCalendarPersian.prototype.getWeeksPerMonth = function () { return 6; };\n    NgbCalendarPersian.prototype.getNext = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        date = new NgbDate(date.year, date.month, date.day);\n        switch (period) {\n            case 'y':\n                date = setJalaliYear(date, date.year + number);\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = setJalaliMonth(date, date.month + number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return setJalaliDay(date, date.day + number);\n            default:\n                return date;\n        }\n    };\n    NgbCalendarPersian.prototype.getPrev = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    NgbCalendarPersian.prototype.getWeekday = function (date) {\n        var day = toGregorian(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    NgbCalendarPersian.prototype.getWeekNumber = function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        var date = week[thursdayIndex];\n        var jsDate = toGregorian(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        var time = jsDate.getTime();\n        var startDate = toGregorian(new NgbDate(date.year, 1, 1));\n        return Math.floor(Math.round((time - startDate.getTime()) / 86400000) / 7) + 1;\n    };\n    NgbCalendarPersian.prototype.getToday = function () { return fromGregorian(new Date()); };\n    NgbCalendarPersian.prototype.isValid = function (date) {\n        return date != null && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) &&\n            !isNaN(toGregorian(date).getTime());\n    };\n    NgbCalendarPersian = __decorate([\n        Injectable()\n    ], NgbCalendarPersian);\n    return NgbCalendarPersian;\n}(NgbCalendar));\n\nvar PARTS_PER_HOUR = 1080;\nvar PARTS_PER_DAY = 24 * PARTS_PER_HOUR;\nvar PARTS_FRACTIONAL_MONTH = 12 * PARTS_PER_HOUR + 793;\nvar PARTS_PER_MONTH = 29 * PARTS_PER_DAY + PARTS_FRACTIONAL_MONTH;\nvar BAHARAD = 11 * PARTS_PER_HOUR + 204;\nvar HEBREW_DAY_ON_JAN_1_1970 = 2092591;\nvar GREGORIAN_EPOCH$1 = 1721425.5;\nfunction isGregorianLeapYear$1(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nfunction numberOfFirstDayInYear(year) {\n    var monthsBeforeYear = Math.floor((235 * year - 234) / 19);\n    var fractionalMonthsBeforeYear = monthsBeforeYear * PARTS_FRACTIONAL_MONTH + BAHARAD;\n    var dayNumber = monthsBeforeYear * 29 + Math.floor(fractionalMonthsBeforeYear / PARTS_PER_DAY);\n    var timeOfDay = fractionalMonthsBeforeYear % PARTS_PER_DAY;\n    var dayOfWeek = dayNumber % 7; // 0 == Monday\n    if (dayOfWeek === 2 || dayOfWeek === 4 || dayOfWeek === 6) {\n        dayNumber++;\n        dayOfWeek = dayNumber % 7;\n    }\n    if (dayOfWeek === 1 && timeOfDay > 15 * PARTS_PER_HOUR + 204 && !isHebrewLeapYear(year)) {\n        dayNumber += 2;\n    }\n    else if (dayOfWeek === 0 && timeOfDay > 21 * PARTS_PER_HOUR + 589 && isHebrewLeapYear(year - 1)) {\n        dayNumber++;\n    }\n    return dayNumber;\n}\nfunction getDaysInGregorianMonth(month, year) {\n    var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (isGregorianLeapYear$1(year)) {\n        days[1]++;\n    }\n    return days[month - 1];\n}\nfunction getHebrewMonths(year) {\n    return isHebrewLeapYear(year) ? 13 : 12;\n}\n/**\n * Returns the number of days in a specific Hebrew year.\n * `year` is any Hebrew year.\n */\nfunction getDaysInHebrewYear(year) {\n    return numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\n}\nfunction isHebrewLeapYear(year) {\n    if (year != null) {\n        var b = (year * 12 + 17) % 19;\n        return b >= ((b < 0) ? -7 : 12);\n    }\n    return false;\n}\n/**\n * Returns the number of days in a specific Hebrew month.\n * `month` is 1 for Nisan, 2 for Iyar etc. Note: Hebrew leap year contains 13 months.\n * `year` is any Hebrew year.\n */\nfunction getDaysInHebrewMonth(month, year) {\n    var yearLength = numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\n    var yearType = (yearLength <= 380 ? yearLength : (yearLength - 30)) - 353;\n    var leapYear = isHebrewLeapYear(year);\n    var daysInMonth = leapYear ? [30, 29, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29] :\n        [30, 29, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29];\n    if (yearType > 0) {\n        daysInMonth[2]++; // Kislev gets an extra day in normal or complete years.\n    }\n    if (yearType > 1) {\n        daysInMonth[1]++; // Heshvan gets an extra day in complete years only.\n    }\n    return daysInMonth[month - 1];\n}\nfunction getDayNumberInHebrewYear(date) {\n    var numberOfDay = 0;\n    for (var i = 1; i < date.month; i++) {\n        numberOfDay += getDaysInHebrewMonth(i, date.year);\n    }\n    return numberOfDay + date.day;\n}\nfunction setHebrewMonth(date, val) {\n    var after = val >= 0;\n    if (!after) {\n        val = -val;\n    }\n    while (val > 0) {\n        if (after) {\n            if (val > getHebrewMonths(date.year) - date.month) {\n                val -= getHebrewMonths(date.year) - date.month + 1;\n                date.year++;\n                date.month = 1;\n            }\n            else {\n                date.month += val;\n                val = 0;\n            }\n        }\n        else {\n            if (val >= date.month) {\n                date.year--;\n                val -= date.month;\n                date.month = getHebrewMonths(date.year);\n            }\n            else {\n                date.month -= val;\n                val = 0;\n            }\n        }\n    }\n    return date;\n}\nfunction setHebrewDay(date, val) {\n    var after = val >= 0;\n    if (!after) {\n        val = -val;\n    }\n    while (val > 0) {\n        if (after) {\n            if (val > getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date)) {\n                val -= getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date) + 1;\n                date.year++;\n                date.month = 1;\n                date.day = 1;\n            }\n            else if (val > getDaysInHebrewMonth(date.month, date.year) - date.day) {\n                val -= getDaysInHebrewMonth(date.month, date.year) - date.day + 1;\n                date.month++;\n                date.day = 1;\n            }\n            else {\n                date.day += val;\n                val = 0;\n            }\n        }\n        else {\n            if (val >= date.day) {\n                val -= date.day;\n                date.month--;\n                if (date.month === 0) {\n                    date.year--;\n                    date.month = getHebrewMonths(date.year);\n                }\n                date.day = getDaysInHebrewMonth(date.month, date.year);\n            }\n            else {\n                date.day -= val;\n                val = 0;\n            }\n        }\n    }\n    return date;\n}\n/**\n * Returns the equivalent Hebrew date value for a give input Gregorian date.\n * `gdate` is a JS Date to be converted to Hebrew date.\n */\nfunction fromGregorian$1(gdate) {\n    var date = new Date(gdate);\n    var gYear = date.getFullYear(), gMonth = date.getMonth(), gDay = date.getDate();\n    var julianDay = GREGORIAN_EPOCH$1 - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) -\n        Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\n        Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear$1(gYear) ? -1 : -2) + gDay);\n    julianDay = Math.floor(julianDay + 0.5);\n    var daysSinceHebEpoch = julianDay - 347997;\n    var monthsSinceHebEpoch = Math.floor(daysSinceHebEpoch * PARTS_PER_DAY / PARTS_PER_MONTH);\n    var hYear = Math.floor((monthsSinceHebEpoch * 19 + 234) / 235) + 1;\n    var firstDayOfThisYear = numberOfFirstDayInYear(hYear);\n    var dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\n    while (dayOfYear < 1) {\n        hYear--;\n        firstDayOfThisYear = numberOfFirstDayInYear(hYear);\n        dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\n    }\n    var hMonth = 1;\n    var hDay = dayOfYear;\n    while (hDay > getDaysInHebrewMonth(hMonth, hYear)) {\n        hDay -= getDaysInHebrewMonth(hMonth, hYear);\n        hMonth++;\n    }\n    return new NgbDate(hYear, hMonth, hDay);\n}\n/**\n * Returns the equivalent JS date value for a given Hebrew date.\n * `hebrewDate` is an Hebrew date to be converted to Gregorian.\n */\nfunction toGregorian$1(hebrewDate) {\n    var hYear = hebrewDate.year;\n    var hMonth = hebrewDate.month;\n    var hDay = hebrewDate.day;\n    var days = numberOfFirstDayInYear(hYear);\n    for (var i = 1; i < hMonth; i++) {\n        days += getDaysInHebrewMonth(i, hYear);\n    }\n    days += hDay;\n    var diffDays = days - HEBREW_DAY_ON_JAN_1_1970;\n    var after = diffDays >= 0;\n    if (!after) {\n        diffDays = -diffDays;\n    }\n    var gYear = 1970;\n    var gMonth = 1;\n    var gDay = 1;\n    while (diffDays > 0) {\n        if (after) {\n            if (diffDays >= (isGregorianLeapYear$1(gYear) ? 366 : 365)) {\n                diffDays -= isGregorianLeapYear$1(gYear) ? 366 : 365;\n                gYear++;\n            }\n            else if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\n                diffDays -= getDaysInGregorianMonth(gMonth, gYear);\n                gMonth++;\n            }\n            else {\n                gDay += diffDays;\n                diffDays = 0;\n            }\n        }\n        else {\n            if (diffDays >= (isGregorianLeapYear$1(gYear - 1) ? 366 : 365)) {\n                diffDays -= isGregorianLeapYear$1(gYear - 1) ? 366 : 365;\n                gYear--;\n            }\n            else {\n                if (gMonth > 1) {\n                    gMonth--;\n                }\n                else {\n                    gMonth = 12;\n                    gYear--;\n                }\n                if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\n                    diffDays -= getDaysInGregorianMonth(gMonth, gYear);\n                }\n                else {\n                    gDay = getDaysInGregorianMonth(gMonth, gYear) - diffDays + 1;\n                    diffDays = 0;\n                }\n            }\n        }\n    }\n    return new Date(gYear, gMonth - 1, gDay);\n}\nfunction hebrewNumerals(numerals) {\n    if (!numerals) {\n        return '';\n    }\n    var hArray0_9 = ['', '\\u05d0', '\\u05d1', '\\u05d2', '\\u05d3', '\\u05d4', '\\u05d5', '\\u05d6', '\\u05d7', '\\u05d8'];\n    var hArray10_19 = [\n        '\\u05d9', '\\u05d9\\u05d0', '\\u05d9\\u05d1', '\\u05d9\\u05d2', '\\u05d9\\u05d3', '\\u05d8\\u05d5', '\\u05d8\\u05d6',\n        '\\u05d9\\u05d6', '\\u05d9\\u05d7', '\\u05d9\\u05d8'\n    ];\n    var hArray20_90 = ['', '', '\\u05db', '\\u05dc', '\\u05de', '\\u05e0', '\\u05e1', '\\u05e2', '\\u05e4', '\\u05e6'];\n    var hArray100_900 = [\n        '', '\\u05e7', '\\u05e8', '\\u05e9', '\\u05ea', '\\u05ea\\u05e7', '\\u05ea\\u05e8', '\\u05ea\\u05e9', '\\u05ea\\u05ea',\n        '\\u05ea\\u05ea\\u05e7'\n    ];\n    var hArray1000_9000 = [\n        '', '\\u05d0', '\\u05d1', '\\u05d1\\u05d0', '\\u05d1\\u05d1', '\\u05d4', '\\u05d4\\u05d0', '\\u05d4\\u05d1',\n        '\\u05d4\\u05d1\\u05d0', '\\u05d4\\u05d1\\u05d1'\n    ];\n    var geresh = '\\u05f3', gershaim = '\\u05f4';\n    var mem = 0;\n    var result = [];\n    var step = 0;\n    while (numerals > 0) {\n        var m = numerals % 10;\n        if (step === 0) {\n            mem = m;\n        }\n        else if (step === 1) {\n            if (m !== 1) {\n                result.unshift(hArray20_90[m], hArray0_9[mem]);\n            }\n            else {\n                result.unshift(hArray10_19[mem]);\n            }\n        }\n        else if (step === 2) {\n            result.unshift(hArray100_900[m]);\n        }\n        else {\n            if (m !== 5) {\n                result.unshift(hArray1000_9000[m], geresh, ' ');\n            }\n            break;\n        }\n        numerals = Math.floor(numerals / 10);\n        if (step === 0 && numerals === 0) {\n            result.unshift(hArray0_9[m]);\n        }\n        step++;\n    }\n    result = result.join('').split('');\n    if (result.length === 1) {\n        result.push(geresh);\n    }\n    else if (result.length > 1) {\n        result.splice(result.length - 1, 0, gershaim);\n    }\n    return result.join('');\n}\n\n/**\n * @since 3.2.0\n */\nvar NgbCalendarHebrew = /** @class */ (function (_super) {\n    __extends(NgbCalendarHebrew, _super);\n    function NgbCalendarHebrew() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbCalendarHebrew.prototype.getDaysPerWeek = function () { return 7; };\n    NgbCalendarHebrew.prototype.getMonths = function (year) {\n        if (year && isHebrewLeapYear(year)) {\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n        }\n        else {\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n        }\n    };\n    NgbCalendarHebrew.prototype.getWeeksPerMonth = function () { return 6; };\n    NgbCalendarHebrew.prototype.isValid = function (date) {\n        if (date != null) {\n            var b = isNumber(date.year) && isNumber(date.month) && isNumber(date.day);\n            b = b && date.month > 0 && date.month <= (isHebrewLeapYear(date.year) ? 13 : 12);\n            b = b && date.day > 0 && date.day <= getDaysInHebrewMonth(date.month, date.year);\n            return b && !isNaN(toGregorian$1(date).getTime());\n        }\n        return false;\n    };\n    NgbCalendarHebrew.prototype.getNext = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        date = new NgbDate(date.year, date.month, date.day);\n        switch (period) {\n            case 'y':\n                date.year += number;\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = setHebrewMonth(date, number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return setHebrewDay(date, number);\n            default:\n                return date;\n        }\n    };\n    NgbCalendarHebrew.prototype.getPrev = function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    NgbCalendarHebrew.prototype.getWeekday = function (date) {\n        var day = toGregorian$1(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    NgbCalendarHebrew.prototype.getWeekNumber = function (week, firstDayOfWeek) {\n        var date = week[week.length - 1];\n        return Math.ceil(getDayNumberInHebrewYear(date) / 7);\n    };\n    NgbCalendarHebrew.prototype.getToday = function () { return fromGregorian$1(new Date()); };\n    /**\n     * @since 3.4.0\n     */\n    NgbCalendarHebrew.prototype.toGregorian = function (date) { return fromJSDate(toGregorian$1(date)); };\n    /**\n     * @since 3.4.0\n     */\n    NgbCalendarHebrew.prototype.fromGregorian = function (date) { return fromGregorian$1(toJSDate(date)); };\n    NgbCalendarHebrew = __decorate([\n        Injectable()\n    ], NgbCalendarHebrew);\n    return NgbCalendarHebrew;\n}(NgbCalendar));\n\nvar WEEKDAYS = ['◊©◊†◊ô', '◊©◊ú◊ô◊©◊ô', '◊®◊ë◊ô◊¢◊ô', '◊ó◊û◊ô◊©◊ô', '◊©◊ô◊©◊ô', '◊©◊ë◊™', '◊®◊ê◊©◊ï◊ü'];\nvar MONTHS = ['◊™◊©◊®◊ô', '◊ó◊©◊ï◊ü', '◊õ◊°◊ú◊ï', '◊ò◊ë◊™', '◊©◊ë◊ò', '◊ê◊ì◊®', '◊†◊ô◊°◊ü', '◊ê◊ô◊ô◊®', '◊°◊ô◊ï◊ü', '◊™◊û◊ï◊ñ', '◊ê◊ë', '◊ê◊ú◊ï◊ú'];\nvar MONTHS_LEAP = ['◊™◊©◊®◊ô', '◊ó◊©◊ï◊ü', '◊õ◊°◊ú◊ï', '◊ò◊ë◊™', '◊©◊ë◊ò', '◊ê◊ì◊® ◊ê◊≥', '◊ê◊ì◊® ◊ë◊≥', '◊†◊ô◊°◊ü', '◊ê◊ô◊ô◊®', '◊°◊ô◊ï◊ü', '◊™◊û◊ï◊ñ', '◊ê◊ë', '◊ê◊ú◊ï◊ú'];\n/**\n * @since 3.2.0\n */\nvar NgbDatepickerI18nHebrew = /** @class */ (function (_super) {\n    __extends(NgbDatepickerI18nHebrew, _super);\n    function NgbDatepickerI18nHebrew() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbDatepickerI18nHebrew.prototype.getMonthShortName = function (month, year) { return this.getMonthFullName(month, year); };\n    NgbDatepickerI18nHebrew.prototype.getMonthFullName = function (month, year) {\n        return isHebrewLeapYear(year) ? MONTHS_LEAP[month - 1] || '' : MONTHS[month - 1] || '';\n    };\n    NgbDatepickerI18nHebrew.prototype.getWeekdayShortName = function (weekday) { return WEEKDAYS[weekday - 1] || ''; };\n    NgbDatepickerI18nHebrew.prototype.getDayAriaLabel = function (date) {\n        return hebrewNumerals(date.day) + \" \" + this.getMonthFullName(date.month, date.year) + \" \" + hebrewNumerals(date.year);\n    };\n    NgbDatepickerI18nHebrew.prototype.getDayNumerals = function (date) { return hebrewNumerals(date.day); };\n    NgbDatepickerI18nHebrew.prototype.getWeekNumerals = function (weekNumber) { return hebrewNumerals(weekNumber); };\n    NgbDatepickerI18nHebrew.prototype.getYearNumerals = function (year) { return hebrewNumerals(year); };\n    NgbDatepickerI18nHebrew = __decorate([\n        Injectable()\n    ], NgbDatepickerI18nHebrew);\n    return NgbDatepickerI18nHebrew;\n}(NgbDatepickerI18n));\n\n/**\n * [`NgbDateAdapter`](#/components/datepicker/api#NgbDateAdapter) implementation that uses\n * native javascript dates as a user date model.\n */\nvar NgbDateNativeAdapter = /** @class */ (function (_super) {\n    __extends(NgbDateNativeAdapter, _super);\n    function NgbDateNativeAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts a native `Date` to a `NgbDateStruct`.\n     */\n    NgbDateNativeAdapter.prototype.fromModel = function (date) {\n        return (date instanceof Date && !isNaN(date.getTime())) ? this._fromNativeDate(date) : null;\n    };\n    /**\n     * Converts a `NgbDateStruct` to a native `Date`.\n     */\n    NgbDateNativeAdapter.prototype.toModel = function (date) {\n        return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? this._toNativeDate(date) :\n            null;\n    };\n    NgbDateNativeAdapter.prototype._fromNativeDate = function (date) {\n        return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\n    };\n    NgbDateNativeAdapter.prototype._toNativeDate = function (date) {\n        var jsDate = new Date(date.year, date.month - 1, date.day, 12);\n        // avoid 30 -> 1930 conversion\n        jsDate.setFullYear(date.year);\n        return jsDate;\n    };\n    NgbDateNativeAdapter = __decorate([\n        Injectable()\n    ], NgbDateNativeAdapter);\n    return NgbDateNativeAdapter;\n}(NgbDateAdapter));\n\n/**\n * Same as [`NgbDateNativeAdapter`](#/components/datepicker/api#NgbDateNativeAdapter), but with UTC dates.\n *\n * @since 3.2.0\n */\nvar NgbDateNativeUTCAdapter = /** @class */ (function (_super) {\n    __extends(NgbDateNativeUTCAdapter, _super);\n    function NgbDateNativeUTCAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NgbDateNativeUTCAdapter.prototype._fromNativeDate = function (date) {\n        return { year: date.getUTCFullYear(), month: date.getUTCMonth() + 1, day: date.getUTCDate() };\n    };\n    NgbDateNativeUTCAdapter.prototype._toNativeDate = function (date) {\n        var jsDate = new Date(Date.UTC(date.year, date.month - 1, date.day));\n        // avoid 30 -> 1930 conversion\n        jsDate.setUTCFullYear(date.year);\n        return jsDate;\n    };\n    NgbDateNativeUTCAdapter = __decorate([\n        Injectable()\n    ], NgbDateNativeUTCAdapter);\n    return NgbDateNativeUTCAdapter;\n}(NgbDateNativeAdapter));\n\nvar NgbDatepickerModule = /** @class */ (function () {\n    function NgbDatepickerModule() {\n    }\n    NgbDatepickerModule = __decorate([\n        NgModule({\n            declarations: [\n                NgbDatepicker, NgbDatepickerContent, NgbDatepickerMonth, NgbDatepickerNavigation, NgbDatepickerNavigationSelect,\n                NgbDatepickerDayView, NgbInputDatepicker\n            ],\n            exports: [NgbDatepicker, NgbDatepickerContent, NgbInputDatepicker, NgbDatepickerMonth],\n            imports: [CommonModule, FormsModule],\n            entryComponents: [NgbDatepicker]\n        })\n    ], NgbDatepickerModule);\n    return NgbDatepickerModule;\n}());\n\n/**\n * A configuration service for the [`NgbDropdown`](#/components/dropdown/api#NgbDropdown) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the dropdowns used in the application.\n */\nvar NgbDropdownConfig = /** @class */ (function () {\n    function NgbDropdownConfig() {\n        this.autoClose = true;\n        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\n    }\n    NgbDropdownConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbDropdownConfig_Factory() { return new NgbDropdownConfig(); }, token: NgbDropdownConfig, providedIn: \"root\" });\n    NgbDropdownConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbDropdownConfig);\n    return NgbDropdownConfig;\n}());\n\nvar NgbNavbar = /** @class */ (function () {\n    function NgbNavbar() {\n    }\n    NgbNavbar = __decorate([\n        Directive({ selector: '.navbar' })\n    ], NgbNavbar);\n    return NgbNavbar;\n}());\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\nvar NgbDropdownItem = /** @class */ (function () {\n    function NgbDropdownItem(elementRef) {\n        this.elementRef = elementRef;\n        this._disabled = false;\n    }\n    Object.defineProperty(NgbDropdownItem.prototype, \"disabled\", {\n        get: function () { return this._disabled; },\n        set: function (value) {\n            this._disabled = value === '' || value === true; // accept an empty attribute as true\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbDropdownItem.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbDropdownItem.prototype, \"disabled\", null);\n    NgbDropdownItem = __decorate([\n        Directive({ selector: '[ngbDropdownItem]', host: { 'class': 'dropdown-item', '[class.disabled]': 'disabled' } })\n    ], NgbDropdownItem);\n    return NgbDropdownItem;\n}());\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\nvar NgbDropdownMenu = /** @class */ (function () {\n    function NgbDropdownMenu(dropdown, _elementRef) {\n        this.dropdown = dropdown;\n        this.placement = 'bottom';\n        this.isOpen = false;\n        this.nativeElement = _elementRef.nativeElement;\n    }\n    NgbDropdownMenu.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] }] },\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        ContentChildren(NgbDropdownItem)\n    ], NgbDropdownMenu.prototype, \"menuItems\", void 0);\n    NgbDropdownMenu = __decorate([\n        Directive({\n            selector: '[ngbDropdownMenu]',\n            host: {\n                '[class.dropdown-menu]': 'true',\n                '[class.show]': 'dropdown.isOpen()',\n                '[attr.x-placement]': 'placement',\n                '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',\n                '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',\n                '(keydown.Home)': 'dropdown.onKeyDown($event)',\n                '(keydown.End)': 'dropdown.onKeyDown($event)',\n                '(keydown.Enter)': 'dropdown.onKeyDown($event)',\n                '(keydown.Space)': 'dropdown.onKeyDown($event)',\n                '(keydown.Tab)': 'dropdown.onKeyDown($event)',\n                '(keydown.Shift.Tab)': 'dropdown.onKeyDown($event)'\n            }\n        }),\n        __param(0, Inject(forwardRef(function () { return NgbDropdown; })))\n    ], NgbDropdownMenu);\n    return NgbDropdownMenu;\n}());\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\nvar NgbDropdownAnchor = /** @class */ (function () {\n    function NgbDropdownAnchor(dropdown, _elementRef) {\n        this.dropdown = dropdown;\n        this.nativeElement = _elementRef.nativeElement;\n    }\n    NgbDropdownAnchor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] }] },\n        { type: ElementRef }\n    ]; };\n    NgbDropdownAnchor = __decorate([\n        Directive({\n            selector: '[ngbDropdownAnchor]',\n            host: { 'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': 'dropdown.isOpen()' }\n        }),\n        __param(0, Inject(forwardRef(function () { return NgbDropdown; })))\n    ], NgbDropdownAnchor);\n    return NgbDropdownAnchor;\n}());\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\nvar NgbDropdownToggle = /** @class */ (function (_super) {\n    __extends(NgbDropdownToggle, _super);\n    function NgbDropdownToggle(dropdown, elementRef) {\n        return _super.call(this, dropdown, elementRef) || this;\n    }\n    NgbDropdownToggle_1 = NgbDropdownToggle;\n    var NgbDropdownToggle_1;\n    NgbDropdownToggle.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] }] },\n        { type: ElementRef }\n    ]; };\n    NgbDropdownToggle = NgbDropdownToggle_1 = __decorate([\n        Directive({\n            selector: '[ngbDropdownToggle]',\n            host: {\n                'class': 'dropdown-toggle',\n                'aria-haspopup': 'true',\n                '[attr.aria-expanded]': 'dropdown.isOpen()',\n                '(click)': 'dropdown.toggle()',\n                '(keydown.ArrowUp)': 'dropdown.onKeyDown($event)',\n                '(keydown.ArrowDown)': 'dropdown.onKeyDown($event)',\n                '(keydown.Home)': 'dropdown.onKeyDown($event)',\n                '(keydown.End)': 'dropdown.onKeyDown($event)',\n                '(keydown.Tab)': 'dropdown.onKeyDown($event)',\n                '(keydown.Shift.Tab)': 'dropdown.onKeyDown($event)'\n            },\n            providers: [{ provide: NgbDropdownAnchor, useExisting: forwardRef(function () { return NgbDropdownToggle_1; }) }]\n        }),\n        __param(0, Inject(forwardRef(function () { return NgbDropdown; })))\n    ], NgbDropdownToggle);\n    return NgbDropdownToggle;\n}(NgbDropdownAnchor));\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\nvar NgbDropdown = /** @class */ (function () {\n    function NgbDropdown(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, ngbNavbar) {\n        var _this = this;\n        this._changeDetector = _changeDetector;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._closed$ = new Subject();\n        this._bodyContainer = null;\n        /**\n         * Defines whether or not the dropdown menu is opened initially.\n         */\n        this._open = false;\n        /**\n         * An event fired when the dropdown is opened or closed.\n         *\n         * The event payload is a `boolean`:\n         * * `true` - the dropdown was opened\n         * * `false` - the dropdown was closed\n         */\n        this.openChange = new EventEmitter();\n        this.placement = config.placement;\n        this.container = config.container;\n        this.autoClose = config.autoClose;\n        this.display = ngbNavbar ? 'static' : 'dynamic';\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () { _this._positionMenu(); });\n    }\n    NgbDropdown.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n            _this._applyPlacementClasses();\n            if (_this._open) {\n                _this._setCloseHandlers();\n            }\n        });\n    };\n    NgbDropdown.prototype.ngOnChanges = function (changes) {\n        if (changes.container && this._open) {\n            this._applyContainer(this.container);\n        }\n        if (changes.placement && !changes.placement.isFirstChange) {\n            this._applyPlacementClasses();\n        }\n    };\n    /**\n     * Checks if the dropdown menu is open.\n     */\n    NgbDropdown.prototype.isOpen = function () { return this._open; };\n    /**\n     * Opens the dropdown menu.\n     */\n    NgbDropdown.prototype.open = function () {\n        if (!this._open) {\n            this._open = true;\n            this._applyContainer(this.container);\n            this.openChange.emit(true);\n            this._setCloseHandlers();\n            if (this._anchor) {\n                this._anchor.nativeElement.focus();\n            }\n        }\n    };\n    NgbDropdown.prototype._setCloseHandlers = function () {\n        var _this = this;\n        ngbAutoClose(this._ngZone, this._document, this.autoClose, function (source) {\n            _this.close();\n            if (source === 0 /* ESCAPE */) {\n                _this._anchor.nativeElement.focus();\n            }\n        }, this._closed$, this._menu ? [this._menu.nativeElement] : [], this._anchor ? [this._anchor.nativeElement] : [], '.dropdown-item,.dropdown-divider');\n    };\n    /**\n     * Closes the dropdown menu.\n     */\n    NgbDropdown.prototype.close = function () {\n        if (this._open) {\n            this._open = false;\n            this._resetContainer();\n            this._closed$.next();\n            this.openChange.emit(false);\n            this._changeDetector.markForCheck();\n        }\n    };\n    /**\n     * Toggles the dropdown menu.\n     */\n    NgbDropdown.prototype.toggle = function () {\n        if (this.isOpen()) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    NgbDropdown.prototype.ngOnDestroy = function () {\n        this._resetContainer();\n        this._closed$.next();\n        this._zoneSubscription.unsubscribe();\n    };\n    NgbDropdown.prototype.onKeyDown = function (event) {\n        var _this = this;\n        // tslint:disable-next-line:deprecation\n        var key = event.which;\n        var itemElements = this._getMenuElements();\n        var position = -1;\n        var itemElement = null;\n        var isEventFromToggle = this._isEventFromToggle(event);\n        if (!isEventFromToggle && itemElements.length) {\n            itemElements.forEach(function (item, index) {\n                if (item.contains(event.target)) {\n                    itemElement = item;\n                }\n                if (item === _this._document.activeElement) {\n                    position = index;\n                }\n            });\n        }\n        // closing on Enter / Space\n        if (key === Key.Space || key === Key.Enter) {\n            if (itemElement && (this.autoClose === true || this.autoClose === 'inside')) {\n                // Item is either a button or a link, so click will be triggered by the browser on Enter or Space.\n                // So we have to register a one-time click handler that will fire after any user defined click handlers\n                // to close the dropdown\n                fromEvent(itemElement, 'click').pipe(take(1)).subscribe(function () { return _this.close(); });\n            }\n            return;\n        }\n        if (key === Key.Tab) {\n            if (event.target && this.isOpen() && this.autoClose) {\n                if (this._anchor.nativeElement === event.target) {\n                    if (this.container === 'body' && !event.shiftKey) {\n                        /* This case is special: user is using [Tab] from the anchor/toggle.\n                           User expects the next focusable element in the dropdown menu to get focus.\n                           But the menu is not a sibling to anchor/toggle, it is at the end of the body.\n                           Trick is to synchronously focus the menu element, and let the [keydown.Tab] go\n                           so that browser will focus the proper element (first one focusable in the menu) */\n                        this._renderer.setAttribute(this._menu.nativeElement, 'tabindex', '0');\n                        this._menu.nativeElement.focus();\n                        this._renderer.removeAttribute(this._menu.nativeElement, 'tabindex');\n                    }\n                    else if (event.shiftKey) {\n                        this.close();\n                    }\n                    return;\n                }\n                else if (this.container === 'body') {\n                    var focusableElements = this._menu.nativeElement.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);\n                    if (event.shiftKey && event.target === focusableElements[0]) {\n                        this._anchor.nativeElement.focus();\n                        event.preventDefault();\n                    }\n                    else if (!event.shiftKey && event.target === focusableElements[focusableElements.length - 1]) {\n                        this._anchor.nativeElement.focus();\n                        this.close();\n                    }\n                }\n                else {\n                    fromEvent(event.target, 'focusout').pipe(take(1)).subscribe(function (_a) {\n                        var relatedTarget = _a.relatedTarget;\n                        if (!_this._elementRef.nativeElement.contains(relatedTarget)) {\n                            _this.close();\n                        }\n                    });\n                }\n            }\n            return;\n        }\n        // opening / navigating\n        if (isEventFromToggle || itemElement) {\n            this.open();\n            if (itemElements.length) {\n                switch (key) {\n                    case Key.ArrowDown:\n                        position = Math.min(position + 1, itemElements.length - 1);\n                        break;\n                    case Key.ArrowUp:\n                        if (this._isDropup() && position === -1) {\n                            position = itemElements.length - 1;\n                            break;\n                        }\n                        position = Math.max(position - 1, 0);\n                        break;\n                    case Key.Home:\n                        position = 0;\n                        break;\n                    case Key.End:\n                        position = itemElements.length - 1;\n                        break;\n                }\n                itemElements[position].focus();\n            }\n            event.preventDefault();\n        }\n    };\n    NgbDropdown.prototype._isDropup = function () { return this._elementRef.nativeElement.classList.contains('dropup'); };\n    NgbDropdown.prototype._isEventFromToggle = function (event) {\n        return this._anchor.nativeElement.contains(event.target);\n    };\n    NgbDropdown.prototype._getMenuElements = function () {\n        var menu = this._menu;\n        if (menu == null) {\n            return [];\n        }\n        return menu.menuItems.filter(function (item) { return !item.disabled; }).map(function (item) { return item.elementRef.nativeElement; });\n    };\n    NgbDropdown.prototype._positionMenu = function () {\n        var menu = this._menu;\n        if (this.isOpen() && menu) {\n            this._applyPlacementClasses(this.display === 'dynamic' ? positionElements(this._anchor.nativeElement, this._bodyContainer || this._menu.nativeElement, this.placement, this.container === 'body') :\n                this._getFirstPlacement(this.placement));\n        }\n    };\n    NgbDropdown.prototype._getFirstPlacement = function (placement) {\n        return Array.isArray(placement) ? placement[0] : placement.split(' ')[0];\n    };\n    NgbDropdown.prototype._resetContainer = function () {\n        var renderer = this._renderer;\n        if (this._menu) {\n            var dropdownElement = this._elementRef.nativeElement;\n            var dropdownMenuElement = this._menu.nativeElement;\n            renderer.appendChild(dropdownElement, dropdownMenuElement);\n            renderer.removeStyle(dropdownMenuElement, 'position');\n            renderer.removeStyle(dropdownMenuElement, 'transform');\n        }\n        if (this._bodyContainer) {\n            renderer.removeChild(this._document.body, this._bodyContainer);\n            this._bodyContainer = null;\n        }\n    };\n    NgbDropdown.prototype._applyContainer = function (container) {\n        if (container === void 0) { container = null; }\n        this._resetContainer();\n        if (container === 'body') {\n            var renderer = this._renderer;\n            var dropdownMenuElement = this._menu.nativeElement;\n            var bodyContainer = this._bodyContainer = this._bodyContainer || renderer.createElement('div');\n            // Override some styles to have the positionning working\n            renderer.setStyle(bodyContainer, 'position', 'absolute');\n            renderer.setStyle(dropdownMenuElement, 'position', 'static');\n            renderer.setStyle(bodyContainer, 'z-index', '1050');\n            renderer.appendChild(bodyContainer, dropdownMenuElement);\n            renderer.appendChild(this._document.body, bodyContainer);\n        }\n    };\n    NgbDropdown.prototype._applyPlacementClasses = function (placement) {\n        var menu = this._menu;\n        if (menu) {\n            if (!placement) {\n                placement = this._getFirstPlacement(this.placement);\n            }\n            var renderer = this._renderer;\n            var dropdownElement = this._elementRef.nativeElement;\n            // remove the current placement classes\n            renderer.removeClass(dropdownElement, 'dropup');\n            renderer.removeClass(dropdownElement, 'dropdown');\n            menu.placement = this.display === 'static' ? null : placement;\n            /*\n            * apply the new placement\n            * in case of top use up-arrow or down-arrow otherwise\n            */\n            var dropdownClass = placement.search('^top') !== -1 ? 'dropup' : 'dropdown';\n            renderer.addClass(dropdownElement, dropdownClass);\n            var bodyContainer = this._bodyContainer;\n            if (bodyContainer) {\n                renderer.removeClass(bodyContainer, 'dropup');\n                renderer.removeClass(bodyContainer, 'dropdown');\n                renderer.addClass(bodyContainer, dropdownClass);\n            }\n        }\n    };\n    NgbDropdown.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: NgbDropdownConfig },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: NgbNavbar, decorators: [{ type: Optional }] }\n    ]; };\n    __decorate([\n        ContentChild(NgbDropdownMenu, { static: false })\n    ], NgbDropdown.prototype, \"_menu\", void 0);\n    __decorate([\n        ContentChild(NgbDropdownAnchor, { static: false })\n    ], NgbDropdown.prototype, \"_anchor\", void 0);\n    __decorate([\n        Input()\n    ], NgbDropdown.prototype, \"autoClose\", void 0);\n    __decorate([\n        Input('open')\n    ], NgbDropdown.prototype, \"_open\", void 0);\n    __decorate([\n        Input()\n    ], NgbDropdown.prototype, \"placement\", void 0);\n    __decorate([\n        Input()\n    ], NgbDropdown.prototype, \"container\", void 0);\n    __decorate([\n        Input()\n    ], NgbDropdown.prototype, \"display\", void 0);\n    __decorate([\n        Output()\n    ], NgbDropdown.prototype, \"openChange\", void 0);\n    NgbDropdown = __decorate([\n        Directive({ selector: '[ngbDropdown]', exportAs: 'ngbDropdown', host: { '[class.show]': 'isOpen()' } }),\n        __param(2, Inject(DOCUMENT)),\n        __param(6, Optional())\n    ], NgbDropdown);\n    return NgbDropdown;\n}());\n\nvar NGB_DROPDOWN_DIRECTIVES = [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownItem, NgbNavbar];\nvar NgbDropdownModule = /** @class */ (function () {\n    function NgbDropdownModule() {\n    }\n    NgbDropdownModule = __decorate([\n        NgModule({ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES })\n    ], NgbDropdownModule);\n    return NgbDropdownModule;\n}());\n\n/**\n * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all modals used in the application.\n*\n* @since 3.1.0\n*/\nvar NgbModalConfig = /** @class */ (function () {\n    function NgbModalConfig() {\n        this.backdrop = true;\n        this.keyboard = true;\n    }\n    NgbModalConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: \"root\" });\n    NgbModalConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbModalConfig);\n    return NgbModalConfig;\n}());\n\nvar ContentRef = /** @class */ (function () {\n    function ContentRef(nodes, viewRef, componentRef) {\n        this.nodes = nodes;\n        this.viewRef = viewRef;\n        this.componentRef = componentRef;\n    }\n    return ContentRef;\n}());\nvar PopupService = /** @class */ (function () {\n    function PopupService(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver, _applicationRef) {\n        this._type = _type;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._applicationRef = _applicationRef;\n        this._windowRef = null;\n        this._contentRef = null;\n    }\n    PopupService.prototype.open = function (content, context) {\n        if (!this._windowRef) {\n            this._contentRef = this._getContentRef(content, context);\n            this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), this._viewContainerRef.length, this._injector, this._contentRef.nodes);\n        }\n        return this._windowRef;\n    };\n    PopupService.prototype.close = function () {\n        var _a;\n        if (this._windowRef) {\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n            this._windowRef = null;\n            if ((_a = this._contentRef) === null || _a === void 0 ? void 0 : _a.viewRef) {\n                this._applicationRef.detachView(this._contentRef.viewRef);\n                this._contentRef.viewRef.destroy();\n                this._contentRef = null;\n            }\n        }\n    };\n    PopupService.prototype._getContentRef = function (content, context) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        else if (content instanceof TemplateRef) {\n            var viewRef = content.createEmbeddedView(context);\n            this._applicationRef.attachView(viewRef);\n            return new ContentRef([viewRef.rootNodes], viewRef);\n        }\n        else {\n            return new ContentRef([[this._renderer.createText(\"\" + content)]]);\n        }\n    };\n    return PopupService;\n}());\n\nvar noop = function () { };\nvar …µ0$1 = noop;\n/**\n * Utility to handle the scrollbar.\n *\n * It allows to compensate the lack of a vertical scrollbar by adding an\n * equivalent padding on the right of the body, and to remove this compensation.\n */\nvar ScrollBar = /** @class */ (function () {\n    function ScrollBar(_document) {\n        this._document = _document;\n    }\n    /**\n     * To be called right before a potential vertical scrollbar would be removed:\n     *\n     * - if there was a scrollbar, adds some compensation padding to the body\n     * to keep the same layout as when the scrollbar is there\n     * - if there was none, there is nothing to do\n     *\n     * @return a callback used to revert the compensation (noop if there was none,\n     * otherwise a function removing the padding)\n     */\n    ScrollBar.prototype.compensate = function () {\n        var width = this._getWidth();\n        return !this._isPresent(width) ? noop : this._adjustBody(width);\n    };\n    /**\n     * Adds a padding of the given width on the right of the body.\n     *\n     * @return a callback used to revert the padding to its previous value\n     */\n    ScrollBar.prototype._adjustBody = function (scrollbarWidth) {\n        var body = this._document.body;\n        var userSetPaddingStyle = body.style.paddingRight;\n        var actualPadding = parseFloat(window.getComputedStyle(body)['padding-right']);\n        body.style['padding-right'] = actualPadding + scrollbarWidth + \"px\";\n        return function () { return body.style['padding-right'] = userSetPaddingStyle; };\n    };\n    /**\n     * Tells whether a scrollbar is currently present on the body.\n     *\n     * @return true if scrollbar is present, false otherwise\n     */\n    ScrollBar.prototype._isPresent = function (scrollbarWidth) {\n        var rect = this._document.body.getBoundingClientRect();\n        var bodyToViewportGap = window.innerWidth - (rect.left + rect.right);\n        var uncertainty = 0.1 * scrollbarWidth;\n        return bodyToViewportGap >= scrollbarWidth - uncertainty;\n    };\n    /**\n     * Calculates and returns the width of a scrollbar.\n     *\n     * @return the width of a scrollbar on this page\n     */\n    ScrollBar.prototype._getWidth = function () {\n        var measurer = this._document.createElement('div');\n        measurer.className = 'modal-scrollbar-measure';\n        var body = this._document.body;\n        body.appendChild(measurer);\n        var width = measurer.getBoundingClientRect().width - measurer.clientWidth;\n        body.removeChild(measurer);\n        return width;\n    };\n    ScrollBar.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    ScrollBar.…µprov = …µ…µdefineInjectable({ factory: function ScrollBar_Factory() { return new ScrollBar(…µ…µinject(DOCUMENT)); }, token: ScrollBar, providedIn: \"root\" });\n    ScrollBar = __decorate([\n        Injectable({ providedIn: 'root' }),\n        __param(0, Inject(DOCUMENT))\n    ], ScrollBar);\n    return ScrollBar;\n}());\n\nvar NgbModalBackdrop = /** @class */ (function () {\n    function NgbModalBackdrop() {\n    }\n    __decorate([\n        Input()\n    ], NgbModalBackdrop.prototype, \"backdropClass\", void 0);\n    NgbModalBackdrop = __decorate([\n        Component({\n            selector: 'ngb-modal-backdrop',\n            encapsulation: ViewEncapsulation.None,\n            template: '',\n            host: { '[class]': '\"modal-backdrop fade show\" + (backdropClass ? \" \" + backdropClass : \"\")', 'style': 'z-index: 1050' }\n        })\n    ], NgbModalBackdrop);\n    return NgbModalBackdrop;\n}());\n\n/**\n * A reference to the currently opened (active) modal.\n *\n * Instances of this class can be injected into your component passed as modal content.\n * So you can `.close()` or `.dismiss()` the modal window from your component.\n */\nvar NgbActiveModal = /** @class */ (function () {\n    function NgbActiveModal() {\n    }\n    /**\n     * Closes the modal with an optional `result` value.\n     *\n     * The `NgbMobalRef.result` promise will be resolved with the provided value.\n     */\n    NgbActiveModal.prototype.close = function (result) { };\n    /**\n     * Dismisses the modal with an optional `reason` value.\n     *\n     * The `NgbModalRef.result` promise will be rejected with the provided value.\n     */\n    NgbActiveModal.prototype.dismiss = function (reason) { };\n    return NgbActiveModal;\n}());\n/**\n * A reference to the newly opened modal returned by the `NgbModal.open()` method.\n */\nvar NgbModalRef = /** @class */ (function () {\n    function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\n        var _this = this;\n        this._windowCmptRef = _windowCmptRef;\n        this._contentRef = _contentRef;\n        this._backdropCmptRef = _backdropCmptRef;\n        this._beforeDismiss = _beforeDismiss;\n        _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });\n        this.result = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n        this.result.then(null, function () { });\n    }\n    Object.defineProperty(NgbModalRef.prototype, \"componentInstance\", {\n        /**\n         * The instance of a component used for the modal content.\n         *\n         * When a `TemplateRef` is used as the content or when the modal is closed, will return `undefined`.\n         */\n        get: function () {\n            if (this._contentRef && this._contentRef.componentRef) {\n                return this._contentRef.componentRef.instance;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Closes the modal with an optional `result` value.\n     *\n     * The `NgbMobalRef.result` promise will be resolved with the provided value.\n     */\n    NgbModalRef.prototype.close = function (result) {\n        if (this._windowCmptRef) {\n            this._resolve(result);\n            this._removeModalElements();\n        }\n    };\n    NgbModalRef.prototype._dismiss = function (reason) {\n        this._reject(reason);\n        this._removeModalElements();\n    };\n    /**\n     * Dismisses the modal with an optional `reason` value.\n     *\n     * The `NgbModalRef.result` promise will be rejected with the provided value.\n     */\n    NgbModalRef.prototype.dismiss = function (reason) {\n        var _this = this;\n        if (this._windowCmptRef) {\n            if (!this._beforeDismiss) {\n                this._dismiss(reason);\n            }\n            else {\n                var dismiss = this._beforeDismiss();\n                if (dismiss && dismiss.then) {\n                    dismiss.then(function (result) {\n                        if (result !== false) {\n                            _this._dismiss(reason);\n                        }\n                    }, function () { });\n                }\n                else if (dismiss !== false) {\n                    this._dismiss(reason);\n                }\n            }\n        }\n    };\n    NgbModalRef.prototype._removeModalElements = function () {\n        var windowNativeEl = this._windowCmptRef.location.nativeElement;\n        windowNativeEl.parentNode.removeChild(windowNativeEl);\n        this._windowCmptRef.destroy();\n        if (this._backdropCmptRef) {\n            var backdropNativeEl = this._backdropCmptRef.location.nativeElement;\n            backdropNativeEl.parentNode.removeChild(backdropNativeEl);\n            this._backdropCmptRef.destroy();\n        }\n        if (this._contentRef && this._contentRef.viewRef) {\n            this._contentRef.viewRef.destroy();\n        }\n        this._windowCmptRef = null;\n        this._backdropCmptRef = null;\n        this._contentRef = null;\n    };\n    return NgbModalRef;\n}());\n\nvar ModalDismissReasons;\n(function (ModalDismissReasons) {\n    ModalDismissReasons[ModalDismissReasons[\"BACKDROP_CLICK\"] = 0] = \"BACKDROP_CLICK\";\n    ModalDismissReasons[ModalDismissReasons[\"ESC\"] = 1] = \"ESC\";\n})(ModalDismissReasons || (ModalDismissReasons = {}));\n\nvar NgbModalWindow = /** @class */ (function () {\n    function NgbModalWindow(_document, _elRef, _zone) {\n        this._document = _document;\n        this._elRef = _elRef;\n        this._zone = _zone;\n        this._closed$ = new Subject();\n        this._elWithFocus = null; // element that is focused prior to modal opening\n        this.backdrop = true;\n        this.keyboard = true;\n        this.dismissEvent = new EventEmitter();\n    }\n    NgbModalWindow.prototype.dismiss = function (reason) { this.dismissEvent.emit(reason); };\n    NgbModalWindow.prototype.ngOnInit = function () { this._elWithFocus = this._document.activeElement; };\n    NgbModalWindow.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var nativeElement = this._elRef.nativeElement;\n        this._zone.runOutsideAngular(function () {\n            fromEvent(nativeElement, 'keydown')\n                .pipe(takeUntil(_this._closed$), \n            // tslint:disable-next-line:deprecation\n            filter(function (e) { return e.which === Key.Escape && _this.keyboard; }))\n                .subscribe(function (event) { return requestAnimationFrame(function () {\n                if (!event.defaultPrevented) {\n                    _this._zone.run(function () { return _this.dismiss(ModalDismissReasons.ESC); });\n                }\n            }); });\n            // We're listening to 'mousedown' and 'mouseup' to prevent modal from closing when pressing the mouse\n            // inside the modal dialog and releasing it outside\n            var preventClose = false;\n            fromEvent(_this._dialogEl.nativeElement, 'mousedown')\n                .pipe(takeUntil(_this._closed$), tap(function () { return preventClose = false; }), switchMap(function () { return fromEvent(nativeElement, 'mouseup').pipe(takeUntil(_this._closed$), take(1)); }), filter(function (_a) {\n                var target = _a.target;\n                return nativeElement === target;\n            }))\n                .subscribe(function () { preventClose = true; });\n            // We're listening to 'click' to dismiss modal on modal window click, except when:\n            // 1. clicking on modal dialog itself\n            // 2. closing was prevented by mousedown/up handlers\n            // 3. clicking on scrollbar when the viewport is too small and modal doesn't fit (click is not triggered at all)\n            fromEvent(nativeElement, 'click').pipe(takeUntil(_this._closed$)).subscribe(function (_a) {\n                var target = _a.target;\n                if (_this.backdrop === true && nativeElement === target && !preventClose) {\n                    _this._zone.run(function () { return _this.dismiss(ModalDismissReasons.BACKDROP_CLICK); });\n                }\n                preventClose = false;\n            });\n        });\n        if (!nativeElement.contains(document.activeElement)) {\n            var autoFocusable = nativeElement.querySelector(\"[ngbAutofocus]\");\n            var firstFocusable = getFocusableBoundaryElements(nativeElement)[0];\n            var elementToFocus = autoFocusable || firstFocusable || nativeElement;\n            elementToFocus.focus();\n        }\n    };\n    NgbModalWindow.prototype.ngOnDestroy = function () {\n        var _this = this;\n        var body = this._document.body;\n        var elWithFocus = this._elWithFocus;\n        var elementToFocus;\n        if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {\n            elementToFocus = elWithFocus;\n        }\n        else {\n            elementToFocus = body;\n        }\n        this._zone.runOutsideAngular(function () {\n            setTimeout(function () { return elementToFocus.focus(); });\n            _this._elWithFocus = null;\n        });\n        this._closed$.next();\n    };\n    NgbModalWindow.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    __decorate([\n        ViewChild('dialog', { static: true })\n    ], NgbModalWindow.prototype, \"_dialogEl\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"ariaLabelledBy\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"ariaDescribedBy\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"backdrop\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"centered\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"keyboard\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"scrollable\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"size\", void 0);\n    __decorate([\n        Input()\n    ], NgbModalWindow.prototype, \"windowClass\", void 0);\n    __decorate([\n        Output('dismiss')\n    ], NgbModalWindow.prototype, \"dismissEvent\", void 0);\n    NgbModalWindow = __decorate([\n        Component({\n            selector: 'ngb-modal-window',\n            host: {\n                '[class]': '\"modal fade show d-block\" + (windowClass ? \" \" + windowClass : \"\")',\n                'role': 'dialog',\n                'tabindex': '-1',\n                '[attr.aria-modal]': 'true',\n                '[attr.aria-labelledby]': 'ariaLabelledBy',\n                '[attr.aria-describedby]': 'ariaDescribedBy',\n            },\n            template: \"\\n    <div #dialog [class]=\\\"'modal-dialog' + (size ? ' modal-' + size : '') + (centered ? ' modal-dialog-centered' : '') +\\n     (scrollable ? ' modal-dialog-scrollable' : '')\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\"><ng-content></ng-content></div>\\n    </div>\\n    \",\n            encapsulation: ViewEncapsulation.None,\n            styles: [\"ngb-modal-window .component-host-scrollable{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}\"]\n        }),\n        __param(0, Inject(DOCUMENT))\n    ], NgbModalWindow);\n    return NgbModalWindow;\n}());\n\nvar NgbModalStack = /** @class */ (function () {\n    function NgbModalStack(_applicationRef, _injector, _document, _scrollBar, _rendererFactory, _ngZone) {\n        var _this = this;\n        this._applicationRef = _applicationRef;\n        this._injector = _injector;\n        this._document = _document;\n        this._scrollBar = _scrollBar;\n        this._rendererFactory = _rendererFactory;\n        this._ngZone = _ngZone;\n        this._activeWindowCmptHasChanged = new Subject();\n        this._ariaHiddenValues = new Map();\n        this._backdropAttributes = ['backdropClass'];\n        this._modalRefs = [];\n        this._windowAttributes = ['ariaLabelledBy', 'ariaDescribedBy', 'backdrop', 'centered', 'keyboard', 'scrollable', 'size', 'windowClass'];\n        this._windowCmpts = [];\n        this._activeInstances = new EventEmitter();\n        // Trap focus on active WindowCmpt\n        this._activeWindowCmptHasChanged.subscribe(function () {\n            if (_this._windowCmpts.length) {\n                var activeWindowCmpt = _this._windowCmpts[_this._windowCmpts.length - 1];\n                ngbFocusTrap(_this._ngZone, activeWindowCmpt.location.nativeElement, _this._activeWindowCmptHasChanged);\n                _this._revertAriaHidden();\n                _this._setAriaHidden(activeWindowCmpt.location.nativeElement);\n            }\n        });\n    }\n    NgbModalStack.prototype.open = function (moduleCFR, contentInjector, content, options) {\n        var _this = this;\n        var containerEl = options.container instanceof HTMLElement ? options.container : isDefined(options.container) ?\n            this._document.querySelector(options.container) :\n            this._document.body;\n        var renderer = this._rendererFactory.createRenderer(null, null);\n        var revertPaddingForScrollBar = this._scrollBar.compensate();\n        var removeBodyClass = function () {\n            if (!_this._modalRefs.length) {\n                renderer.removeClass(_this._document.body, 'modal-open');\n                _this._revertAriaHidden();\n            }\n        };\n        if (!containerEl) {\n            throw new Error(\"The specified modal container \\\"\" + (options.container || 'body') + \"\\\" was not found in the DOM.\");\n        }\n        var activeModal = new NgbActiveModal();\n        var contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal, options);\n        var backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(moduleCFR, containerEl) : undefined;\n        var windowCmptRef = this._attachWindowComponent(moduleCFR, containerEl, contentRef);\n        var ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);\n        this._registerModalRef(ngbModalRef);\n        this._registerWindowCmpt(windowCmptRef);\n        ngbModalRef.result.then(revertPaddingForScrollBar, revertPaddingForScrollBar);\n        ngbModalRef.result.then(removeBodyClass, removeBodyClass);\n        activeModal.close = function (result) { ngbModalRef.close(result); };\n        activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };\n        this._applyWindowOptions(windowCmptRef.instance, options);\n        if (this._modalRefs.length === 1) {\n            renderer.addClass(this._document.body, 'modal-open');\n        }\n        if (backdropCmptRef && backdropCmptRef.instance) {\n            this._applyBackdropOptions(backdropCmptRef.instance, options);\n        }\n        return ngbModalRef;\n    };\n    Object.defineProperty(NgbModalStack.prototype, \"activeInstances\", {\n        get: function () { return this._activeInstances; },\n        enumerable: true,\n        configurable: true\n    });\n    NgbModalStack.prototype.dismissAll = function (reason) { this._modalRefs.forEach(function (ngbModalRef) { return ngbModalRef.dismiss(reason); }); };\n    NgbModalStack.prototype.hasOpenModals = function () { return this._modalRefs.length > 0; };\n    NgbModalStack.prototype._attachBackdrop = function (moduleCFR, containerEl) {\n        var backdropFactory = moduleCFR.resolveComponentFactory(NgbModalBackdrop);\n        var backdropCmptRef = backdropFactory.create(this._injector);\n        this._applicationRef.attachView(backdropCmptRef.hostView);\n        containerEl.appendChild(backdropCmptRef.location.nativeElement);\n        return backdropCmptRef;\n    };\n    NgbModalStack.prototype._attachWindowComponent = function (moduleCFR, containerEl, contentRef) {\n        var windowFactory = moduleCFR.resolveComponentFactory(NgbModalWindow);\n        var windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);\n        this._applicationRef.attachView(windowCmptRef.hostView);\n        containerEl.appendChild(windowCmptRef.location.nativeElement);\n        return windowCmptRef;\n    };\n    NgbModalStack.prototype._applyWindowOptions = function (windowInstance, options) {\n        this._windowAttributes.forEach(function (optionName) {\n            if (isDefined(options[optionName])) {\n                windowInstance[optionName] = options[optionName];\n            }\n        });\n    };\n    NgbModalStack.prototype._applyBackdropOptions = function (backdropInstance, options) {\n        this._backdropAttributes.forEach(function (optionName) {\n            if (isDefined(options[optionName])) {\n                backdropInstance[optionName] = options[optionName];\n            }\n        });\n    };\n    NgbModalStack.prototype._getContentRef = function (moduleCFR, contentInjector, content, activeModal, options) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        else if (content instanceof TemplateRef) {\n            return this._createFromTemplateRef(content, activeModal);\n        }\n        else if (isString(content)) {\n            return this._createFromString(content);\n        }\n        else {\n            return this._createFromComponent(moduleCFR, contentInjector, content, activeModal, options);\n        }\n    };\n    NgbModalStack.prototype._createFromTemplateRef = function (content, activeModal) {\n        var context = {\n            $implicit: activeModal,\n            close: function (result) { activeModal.close(result); },\n            dismiss: function (reason) { activeModal.dismiss(reason); }\n        };\n        var viewRef = content.createEmbeddedView(context);\n        this._applicationRef.attachView(viewRef);\n        return new ContentRef([viewRef.rootNodes], viewRef);\n    };\n    NgbModalStack.prototype._createFromString = function (content) {\n        var component = this._document.createTextNode(\"\" + content);\n        return new ContentRef([[component]]);\n    };\n    NgbModalStack.prototype._createFromComponent = function (moduleCFR, contentInjector, content, context, options) {\n        var contentCmptFactory = moduleCFR.resolveComponentFactory(content);\n        var modalContentInjector = Injector.create({ providers: [{ provide: NgbActiveModal, useValue: context }], parent: contentInjector });\n        var componentRef = contentCmptFactory.create(modalContentInjector);\n        var componentNativeEl = componentRef.location.nativeElement;\n        if (options.scrollable) {\n            componentNativeEl.classList.add('component-host-scrollable');\n        }\n        this._applicationRef.attachView(componentRef.hostView);\n        // FIXME: we should here get rid of the component nativeElement\n        // and use `[Array.from(componentNativeEl.childNodes)]` instead and remove the above CSS class.\n        return new ContentRef([[componentNativeEl]], componentRef.hostView, componentRef);\n    };\n    NgbModalStack.prototype._setAriaHidden = function (element) {\n        var _this = this;\n        var parent = element.parentElement;\n        if (parent && element !== this._document.body) {\n            Array.from(parent.children).forEach(function (sibling) {\n                if (sibling !== element && sibling.nodeName !== 'SCRIPT') {\n                    _this._ariaHiddenValues.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            });\n            this._setAriaHidden(parent);\n        }\n    };\n    NgbModalStack.prototype._revertAriaHidden = function () {\n        this._ariaHiddenValues.forEach(function (value, element) {\n            if (value) {\n                element.setAttribute('aria-hidden', value);\n            }\n            else {\n                element.removeAttribute('aria-hidden');\n            }\n        });\n        this._ariaHiddenValues.clear();\n    };\n    NgbModalStack.prototype._registerModalRef = function (ngbModalRef) {\n        var _this = this;\n        var unregisterModalRef = function () {\n            var index = _this._modalRefs.indexOf(ngbModalRef);\n            if (index > -1) {\n                _this._modalRefs.splice(index, 1);\n                _this._activeInstances.emit(_this._modalRefs);\n            }\n        };\n        this._modalRefs.push(ngbModalRef);\n        this._activeInstances.emit(this._modalRefs);\n        ngbModalRef.result.then(unregisterModalRef, unregisterModalRef);\n    };\n    NgbModalStack.prototype._registerWindowCmpt = function (ngbWindowCmpt) {\n        var _this = this;\n        this._windowCmpts.push(ngbWindowCmpt);\n        this._activeWindowCmptHasChanged.next();\n        ngbWindowCmpt.onDestroy(function () {\n            var index = _this._windowCmpts.indexOf(ngbWindowCmpt);\n            if (index > -1) {\n                _this._windowCmpts.splice(index, 1);\n                _this._activeWindowCmptHasChanged.next();\n            }\n        });\n    };\n    NgbModalStack.ctorParameters = function () { return [\n        { type: ApplicationRef },\n        { type: Injector },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ScrollBar },\n        { type: RendererFactory2 },\n        { type: NgZone }\n    ]; };\n    NgbModalStack.…µprov = …µ…µdefineInjectable({ factory: function NgbModalStack_Factory() { return new NgbModalStack(…µ…µinject(ApplicationRef), …µ…µinject(INJECTOR), …µ…µinject(DOCUMENT), …µ…µinject(ScrollBar), …µ…µinject(RendererFactory2), …µ…µinject(NgZone)); }, token: NgbModalStack, providedIn: \"root\" });\n    NgbModalStack = __decorate([\n        Injectable({ providedIn: 'root' }),\n        __param(2, Inject(DOCUMENT))\n    ], NgbModalStack);\n    return NgbModalStack;\n}());\n\n/**\n * A service for opening modal windows.\n *\n * Creating a modal is straightforward: create a component or a template and pass it as an argument to\n * the `.open()` method.\n */\nvar NgbModal = /** @class */ (function () {\n    function NgbModal(_moduleCFR, _injector, _modalStack, _config) {\n        this._moduleCFR = _moduleCFR;\n        this._injector = _injector;\n        this._modalStack = _modalStack;\n        this._config = _config;\n    }\n    /**\n     * Opens a new modal window with the specified content and supplied options.\n     *\n     * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,\n     * then instances of those components can be injected with an instance of the `NgbActiveModal` class. You can then\n     * use `NgbActiveModal` methods to close / dismiss modals from \"inside\" of your component.\n     *\n     * Also see the [`NgbModalOptions`](#/components/modal/api#NgbModalOptions) for the list of supported options.\n     */\n    NgbModal.prototype.open = function (content, options) {\n        if (options === void 0) { options = {}; }\n        var combinedOptions = Object.assign({}, this._config, options);\n        return this._modalStack.open(this._moduleCFR, this._injector, content, combinedOptions);\n    };\n    Object.defineProperty(NgbModal.prototype, \"activeInstances\", {\n        /**\n         * Returns an observable that holds the active modal instances.\n         */\n        get: function () { return this._modalStack.activeInstances; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dismisses all currently displayed modal windows with the supplied reason.\n     *\n     * @since 3.1.0\n     */\n    NgbModal.prototype.dismissAll = function (reason) { this._modalStack.dismissAll(reason); };\n    /**\n     * Indicates if there are currently any open modal windows in the application.\n     *\n     * @since 3.3.0\n     */\n    NgbModal.prototype.hasOpenModals = function () { return this._modalStack.hasOpenModals(); };\n    NgbModal.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: Injector },\n        { type: NgbModalStack },\n        { type: NgbModalConfig }\n    ]; };\n    NgbModal.…µprov = …µ…µdefineInjectable({ factory: function NgbModal_Factory() { return new NgbModal(…µ…µinject(ComponentFactoryResolver), …µ…µinject(INJECTOR), …µ…µinject(NgbModalStack), …µ…µinject(NgbModalConfig)); }, token: NgbModal, providedIn: \"root\" });\n    NgbModal = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbModal);\n    return NgbModal;\n}());\n\nvar NgbModalModule = /** @class */ (function () {\n    function NgbModalModule() {\n    }\n    NgbModalModule = __decorate([\n        NgModule({\n            declarations: [NgbModalBackdrop, NgbModalWindow],\n            entryComponents: [NgbModalBackdrop, NgbModalWindow],\n            providers: [NgbModal]\n        })\n    ], NgbModalModule);\n    return NgbModalModule;\n}());\n\n/**\n * A configuration service for the [`NgbNav`](#/components/nav/api#NgbNav) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the navs used in the application.\n *\n * @since 5.2.0\n */\nvar NgbNavConfig = /** @class */ (function () {\n    function NgbNavConfig() {\n        this.destroyOnHide = true;\n        this.orientation = 'horizontal';\n        this.roles = 'tablist';\n        this.keyboard = false;\n    }\n    NgbNavConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbNavConfig_Factory() { return new NgbNavConfig(); }, token: NgbNavConfig, providedIn: \"root\" });\n    NgbNavConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbNavConfig);\n    return NgbNavConfig;\n}());\n\nvar isValidNavId = function (id) { return isDefined(id) && id !== ''; };\nvar …µ0$2 = isValidNavId;\nvar navCounter = 0;\n/**\n * This directive must be used to wrap content to be displayed in the nav.\n *\n * @since 5.2.0\n */\nvar NgbNavContent = /** @class */ (function () {\n    function NgbNavContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbNavContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbNavContent = __decorate([\n        Directive({ selector: 'ng-template[ngbNavContent]' })\n    ], NgbNavContent);\n    return NgbNavContent;\n}());\n/**\n * The directive used to group nav link and related nav content. As well as set nav identifier and some options.\n *\n * @since 5.2.0\n */\nvar NgbNavItem = /** @class */ (function () {\n    function NgbNavItem(nav, elementRef) {\n        this.elementRef = elementRef;\n        /**\n         * If `true`, the current nav item is disabled and can't be toggled by user.\n         *\n         * Nevertheless disabled nav can be selected programmatically via the `.select()` method and the `[activeId]` binding.\n         */\n        this.disabled = false;\n        // TODO: cf https://github.com/angular/angular/issues/30106\n        this._nav = nav;\n    }\n    NgbNavItem.prototype.ngAfterContentChecked = function () {\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\n        // only @ContentChildren allows us to specify the {descendants: false} option.\n        // Without {descendants: false} we are hitting bugs described in:\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n        this.contentTpl = this.contentTpls.first;\n    };\n    NgbNavItem.prototype.ngOnInit = function () {\n        if (!isDefined(this.domId)) {\n            this.domId = \"ngb-nav-\" + navCounter++;\n        }\n    };\n    Object.defineProperty(NgbNavItem.prototype, \"active\", {\n        get: function () { return this._nav.activeId === this.id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbNavItem.prototype, \"id\", {\n        get: function () { return isValidNavId(this._id) ? this._id : this.domId; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbNavItem.prototype, \"panelDomId\", {\n        get: function () { return this.domId + \"-panel\"; },\n        enumerable: true,\n        configurable: true\n    });\n    NgbNavItem.prototype.isPanelInDom = function () {\n        return (isDefined(this.destroyOnHide) ? !this.destroyOnHide : !this._nav.destroyOnHide) || this.active;\n    };\n    NgbNavItem.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbNav; }),] }] },\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbNavItem.prototype, \"destroyOnHide\", void 0);\n    __decorate([\n        Input()\n    ], NgbNavItem.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbNavItem.prototype, \"domId\", void 0);\n    __decorate([\n        Input('ngbNavItem')\n    ], NgbNavItem.prototype, \"_id\", void 0);\n    __decorate([\n        ContentChildren(NgbNavContent, { descendants: false })\n    ], NgbNavItem.prototype, \"contentTpls\", void 0);\n    NgbNavItem = __decorate([\n        Directive({ selector: '[ngbNavItem]', exportAs: 'ngbNavItem', host: { '[class.nav-item]': 'true' } }),\n        __param(0, Inject(forwardRef(function () { return NgbNav; })))\n    ], NgbNavItem);\n    return NgbNavItem;\n}());\n/**\n * A nav directive that helps with implementing tabbed navigation components.\n *\n * @since 5.2.0\n */\nvar NgbNav = /** @class */ (function () {\n    function NgbNav(role, config, _cd, _document) {\n        this.role = role;\n        this._cd = _cd;\n        this._document = _document;\n        /**\n         * The event emitted after the active nav changes\n         * The payload of the event is the newly active nav id\n         *\n         * If you want to prevent nav change, you should use `(navChange)` event\n         */\n        this.activeIdChange = new EventEmitter();\n        /**\n         * The nav change event emitted right before the nav change happens on user click.\n         *\n         * This event won't be emitted if nav is changed programmatically via `[activeId]` or `.select()`.\n         *\n         * See [`NgbNavChangeEvent`](#/components/nav/api#NgbNavChangeEvent) for payload details.\n         */\n        this.navChange = new EventEmitter();\n        this.destroyOnHide = config.destroyOnHide;\n        this.orientation = config.orientation;\n        this.roles = config.roles;\n        this.keyboard = config.keyboard;\n    }\n    NgbNav.prototype.click = function (item) {\n        if (!item.disabled) {\n            this._updateActiveId(item.id);\n        }\n    };\n    NgbNav.prototype.onKeyDown = function (event) {\n        var _this = this;\n        if (this.roles !== 'tablist' || !this.keyboard) {\n            return;\n        }\n        // tslint:disable-next-line: deprecation\n        var key = event.which;\n        var enabledLinks = this.links.filter(function (link) { return !link.navItem.disabled; });\n        var length = enabledLinks.length;\n        var position = -1;\n        enabledLinks.forEach(function (link, index) {\n            if (link.elRef.nativeElement === _this._document.activeElement) {\n                position = index;\n            }\n        });\n        if (length) {\n            switch (key) {\n                case Key.ArrowLeft:\n                    if (this.orientation === 'vertical') {\n                        return;\n                    }\n                    position = (position - 1 + length) % length;\n                    break;\n                case Key.ArrowRight:\n                    if (this.orientation === 'vertical') {\n                        return;\n                    }\n                    position = (position + 1) % length;\n                    break;\n                case Key.ArrowDown:\n                    if (this.orientation === 'horizontal') {\n                        return;\n                    }\n                    position = (position + 1) % length;\n                    break;\n                case Key.ArrowUp:\n                    if (this.orientation === 'horizontal') {\n                        return;\n                    }\n                    position = (position - 1 + length) % length;\n                    break;\n                case Key.Home:\n                    position = 0;\n                    break;\n                case Key.End:\n                    position = length - 1;\n                    break;\n            }\n            if (this.keyboard === 'changeWithArrows') {\n                this.select(enabledLinks[position].navItem.id);\n            }\n            enabledLinks[position].elRef.nativeElement.focus();\n            event.preventDefault();\n        }\n    };\n    /**\n     * Selects the nav with the given id and shows its associated pane.\n     * Any other nav that was previously selected becomes unselected and its associated pane is hidden.\n     */\n    NgbNav.prototype.select = function (id) { this._updateActiveId(id, false); };\n    NgbNav.prototype.ngAfterContentInit = function () {\n        if (!isDefined(this.activeId)) {\n            var nextId = this.items.first ? this.items.first.id : null;\n            if (isValidNavId(nextId)) {\n                this._updateActiveId(nextId, false);\n                this._cd.detectChanges();\n            }\n        }\n    };\n    NgbNav.prototype._updateActiveId = function (nextId, emitNavChange) {\n        if (emitNavChange === void 0) { emitNavChange = true; }\n        if (this.activeId !== nextId) {\n            var defaultPrevented_1 = false;\n            if (emitNavChange) {\n                this.navChange.emit({ activeId: this.activeId, nextId: nextId, preventDefault: function () { defaultPrevented_1 = true; } });\n            }\n            if (!defaultPrevented_1) {\n                this.activeId = nextId;\n                this.activeIdChange.emit(nextId);\n            }\n        }\n    };\n    NgbNav.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n        { type: NgbNavConfig },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbNav.prototype, \"activeId\", void 0);\n    __decorate([\n        Output()\n    ], NgbNav.prototype, \"activeIdChange\", void 0);\n    __decorate([\n        Input()\n    ], NgbNav.prototype, \"destroyOnHide\", void 0);\n    __decorate([\n        Input()\n    ], NgbNav.prototype, \"orientation\", void 0);\n    __decorate([\n        Input()\n    ], NgbNav.prototype, \"roles\", void 0);\n    __decorate([\n        Input()\n    ], NgbNav.prototype, \"keyboard\", void 0);\n    __decorate([\n        ContentChildren(NgbNavItem)\n    ], NgbNav.prototype, \"items\", void 0);\n    __decorate([\n        ContentChildren(forwardRef(function () { return NgbNavLink; }), { descendants: true })\n    ], NgbNav.prototype, \"links\", void 0);\n    __decorate([\n        Output()\n    ], NgbNav.prototype, \"navChange\", void 0);\n    NgbNav = __decorate([\n        Directive({\n            selector: '[ngbNav]',\n            exportAs: 'ngbNav',\n            host: {\n                '[class.nav]': 'true',\n                '[class.flex-column]': \"orientation === 'vertical'\",\n                '[attr.aria-orientation]': \"orientation === 'vertical' && roles === 'tablist' ? 'vertical' : undefined\",\n                '[attr.role]': \"role ? role : roles ? 'tablist' : undefined\",\n                '(keydown.arrowLeft)': 'onKeyDown($event)',\n                '(keydown.arrowRight)': 'onKeyDown($event)',\n                '(keydown.arrowDown)': 'onKeyDown($event)',\n                '(keydown.arrowUp)': 'onKeyDown($event)',\n                '(keydown.Home)': 'onKeyDown($event)',\n                '(keydown.End)': 'onKeyDown($event)'\n            }\n        }),\n        __param(0, Attribute('role')),\n        __param(3, Inject(DOCUMENT))\n    ], NgbNav);\n    return NgbNav;\n}());\n/**\n * A directive to put on the nav link.\n *\n * @since 5.2.0\n */\nvar NgbNavLink = /** @class */ (function () {\n    function NgbNavLink(role, navItem, nav, elRef) {\n        this.role = role;\n        this.navItem = navItem;\n        this.nav = nav;\n        this.elRef = elRef;\n    }\n    NgbNavLink.prototype.hasNavItemClass = function () {\n        // with alternative markup we have to add `.nav-item` class, because `ngbNavItem` is on the ng-container\n        return this.navItem.elementRef.nativeElement.nodeType === Node.COMMENT_NODE;\n    };\n    NgbNavLink.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n        { type: NgbNavItem },\n        { type: NgbNav },\n        { type: ElementRef }\n    ]; };\n    NgbNavLink = __decorate([\n        Directive({\n            selector: 'a[ngbNavLink]',\n            host: {\n                '[id]': 'navItem.domId',\n                '[class.nav-link]': 'true',\n                '[class.nav-item]': 'hasNavItemClass()',\n                '[attr.role]': \"role ? role : nav.roles ? 'tab' : undefined\",\n                'href': '',\n                '[class.active]': 'navItem.active',\n                '[class.disabled]': 'navItem.disabled',\n                '[attr.tabindex]': 'navItem.disabled ? -1 : undefined',\n                '[attr.aria-controls]': 'navItem.isPanelInDom() ? navItem.panelDomId : null',\n                '[attr.aria-selected]': 'navItem.active',\n                '[attr.aria-disabled]': 'navItem.disabled',\n                '(click)': 'nav.click(navItem); $event.preventDefault()'\n            }\n        }),\n        __param(0, Attribute('role'))\n    ], NgbNavLink);\n    return NgbNavLink;\n}());\n\n/**\n * The outlet where currently active nav content will be displayed.\n *\n * @since 5.2.0\n */\nvar NgbNavOutlet = /** @class */ (function () {\n    function NgbNavOutlet() {\n    }\n    __decorate([\n        Input()\n    ], NgbNavOutlet.prototype, \"paneRole\", void 0);\n    __decorate([\n        Input('ngbNavOutlet')\n    ], NgbNavOutlet.prototype, \"nav\", void 0);\n    NgbNavOutlet = __decorate([\n        Component({\n            selector: '[ngbNavOutlet]',\n            host: { '[class.tab-content]': 'true' },\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n      <ng-template ngFor let-item [ngForOf]=\\\"nav.items\\\">\\n          <div class=\\\"tab-pane\\\"\\n               *ngIf=\\\"item.isPanelInDom()\\\"\\n               [id]=\\\"item.panelDomId\\\"\\n               [class.active]=\\\"item.active\\\"\\n               [attr.role]=\\\"paneRole ? paneRole : nav.roles ? 'tabpanel' : undefined\\\"\\n               [attr.aria-labelledby]=\\\"item.domId\\\">\\n              <ng-template [ngTemplateOutlet]=\\\"item.contentTpl?.templateRef || null\\\"\\n                           [ngTemplateOutletContext]=\\\"{$implicit: item.active}\\\"></ng-template>\\n          </div>\\n      </ng-template>\\n  \"\n        })\n    ], NgbNavOutlet);\n    return NgbNavOutlet;\n}());\n\nvar NGB_NAV_DIRECTIVES = [NgbNavContent, NgbNav, NgbNavItem, NgbNavLink, NgbNavOutlet];\nvar NgbNavModule = /** @class */ (function () {\n    function NgbNavModule() {\n    }\n    NgbNavModule = __decorate([\n        NgModule({ declarations: NGB_NAV_DIRECTIVES, exports: NGB_NAV_DIRECTIVES, imports: [CommonModule] })\n    ], NgbNavModule);\n    return NgbNavModule;\n}());\n\n/**\n * A configuration service for the [`NgbPagination`](#/components/pagination/api#NgbPagination) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the paginations used in the application.\n */\nvar NgbPaginationConfig = /** @class */ (function () {\n    function NgbPaginationConfig() {\n        this.disabled = false;\n        this.boundaryLinks = false;\n        this.directionLinks = true;\n        this.ellipses = true;\n        this.maxSize = 0;\n        this.pageSize = 10;\n        this.rotate = false;\n    }\n    NgbPaginationConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbPaginationConfig_Factory() { return new NgbPaginationConfig(); }, token: NgbPaginationConfig, providedIn: \"root\" });\n    NgbPaginationConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbPaginationConfig);\n    return NgbPaginationConfig;\n}());\n\n/**\n * A directive to match the 'ellipsis' link template\n *\n * @since 4.1.0\n */\nvar NgbPaginationEllipsis = /** @class */ (function () {\n    function NgbPaginationEllipsis(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPaginationEllipsis.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPaginationEllipsis = __decorate([\n        Directive({ selector: 'ng-template[ngbPaginationEllipsis]' })\n    ], NgbPaginationEllipsis);\n    return NgbPaginationEllipsis;\n}());\n/**\n * A directive to match the 'first' link template\n *\n * @since 4.1.0\n */\nvar NgbPaginationFirst = /** @class */ (function () {\n    function NgbPaginationFirst(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPaginationFirst.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPaginationFirst = __decorate([\n        Directive({ selector: 'ng-template[ngbPaginationFirst]' })\n    ], NgbPaginationFirst);\n    return NgbPaginationFirst;\n}());\n/**\n * A directive to match the 'last' link template\n *\n * @since 4.1.0\n */\nvar NgbPaginationLast = /** @class */ (function () {\n    function NgbPaginationLast(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPaginationLast.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPaginationLast = __decorate([\n        Directive({ selector: 'ng-template[ngbPaginationLast]' })\n    ], NgbPaginationLast);\n    return NgbPaginationLast;\n}());\n/**\n * A directive to match the 'next' link template\n *\n * @since 4.1.0\n */\nvar NgbPaginationNext = /** @class */ (function () {\n    function NgbPaginationNext(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPaginationNext.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPaginationNext = __decorate([\n        Directive({ selector: 'ng-template[ngbPaginationNext]' })\n    ], NgbPaginationNext);\n    return NgbPaginationNext;\n}());\n/**\n * A directive to match the page 'number' link template\n *\n * @since 4.1.0\n */\nvar NgbPaginationNumber = /** @class */ (function () {\n    function NgbPaginationNumber(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPaginationNumber.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPaginationNumber = __decorate([\n        Directive({ selector: 'ng-template[ngbPaginationNumber]' })\n    ], NgbPaginationNumber);\n    return NgbPaginationNumber;\n}());\n/**\n * A directive to match the 'previous' link template\n *\n * @since 4.1.0\n */\nvar NgbPaginationPrevious = /** @class */ (function () {\n    function NgbPaginationPrevious(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPaginationPrevious.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbPaginationPrevious = __decorate([\n        Directive({ selector: 'ng-template[ngbPaginationPrevious]' })\n    ], NgbPaginationPrevious);\n    return NgbPaginationPrevious;\n}());\n/**\n * A component that displays page numbers and allows to customize them in several ways.\n */\nvar NgbPagination = /** @class */ (function () {\n    function NgbPagination(config) {\n        this.pageCount = 0;\n        this.pages = [];\n        /**\n         *  The current page.\n         *\n         *  Page numbers start with `1`.\n         */\n        this.page = 1;\n        /**\n         *  An event fired when the page is changed. Will fire only if collection size is set and all values are valid.\n         *\n         *  Event payload is the number of the newly selected page.\n         *\n         *  Page numbers start with `1`.\n         */\n        this.pageChange = new EventEmitter(true);\n        this.disabled = config.disabled;\n        this.boundaryLinks = config.boundaryLinks;\n        this.directionLinks = config.directionLinks;\n        this.ellipses = config.ellipses;\n        this.maxSize = config.maxSize;\n        this.pageSize = config.pageSize;\n        this.rotate = config.rotate;\n        this.size = config.size;\n    }\n    NgbPagination.prototype.hasPrevious = function () { return this.page > 1; };\n    NgbPagination.prototype.hasNext = function () { return this.page < this.pageCount; };\n    NgbPagination.prototype.nextDisabled = function () { return !this.hasNext() || this.disabled; };\n    NgbPagination.prototype.previousDisabled = function () { return !this.hasPrevious() || this.disabled; };\n    NgbPagination.prototype.selectPage = function (pageNumber) { this._updatePages(pageNumber); };\n    NgbPagination.prototype.ngOnChanges = function (changes) { this._updatePages(this.page); };\n    NgbPagination.prototype.isEllipsis = function (pageNumber) { return pageNumber === -1; };\n    /**\n     * Appends ellipses and first/last page number to the displayed pages\n     */\n    NgbPagination.prototype._applyEllipses = function (start, end) {\n        if (this.ellipses) {\n            if (start > 0) {\n                // The first page will always be included. If the displayed range\n                // starts after the third page, then add ellipsis. But if the range\n                // starts on the third page, then add the second page instead of\n                // an ellipsis, because the ellipsis would only hide a single page.\n                if (start > 2) {\n                    this.pages.unshift(-1);\n                }\n                else if (start === 2) {\n                    this.pages.unshift(2);\n                }\n                this.pages.unshift(1);\n            }\n            if (end < this.pageCount) {\n                // The last page will always be included. If the displayed range\n                // ends before the third-last page, then add ellipsis. But if the range\n                // ends on third-last page, then add the second-last page instead of\n                // an ellipsis, because the ellipsis would only hide a single page.\n                if (end < (this.pageCount - 2)) {\n                    this.pages.push(-1);\n                }\n                else if (end === (this.pageCount - 2)) {\n                    this.pages.push(this.pageCount - 1);\n                }\n                this.pages.push(this.pageCount);\n            }\n        }\n    };\n    /**\n     * Rotates page numbers based on maxSize items visible.\n     * Currently selected page stays in the middle:\n     *\n     * Ex. for selected page = 6:\n     * [5,*6*,7] for maxSize = 3\n     * [4,5,*6*,7] for maxSize = 4\n     */\n    NgbPagination.prototype._applyRotation = function () {\n        var start = 0;\n        var end = this.pageCount;\n        var leftOffset = Math.floor(this.maxSize / 2);\n        var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n        if (this.page <= leftOffset) {\n            // very beginning, no rotation -> [0..maxSize]\n            end = this.maxSize;\n        }\n        else if (this.pageCount - this.page < leftOffset) {\n            // very end, no rotation -> [len-maxSize..len]\n            start = this.pageCount - this.maxSize;\n        }\n        else {\n            // rotate\n            start = this.page - leftOffset - 1;\n            end = this.page + rightOffset;\n        }\n        return [start, end];\n    };\n    /**\n     * Paginates page numbers based on maxSize items per page.\n     */\n    NgbPagination.prototype._applyPagination = function () {\n        var page = Math.ceil(this.page / this.maxSize) - 1;\n        var start = page * this.maxSize;\n        var end = start + this.maxSize;\n        return [start, end];\n    };\n    NgbPagination.prototype._setPageInRange = function (newPageNo) {\n        var prevPageNo = this.page;\n        this.page = getValueInRange(newPageNo, this.pageCount, 1);\n        if (this.page !== prevPageNo && isNumber(this.collectionSize)) {\n            this.pageChange.emit(this.page);\n        }\n    };\n    NgbPagination.prototype._updatePages = function (newPage) {\n        var _a, _b;\n        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n        if (!isNumber(this.pageCount)) {\n            this.pageCount = 0;\n        }\n        // fill-in model needed to render pages\n        this.pages.length = 0;\n        for (var i = 1; i <= this.pageCount; i++) {\n            this.pages.push(i);\n        }\n        // set page within 1..max range\n        this._setPageInRange(newPage);\n        // apply maxSize if necessary\n        if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n            var start = 0;\n            var end = this.pageCount;\n            // either paginating or rotating page numbers\n            if (this.rotate) {\n                _a = __read(this._applyRotation(), 2), start = _a[0], end = _a[1];\n            }\n            else {\n                _b = __read(this._applyPagination(), 2), start = _b[0], end = _b[1];\n            }\n            this.pages = this.pages.slice(start, end);\n            // adding ellipses\n            this._applyEllipses(start, end);\n        }\n    };\n    NgbPagination.ctorParameters = function () { return [\n        { type: NgbPaginationConfig }\n    ]; };\n    __decorate([\n        ContentChild(NgbPaginationEllipsis, { static: false })\n    ], NgbPagination.prototype, \"tplEllipsis\", void 0);\n    __decorate([\n        ContentChild(NgbPaginationFirst, { static: false })\n    ], NgbPagination.prototype, \"tplFirst\", void 0);\n    __decorate([\n        ContentChild(NgbPaginationLast, { static: false })\n    ], NgbPagination.prototype, \"tplLast\", void 0);\n    __decorate([\n        ContentChild(NgbPaginationNext, { static: false })\n    ], NgbPagination.prototype, \"tplNext\", void 0);\n    __decorate([\n        ContentChild(NgbPaginationNumber, { static: false })\n    ], NgbPagination.prototype, \"tplNumber\", void 0);\n    __decorate([\n        ContentChild(NgbPaginationPrevious, { static: false })\n    ], NgbPagination.prototype, \"tplPrevious\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"disabled\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"boundaryLinks\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"directionLinks\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"ellipses\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"rotate\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"collectionSize\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"maxSize\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"page\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"pageSize\", void 0);\n    __decorate([\n        Output()\n    ], NgbPagination.prototype, \"pageChange\", void 0);\n    __decorate([\n        Input()\n    ], NgbPagination.prototype, \"size\", void 0);\n    NgbPagination = __decorate([\n        Component({\n            selector: 'ngb-pagination',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            host: { 'role': 'navigation' },\n            template: \"\\n    <ng-template #first><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.first\\\">&laquo;&laquo;</span></ng-template>\\n    <ng-template #previous><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.previous\\\">&laquo;</span></ng-template>\\n    <ng-template #next><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.next\\\">&raquo;</span></ng-template>\\n    <ng-template #last><span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.last\\\">&raquo;&raquo;</span></ng-template>\\n    <ng-template #ellipsis>...</ng-template>\\n    <ng-template #defaultNumber let-page let-currentPage=\\\"currentPage\\\">\\n      {{ page }}\\n      <span *ngIf=\\\"page === currentPage\\\" class=\\\"sr-only\\\">(current)</span>\\n    </ng-template>\\n    <ul [class]=\\\"'pagination' + (size ? ' pagination-' + size : '')\\\">\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"previousDisabled()\\\">\\n        <a aria-label=\\\"First\\\" i18n-aria-label=\\\"@@ngb.pagination.first-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(1); $event.preventDefault()\\\" [attr.tabindex]=\\\"previousDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"previousDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplFirst?.templateRef || first\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: previousDisabled(), currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"previousDisabled()\\\">\\n        <a aria-label=\\\"Previous\\\" i18n-aria-label=\\\"@@ngb.pagination.previous-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(page-1); $event.preventDefault()\\\" [attr.tabindex]=\\\"previousDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"previousDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplPrevious?.templateRef || previous\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: previousDisabled()}\\\"></ng-template>\\n        </a>\\n      </li>\\n      <li *ngFor=\\\"let pageNumber of pages\\\" class=\\\"page-item\\\" [class.active]=\\\"pageNumber === page\\\"\\n        [class.disabled]=\\\"isEllipsis(pageNumber) || disabled\\\" [attr.aria-current]=\\\"(pageNumber === page ? 'page' : null)\\\">\\n        <a *ngIf=\\\"isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" tabindex=\\\"-1\\\" aria-disabled=\\\"true\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplEllipsis?.templateRef || ellipsis\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: true, currentPage: page}\\\"></ng-template>\\n        </a>\\n        <a *ngIf=\\\"!isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" href (click)=\\\"selectPage(pageNumber); $event.preventDefault()\\\"\\n          [attr.tabindex]=\\\"disabled ? '-1' : null\\\" [attr.aria-disabled]=\\\"disabled ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplNumber?.templateRef || defaultNumber\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: disabled, $implicit: pageNumber, currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"nextDisabled()\\\">\\n        <a aria-label=\\\"Next\\\" i18n-aria-label=\\\"@@ngb.pagination.next-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(page+1); $event.preventDefault()\\\" [attr.tabindex]=\\\"nextDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"nextDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplNext?.templateRef || next\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: nextDisabled(), currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"nextDisabled()\\\">\\n        <a aria-label=\\\"Last\\\" i18n-aria-label=\\\"@@ngb.pagination.last-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(pageCount); $event.preventDefault()\\\" [attr.tabindex]=\\\"nextDisabled() ? '-1' : null\\\"\\n          [attr.aria-disabled]=\\\"nextDisabled() ? 'true' : null\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tplLast?.templateRef || last\\\"\\n                       [ngTemplateOutletContext]=\\\"{disabled: nextDisabled(), currentPage: page}\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n  \"\n        })\n    ], NgbPagination);\n    return NgbPagination;\n}());\n\nvar DIRECTIVES = [\n    NgbPagination, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationNext, NgbPaginationNumber,\n    NgbPaginationPrevious\n];\nvar NgbPaginationModule = /** @class */ (function () {\n    function NgbPaginationModule() {\n    }\n    NgbPaginationModule = __decorate([\n        NgModule({ declarations: DIRECTIVES, exports: DIRECTIVES, imports: [CommonModule] })\n    ], NgbPaginationModule);\n    return NgbPaginationModule;\n}());\n\nvar Trigger = /** @class */ (function () {\n    function Trigger(open, close) {\n        this.open = open;\n        this.close = close;\n        if (!close) {\n            this.close = open;\n        }\n    }\n    Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };\n    return Trigger;\n}());\nvar DEFAULT_ALIASES = {\n    'hover': ['mouseenter', 'mouseleave'],\n    'focus': ['focusin', 'focusout'],\n};\nfunction parseTriggers(triggers, aliases) {\n    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }\n    var trimmedTriggers = (triggers || '').trim();\n    if (trimmedTriggers.length === 0) {\n        return [];\n    }\n    var parsedTriggers = trimmedTriggers.split(/\\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {\n        var alias = aliases[triggerPair[0]] || triggerPair;\n        return new Trigger(alias[0], alias[1]);\n    });\n    var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });\n    if (manualTriggers.length > 1) {\n        throw 'Triggers parse error: only one manual trigger is allowed';\n    }\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n        throw 'Triggers parse error: manual trigger can\\'t be mixed with other triggers';\n    }\n    return parsedTriggers;\n}\nfunction observeTriggers(renderer, nativeElement, triggers, isOpenedFn) {\n    return new Observable(function (subscriber) {\n        var listeners = [];\n        var openFn = function () { return subscriber.next(true); };\n        var closeFn = function () { return subscriber.next(false); };\n        var toggleFn = function () { return subscriber.next(!isOpenedFn()); };\n        triggers.forEach(function (trigger) {\n            if (trigger.open === trigger.close) {\n                listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));\n            }\n            else {\n                listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));\n            }\n        });\n        return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };\n    });\n}\nvar delayOrNoop = function (time) { return time > 0 ? delay(time) : function (a) { return a; }; };\nvar …µ0$3 = delayOrNoop;\nfunction triggerDelay(openDelay, closeDelay, isOpenedFn) {\n    return function (input$) {\n        var pending = null;\n        var filteredInput$ = input$.pipe(map(function (open) { return ({ open: open }); }), filter(function (event) {\n            var currentlyOpen = isOpenedFn();\n            if (currentlyOpen !== event.open && (!pending || pending.open === currentlyOpen)) {\n                pending = event;\n                return true;\n            }\n            if (pending && pending.open !== event.open) {\n                pending = null;\n            }\n            return false;\n        }), share());\n        var delayedOpen$ = filteredInput$.pipe(filter(function (event) { return event.open; }), delayOrNoop(openDelay));\n        var delayedClose$ = filteredInput$.pipe(filter(function (event) { return !event.open; }), delayOrNoop(closeDelay));\n        return merge(delayedOpen$, delayedClose$)\n            .pipe(filter(function (event) {\n            if (event === pending) {\n                pending = null;\n                return event.open !== isOpenedFn();\n            }\n            return false;\n        }), map(function (event) { return event.open; }));\n    };\n}\nfunction listenToTriggers(renderer, nativeElement, triggers, isOpenedFn, openFn, closeFn, openDelay, closeDelay) {\n    if (openDelay === void 0) { openDelay = 0; }\n    if (closeDelay === void 0) { closeDelay = 0; }\n    var parsedTriggers = parseTriggers(triggers);\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return function () { };\n    }\n    var subscription = observeTriggers(renderer, nativeElement, parsedTriggers, isOpenedFn)\n        .pipe(triggerDelay(openDelay, closeDelay, isOpenedFn))\n        .subscribe(function (open) { return (open ? openFn() : closeFn()); });\n    return function () { return subscription.unsubscribe(); };\n}\n\n/**\n * A configuration service for the [`NgbPopover`](#/components/popover/api#NgbPopover) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the popovers used in the application.\n */\nvar NgbPopoverConfig = /** @class */ (function () {\n    function NgbPopoverConfig() {\n        this.autoClose = true;\n        this.placement = 'auto';\n        this.triggers = 'click';\n        this.disablePopover = false;\n        this.openDelay = 0;\n        this.closeDelay = 0;\n    }\n    NgbPopoverConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbPopoverConfig_Factory() { return new NgbPopoverConfig(); }, token: NgbPopoverConfig, providedIn: \"root\" });\n    NgbPopoverConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbPopoverConfig);\n    return NgbPopoverConfig;\n}());\n\nvar nextId$3 = 0;\nvar NgbPopoverWindow = /** @class */ (function () {\n    function NgbPopoverWindow() {\n    }\n    NgbPopoverWindow.prototype.isTitleTemplate = function () { return this.title instanceof TemplateRef; };\n    __decorate([\n        Input()\n    ], NgbPopoverWindow.prototype, \"title\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopoverWindow.prototype, \"id\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopoverWindow.prototype, \"popoverClass\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopoverWindow.prototype, \"context\", void 0);\n    NgbPopoverWindow = __decorate([\n        Component({\n            selector: 'ngb-popover-window',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            host: { '[class]': '\"popover\" + (popoverClass ? \" \" + popoverClass : \"\")', 'role': 'tooltip', '[id]': 'id' },\n            template: \"\\n    <div class=\\\"arrow\\\"></div>\\n    <h3 class=\\\"popover-header\\\" *ngIf=\\\"title != null\\\">\\n      <ng-template #simpleTitle>{{title}}</ng-template>\\n      <ng-template [ngTemplateOutlet]=\\\"isTitleTemplate() ? $any(title) : simpleTitle\\\" [ngTemplateOutletContext]=\\\"context\\\"></ng-template>\\n    </h3>\\n    <div class=\\\"popover-body\\\"><ng-content></ng-content></div>\",\n            styles: [\"ngb-popover-window.bs-popover-bottom>.arrow,ngb-popover-window.bs-popover-top>.arrow{left:50%;margin-left:-.5rem}ngb-popover-window.bs-popover-bottom-left>.arrow,ngb-popover-window.bs-popover-top-left>.arrow{left:2em}ngb-popover-window.bs-popover-bottom-right>.arrow,ngb-popover-window.bs-popover-top-right>.arrow{left:auto;right:2em}ngb-popover-window.bs-popover-left>.arrow,ngb-popover-window.bs-popover-right>.arrow{top:50%;margin-top:-.5rem}ngb-popover-window.bs-popover-left-top>.arrow,ngb-popover-window.bs-popover-right-top>.arrow{top:.7em}ngb-popover-window.bs-popover-left-bottom>.arrow,ngb-popover-window.bs-popover-right-bottom>.arrow{top:auto;bottom:.7em}\"]\n        })\n    ], NgbPopoverWindow);\n    return NgbPopoverWindow;\n}());\n/**\n * A lightweight and extensible directive for fancy popover creation.\n */\nvar NgbPopover = /** @class */ (function () {\n    function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._changeDetector = _changeDetector;\n        /**\n         * An event emitted when the popover is shown. Contains no payload.\n         */\n        this.shown = new EventEmitter();\n        /**\n         * An event emitted when the popover is hidden. Contains no payload.\n         */\n        this.hidden = new EventEmitter();\n        this._ngbPopoverWindowId = \"ngb-popover-\" + nextId$3++;\n        this._windowRef = null;\n        this.autoClose = config.autoClose;\n        this.placement = config.placement;\n        this.triggers = config.triggers;\n        this.container = config.container;\n        this.disablePopover = config.disablePopover;\n        this.popoverClass = config.popoverClass;\n        this.openDelay = config.openDelay;\n        this.closeDelay = config.closeDelay;\n        this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () {\n            if (_this._windowRef) {\n                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body', 'bs-popover');\n            }\n        });\n    }\n    NgbPopover.prototype._isDisabled = function () {\n        if (this.disablePopover) {\n            return true;\n        }\n        if (!this.ngbPopover && !this.popoverTitle) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Opens the popover.\n     *\n     * This is considered to be a \"manual\" triggering.\n     * The `context` is an optional value to be injected into the popover template when it is created.\n     */\n    NgbPopover.prototype.open = function (context) {\n        var _this = this;\n        if (!this._windowRef && !this._isDisabled()) {\n            this._windowRef = this._popupService.open(this.ngbPopover, context);\n            this._windowRef.instance.title = this.popoverTitle;\n            this._windowRef.instance.context = context;\n            this._windowRef.instance.popoverClass = this.popoverClass;\n            this._windowRef.instance.id = this._ngbPopoverWindowId;\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);\n            if (this.container === 'body') {\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n            // We need to detect changes, because we don't know where .open() might be called from.\n            // Ex. opening popover from one of lifecycle hooks that run after the CD\n            // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception\n            this._windowRef.changeDetectorRef.detectChanges();\n            // We need to mark for check, because popover won't work inside the OnPush component.\n            // Ex. when we use expression like `{{ popover.isOpen() : 'opened' : 'closed' }}`\n            // inside the template of an OnPush component and we change the popover from\n            // open -> closed, the expression in question won't be updated unless we explicitly\n            // mark the parent component to be checked.\n            this._windowRef.changeDetectorRef.markForCheck();\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, function () { return _this.close(); }, this.hidden, [this._windowRef.location.nativeElement]);\n            this.shown.emit();\n        }\n    };\n    /**\n     * Closes the popover.\n     *\n     * This is considered to be a \"manual\" triggering of the popover.\n     */\n    NgbPopover.prototype.close = function () {\n        if (this._windowRef) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n            this._popupService.close();\n            this._windowRef = null;\n            this.hidden.emit();\n            this._changeDetector.markForCheck();\n        }\n    };\n    /**\n     * Toggles the popover.\n     *\n     * This is considered to be a \"manual\" triggering of the popover.\n     */\n    NgbPopover.prototype.toggle = function () {\n        if (this._windowRef) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * Returns `true`, if the popover is currently shown.\n     */\n    NgbPopover.prototype.isOpen = function () { return this._windowRef != null; };\n    NgbPopover.prototype.ngOnInit = function () {\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);\n    };\n    NgbPopover.prototype.ngOnChanges = function (_a) {\n        var ngbPopover = _a.ngbPopover, popoverTitle = _a.popoverTitle, disablePopover = _a.disablePopover, popoverClass = _a.popoverClass;\n        if (popoverClass && this.isOpen()) {\n            this._windowRef.instance.popoverClass = popoverClass.currentValue;\n        }\n        // close popover if title and content become empty, or disablePopover set to true\n        if ((ngbPopover || popoverTitle || disablePopover) && this._isDisabled()) {\n            this.close();\n        }\n    };\n    NgbPopover.prototype.ngOnDestroy = function () {\n        this.close();\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\n        if (this._unregisterListenersFn) {\n            this._unregisterListenersFn();\n        }\n        this._zoneSubscription.unsubscribe();\n    };\n    NgbPopover.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: NgbPopoverConfig },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ChangeDetectorRef },\n        { type: ApplicationRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"autoClose\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"ngbPopover\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"popoverTitle\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"placement\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"triggers\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"container\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"disablePopover\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"popoverClass\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"openDelay\", void 0);\n    __decorate([\n        Input()\n    ], NgbPopover.prototype, \"closeDelay\", void 0);\n    __decorate([\n        Output()\n    ], NgbPopover.prototype, \"shown\", void 0);\n    __decorate([\n        Output()\n    ], NgbPopover.prototype, \"hidden\", void 0);\n    NgbPopover = __decorate([\n        Directive({ selector: '[ngbPopover]', exportAs: 'ngbPopover' }),\n        __param(7, Inject(DOCUMENT))\n    ], NgbPopover);\n    return NgbPopover;\n}());\n\nvar NgbPopoverModule = /** @class */ (function () {\n    function NgbPopoverModule() {\n    }\n    NgbPopoverModule = __decorate([\n        NgModule({\n            declarations: [NgbPopover, NgbPopoverWindow],\n            exports: [NgbPopover],\n            imports: [CommonModule],\n            entryComponents: [NgbPopoverWindow]\n        })\n    ], NgbPopoverModule);\n    return NgbPopoverModule;\n}());\n\n/**\n * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the progress bars used in the application.\n */\nvar NgbProgressbarConfig = /** @class */ (function () {\n    function NgbProgressbarConfig() {\n        this.max = 100;\n        this.animated = false;\n        this.striped = false;\n        this.showValue = false;\n    }\n    NgbProgressbarConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: \"root\" });\n    NgbProgressbarConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbProgressbarConfig);\n    return NgbProgressbarConfig;\n}());\n\n/**\n * A directive that provides feedback on the progress of a workflow or an action.\n */\nvar NgbProgressbar = /** @class */ (function () {\n    function NgbProgressbar(config) {\n        /**\n         * The current value for the progress bar.\n         *\n         * Should be in the `[0, max]` range.\n         */\n        this.value = 0;\n        this.max = config.max;\n        this.animated = config.animated;\n        this.striped = config.striped;\n        this.textType = config.textType;\n        this.type = config.type;\n        this.showValue = config.showValue;\n        this.height = config.height;\n    }\n    Object.defineProperty(NgbProgressbar.prototype, \"max\", {\n        get: function () { return this._max; },\n        /**\n         * The maximal value to be displayed in the progress bar.\n         *\n         * Should be a positive number. Will default to 100 otherwise.\n         */\n        set: function (max) {\n            this._max = !isNumber(max) || max <= 0 ? 100 : max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbProgressbar.prototype.getValue = function () { return getValueInRange(this.value, this.max); };\n    NgbProgressbar.prototype.getPercentValue = function () { return 100 * this.getValue() / this.max; };\n    NgbProgressbar.ctorParameters = function () { return [\n        { type: NgbProgressbarConfig }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"max\", null);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"animated\", void 0);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"striped\", void 0);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"showValue\", void 0);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"textType\", void 0);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"type\", void 0);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"value\", void 0);\n    __decorate([\n        Input()\n    ], NgbProgressbar.prototype, \"height\", void 0);\n    NgbProgressbar = __decorate([\n        Component({\n            selector: 'ngb-progressbar',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <div class=\\\"progress\\\" [style.height]=\\\"height\\\">\\n      <div class=\\\"progress-bar{{type ? ' bg-' + type : ''}}{{textType ? ' text-' + textType : ''}}\\n      {{animated ? ' progress-bar-animated' : ''}}{{striped ? ' progress-bar-striped' : ''}}\\\"\\n      role=\\\"progressbar\\\" [style.width.%]=\\\"getPercentValue()\\\"\\n      [attr.aria-valuenow]=\\\"getValue()\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"max\\\">\\n        <span *ngIf=\\\"showValue\\\" i18n=\\\"@@ngb.progressbar.value\\\">{{getValue() / max | percent}}</span><ng-content></ng-content>\\n      </div>\\n    </div>\\n  \"\n        })\n    ], NgbProgressbar);\n    return NgbProgressbar;\n}());\n\nvar NgbProgressbarModule = /** @class */ (function () {\n    function NgbProgressbarModule() {\n    }\n    NgbProgressbarModule = __decorate([\n        NgModule({ declarations: [NgbProgressbar], exports: [NgbProgressbar], imports: [CommonModule] })\n    ], NgbProgressbarModule);\n    return NgbProgressbarModule;\n}());\n\n/**\n * A configuration service for the [`NgbRating`](#/components/rating/api#NgbRating) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ratings used in the application.\n */\nvar NgbRatingConfig = /** @class */ (function () {\n    function NgbRatingConfig() {\n        this.max = 10;\n        this.readonly = false;\n        this.resettable = false;\n    }\n    NgbRatingConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbRatingConfig_Factory() { return new NgbRatingConfig(); }, token: NgbRatingConfig, providedIn: \"root\" });\n    NgbRatingConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbRatingConfig);\n    return NgbRatingConfig;\n}());\n\nvar NGB_RATING_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbRating; }),\n    multi: true\n};\n/**\n * A directive that helps visualising and interacting with a star rating bar.\n */\nvar NgbRating = /** @class */ (function () {\n    function NgbRating(config, _changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this.contexts = [];\n        this.disabled = false;\n        /**\n         * An event emitted when the user is hovering over a given rating.\n         *\n         * Event payload equals to the rating being hovered over.\n         */\n        this.hover = new EventEmitter();\n        /**\n         * An event emitted when the user stops hovering over a given rating.\n         *\n         * Event payload equals to the rating of the last item being hovered over.\n         */\n        this.leave = new EventEmitter();\n        /**\n         * An event emitted when the user selects a new rating.\n         *\n         * Event payload equals to the newly selected rating.\n         */\n        this.rateChange = new EventEmitter(true);\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this.max = config.max;\n        this.readonly = config.readonly;\n    }\n    NgbRating.prototype.ariaValueText = function () { return this.nextRate + \" out of \" + this.max; };\n    NgbRating.prototype.enter = function (value) {\n        if (!this.readonly && !this.disabled) {\n            this._updateState(value);\n        }\n        this.hover.emit(value);\n    };\n    NgbRating.prototype.handleBlur = function () { this.onTouched(); };\n    NgbRating.prototype.handleClick = function (value) {\n        if (!this.readonly && !this.disabled) {\n            this.update(this.resettable && this.rate === value ? 0 : value);\n        }\n    };\n    NgbRating.prototype.handleKeyDown = function (event) {\n        // tslint:disable-next-line:deprecation\n        switch (event.which) {\n            case Key.ArrowDown:\n            case Key.ArrowLeft:\n                this.update(this.rate - 1);\n                break;\n            case Key.ArrowUp:\n            case Key.ArrowRight:\n                this.update(this.rate + 1);\n                break;\n            case Key.Home:\n                this.update(0);\n                break;\n            case Key.End:\n                this.update(this.max);\n                break;\n            default:\n                return;\n        }\n        // note 'return' in default case\n        event.preventDefault();\n    };\n    NgbRating.prototype.ngOnChanges = function (changes) {\n        if (changes['rate']) {\n            this.update(this.rate);\n        }\n    };\n    NgbRating.prototype.ngOnInit = function () {\n        this.contexts = Array.from({ length: this.max }, function (v, k) { return ({ fill: 0, index: k }); });\n        this._updateState(this.rate);\n    };\n    NgbRating.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    NgbRating.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    NgbRating.prototype.reset = function () {\n        this.leave.emit(this.nextRate);\n        this._updateState(this.rate);\n    };\n    NgbRating.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };\n    NgbRating.prototype.update = function (value, internalChange) {\n        if (internalChange === void 0) { internalChange = true; }\n        var newRate = getValueInRange(value, this.max, 0);\n        if (!this.readonly && !this.disabled && this.rate !== newRate) {\n            this.rate = newRate;\n            this.rateChange.emit(this.rate);\n        }\n        if (internalChange) {\n            this.onChange(this.rate);\n            this.onTouched();\n        }\n        this._updateState(this.rate);\n    };\n    NgbRating.prototype.writeValue = function (value) {\n        this.update(value, false);\n        this._changeDetectorRef.markForCheck();\n    };\n    NgbRating.prototype._getFillValue = function (index) {\n        var diff = this.nextRate - index;\n        if (diff >= 1) {\n            return 100;\n        }\n        if (diff < 1 && diff > 0) {\n            return parseInt((diff * 100).toFixed(2), 10);\n        }\n        return 0;\n    };\n    NgbRating.prototype._updateState = function (nextValue) {\n        var _this = this;\n        this.nextRate = nextValue;\n        this.contexts.forEach(function (context, index) { return context.fill = _this._getFillValue(index); });\n    };\n    NgbRating.ctorParameters = function () { return [\n        { type: NgbRatingConfig },\n        { type: ChangeDetectorRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbRating.prototype, \"max\", void 0);\n    __decorate([\n        Input()\n    ], NgbRating.prototype, \"rate\", void 0);\n    __decorate([\n        Input()\n    ], NgbRating.prototype, \"readonly\", void 0);\n    __decorate([\n        Input()\n    ], NgbRating.prototype, \"resettable\", void 0);\n    __decorate([\n        Input()\n    ], NgbRating.prototype, \"starTemplate\", void 0);\n    __decorate([\n        ContentChild(TemplateRef, { static: false })\n    ], NgbRating.prototype, \"starTemplateFromContent\", void 0);\n    __decorate([\n        Output()\n    ], NgbRating.prototype, \"hover\", void 0);\n    __decorate([\n        Output()\n    ], NgbRating.prototype, \"leave\", void 0);\n    __decorate([\n        Output()\n    ], NgbRating.prototype, \"rateChange\", void 0);\n    NgbRating = __decorate([\n        Component({\n            selector: 'ngb-rating',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            host: {\n                'class': 'd-inline-flex',\n                '[tabindex]': 'disabled ? -1 : 0',\n                'role': 'slider',\n                'aria-valuemin': '0',\n                '[attr.aria-valuemax]': 'max',\n                '[attr.aria-valuenow]': 'nextRate',\n                '[attr.aria-valuetext]': 'ariaValueText()',\n                '[attr.aria-disabled]': 'readonly ? true : null',\n                '(blur)': 'handleBlur()',\n                '(keydown)': 'handleKeyDown($event)',\n                '(mouseleave)': 'reset()'\n            },\n            template: \"\\n    <ng-template #t let-fill=\\\"fill\\\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"contexts\\\" let-index=\\\"index\\\">\\n      <span class=\\\"sr-only\\\">({{ index < nextRate ? '*' : ' ' }})</span>\\n      <span (mouseenter)=\\\"enter(index + 1)\\\" (click)=\\\"handleClick(index + 1)\\\" [style.cursor]=\\\"readonly || disabled ? 'default' : 'pointer'\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"starTemplate || starTemplateFromContent || t\\\" [ngTemplateOutletContext]=\\\"contexts[index]\\\">\\n        </ng-template>\\n      </span>\\n    </ng-template>\\n  \",\n            providers: [NGB_RATING_VALUE_ACCESSOR]\n        })\n    ], NgbRating);\n    return NgbRating;\n}());\n\nvar NgbRatingModule = /** @class */ (function () {\n    function NgbRatingModule() {\n    }\n    NgbRatingModule = __decorate([\n        NgModule({ declarations: [NgbRating], exports: [NgbRating], imports: [CommonModule] })\n    ], NgbRatingModule);\n    return NgbRatingModule;\n}());\n\n/**\n * A configuration service for the [`NgbTabset`](#/components/tabset/api#NgbTabset) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the tabsets used in the application.\n *\n * @deprecated 6.0.0 Please use NgbNav instead\n */\nvar NgbTabsetConfig = /** @class */ (function () {\n    function NgbTabsetConfig() {\n        this.justify = 'start';\n        this.orientation = 'horizontal';\n        this.type = 'tabs';\n    }\n    NgbTabsetConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbTabsetConfig_Factory() { return new NgbTabsetConfig(); }, token: NgbTabsetConfig, providedIn: \"root\" });\n    NgbTabsetConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbTabsetConfig);\n    return NgbTabsetConfig;\n}());\n\nvar nextId$4 = 0;\n/**\n * A directive to wrap tab titles that need to contain HTML markup or other directives.\n *\n * Alternatively you could use the `NgbTab.title` input for string titles.\n *\n * @deprecated 6.0.0 Please use NgbNav instead\n */\nvar NgbTabTitle = /** @class */ (function () {\n    function NgbTabTitle(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbTabTitle.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbTabTitle = __decorate([\n        Directive({ selector: 'ng-template[ngbTabTitle]' })\n    ], NgbTabTitle);\n    return NgbTabTitle;\n}());\n/**\n * A directive to wrap content to be displayed in a tab.\n *\n * @deprecated 6.0.0 Please use NgbNav instead\n */\nvar NgbTabContent = /** @class */ (function () {\n    function NgbTabContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbTabContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbTabContent = __decorate([\n        Directive({ selector: 'ng-template[ngbTabContent]' })\n    ], NgbTabContent);\n    return NgbTabContent;\n}());\n/**\n * A directive representing an individual tab.\n *\n * @deprecated 6.0.0 Please use NgbNav instead\n */\nvar NgbTab = /** @class */ (function () {\n    function NgbTab() {\n        /**\n         * The tab identifier.\n         *\n         * Must be unique for the entire document for proper accessibility support.\n         */\n        this.id = \"ngb-tab-\" + nextId$4++;\n        /**\n         * If `true`, the current tab is disabled and can't be toggled.\n         */\n        this.disabled = false;\n    }\n    NgbTab.prototype.ngAfterContentChecked = function () {\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\n        // only @ContentChildren allows us to specify the {descendants: false} option.\n        // Without {descendants: false} we are hitting bugs described in:\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n        this.titleTpl = this.titleTpls.first;\n        this.contentTpl = this.contentTpls.first;\n    };\n    __decorate([\n        Input()\n    ], NgbTab.prototype, \"id\", void 0);\n    __decorate([\n        Input()\n    ], NgbTab.prototype, \"title\", void 0);\n    __decorate([\n        Input()\n    ], NgbTab.prototype, \"disabled\", void 0);\n    __decorate([\n        ContentChildren(NgbTabTitle, { descendants: false })\n    ], NgbTab.prototype, \"titleTpls\", void 0);\n    __decorate([\n        ContentChildren(NgbTabContent, { descendants: false })\n    ], NgbTab.prototype, \"contentTpls\", void 0);\n    NgbTab = __decorate([\n        Directive({ selector: 'ngb-tab' })\n    ], NgbTab);\n    return NgbTab;\n}());\n/**\n * A component that makes it easy to create tabbed interface.\n *\n * @deprecated 6.0.0 Please use NgbNav instead\n */\nvar NgbTabset = /** @class */ (function () {\n    function NgbTabset(config) {\n        /**\n         * If `true`, non-visible tabs content will be removed from DOM. Otherwise it will just be hidden.\n         */\n        this.destroyOnHide = true;\n        /**\n         * A tab change event emitted right before the tab change happens.\n         *\n         * See [`NgbTabChangeEvent`](#/components/tabset/api#NgbTabChangeEvent) for payload details.\n         */\n        this.tabChange = new EventEmitter();\n        this.type = config.type;\n        this.justify = config.justify;\n        this.orientation = config.orientation;\n    }\n    Object.defineProperty(NgbTabset.prototype, \"justify\", {\n        /**\n         * The horizontal alignment of the tabs with flexbox utilities.\n         */\n        set: function (className) {\n            if (className === 'fill' || className === 'justified') {\n                this.justifyClass = \"nav-\" + className;\n            }\n            else {\n                this.justifyClass = \"justify-content-\" + className;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects the tab with the given id and shows its associated content panel.\n     *\n     * Any other tab that was previously selected becomes unselected and its associated pane is removed from DOM or\n     * hidden depending on the `destroyOnHide` value.\n     */\n    NgbTabset.prototype.select = function (tabId) {\n        var selectedTab = this._getTabById(tabId);\n        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\n            var defaultPrevented_1 = false;\n            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });\n            if (!defaultPrevented_1) {\n                this.activeId = selectedTab.id;\n            }\n        }\n    };\n    NgbTabset.prototype.ngAfterContentChecked = function () {\n        // auto-correct activeId that might have been set incorrectly as input\n        var activeTab = this._getTabById(this.activeId);\n        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\n    };\n    NgbTabset.prototype._getTabById = function (id) {\n        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });\n        return tabsWithId.length ? tabsWithId[0] : null;\n    };\n    NgbTabset.ctorParameters = function () { return [\n        { type: NgbTabsetConfig }\n    ]; };\n    __decorate([\n        ContentChildren(NgbTab)\n    ], NgbTabset.prototype, \"tabs\", void 0);\n    __decorate([\n        Input()\n    ], NgbTabset.prototype, \"activeId\", void 0);\n    __decorate([\n        Input()\n    ], NgbTabset.prototype, \"destroyOnHide\", void 0);\n    __decorate([\n        Input()\n    ], NgbTabset.prototype, \"justify\", null);\n    __decorate([\n        Input()\n    ], NgbTabset.prototype, \"orientation\", void 0);\n    __decorate([\n        Input()\n    ], NgbTabset.prototype, \"type\", void 0);\n    __decorate([\n        Output()\n    ], NgbTabset.prototype, \"tabChange\", void 0);\n    NgbTabset = __decorate([\n        Component({\n            selector: 'ngb-tabset',\n            exportAs: 'ngbTabset',\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <ul [class]=\\\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\\\" role=\\\"tablist\\\">\\n      <li class=\\\"nav-item\\\" *ngFor=\\\"let tab of tabs\\\">\\n        <a [id]=\\\"tab.id\\\" class=\\\"nav-link\\\" [class.active]=\\\"tab.id === activeId\\\" [class.disabled]=\\\"tab.disabled\\\"\\n          href (click)=\\\"select(tab.id); $event.preventDefault()\\\" role=\\\"tab\\\" [attr.tabindex]=\\\"(tab.disabled ? '-1': undefined)\\\"\\n          [attr.aria-controls]=\\\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\\\"\\n          [attr.aria-selected]=\\\"tab.id === activeId\\\" [attr.aria-disabled]=\\\"tab.disabled\\\">\\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\\\"tab.titleTpl?.templateRef || null\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n    <div class=\\\"tab-content\\\">\\n      <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n        <div\\n          class=\\\"tab-pane {{tab.id === activeId ? 'active' : null}}\\\"\\n          *ngIf=\\\"!destroyOnHide || tab.id === activeId\\\"\\n          role=\\\"tabpanel\\\"\\n          [attr.aria-labelledby]=\\\"tab.id\\\" id=\\\"{{tab.id}}-panel\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tab.contentTpl?.templateRef || null\\\"></ng-template>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \"\n        })\n    ], NgbTabset);\n    return NgbTabset;\n}());\n\nvar NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];\n/**\n * @deprecated 6.0.0 Please use NgbNavModule instead\n */\nvar NgbTabsetModule = /** @class */ (function () {\n    function NgbTabsetModule() {\n    }\n    NgbTabsetModule = __decorate([\n        NgModule({ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [CommonModule] })\n    ], NgbTabsetModule);\n    return NgbTabsetModule;\n}());\n\nvar NgbTime = /** @class */ (function () {\n    function NgbTime(hour, minute, second) {\n        this.hour = toInteger(hour);\n        this.minute = toInteger(minute);\n        this.second = toInteger(second);\n    }\n    NgbTime.prototype.changeHour = function (step) {\n        if (step === void 0) { step = 1; }\n        this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);\n    };\n    NgbTime.prototype.updateHour = function (hour) {\n        if (isNumber(hour)) {\n            this.hour = (hour < 0 ? 24 + hour : hour) % 24;\n        }\n        else {\n            this.hour = NaN;\n        }\n    };\n    NgbTime.prototype.changeMinute = function (step) {\n        if (step === void 0) { step = 1; }\n        this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);\n    };\n    NgbTime.prototype.updateMinute = function (minute) {\n        if (isNumber(minute)) {\n            this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;\n            this.changeHour(Math.floor(minute / 60));\n        }\n        else {\n            this.minute = NaN;\n        }\n    };\n    NgbTime.prototype.changeSecond = function (step) {\n        if (step === void 0) { step = 1; }\n        this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);\n    };\n    NgbTime.prototype.updateSecond = function (second) {\n        if (isNumber(second)) {\n            this.second = second < 0 ? 60 + second % 60 : second % 60;\n            this.changeMinute(Math.floor(second / 60));\n        }\n        else {\n            this.second = NaN;\n        }\n    };\n    NgbTime.prototype.isValid = function (checkSecs) {\n        if (checkSecs === void 0) { checkSecs = true; }\n        return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);\n    };\n    NgbTime.prototype.toString = function () { return (this.hour || 0) + \":\" + (this.minute || 0) + \":\" + (this.second || 0); };\n    return NgbTime;\n}());\n\n/**\n * A configuration service for the [`NgbTimepicker`](#/components/timepicker/api#NgbTimepicker) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the timepickers used in the application.\n */\nvar NgbTimepickerConfig = /** @class */ (function () {\n    function NgbTimepickerConfig() {\n        this.meridian = false;\n        this.spinners = true;\n        this.seconds = false;\n        this.hourStep = 1;\n        this.minuteStep = 1;\n        this.secondStep = 1;\n        this.disabled = false;\n        this.readonlyInputs = false;\n        this.size = 'medium';\n    }\n    NgbTimepickerConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbTimepickerConfig_Factory() { return new NgbTimepickerConfig(); }, token: NgbTimepickerConfig, providedIn: \"root\" });\n    NgbTimepickerConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbTimepickerConfig);\n    return NgbTimepickerConfig;\n}());\n\nfunction NGB_DATEPICKER_TIME_ADAPTER_FACTORY() {\n    return new NgbTimeStructAdapter();\n}\n/**\n * An abstract service that does the conversion between the internal timepicker `NgbTimeStruct` model and\n * any provided user time model `T`, ex. a string, a native date, etc.\n *\n * The adapter is used **only** for conversion when binding timepicker to a form control,\n * ex. `[(ngModel)]=\"userTimeModel\"`. Here `userTimeModel` can be of any type.\n *\n * The default timepicker implementation assumes we use `NgbTimeStruct` as a user model.\n *\n * See the [custom time adapter demo](#/components/timepicker/examples#adapter) for an example.\n *\n * @since 2.2.0\n */\nvar NgbTimeAdapter = /** @class */ (function () {\n    function NgbTimeAdapter() {\n    }\n    NgbTimeAdapter.…µprov = …µ…µdefineInjectable({ factory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY, token: NgbTimeAdapter, providedIn: \"root\" });\n    NgbTimeAdapter = __decorate([\n        Injectable({ providedIn: 'root', useFactory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY })\n    ], NgbTimeAdapter);\n    return NgbTimeAdapter;\n}());\nvar NgbTimeStructAdapter = /** @class */ (function (_super) {\n    __extends(NgbTimeStructAdapter, _super);\n    function NgbTimeStructAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     */\n    NgbTimeStructAdapter.prototype.fromModel = function (time) {\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\n            null;\n    };\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     */\n    NgbTimeStructAdapter.prototype.toModel = function (time) {\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\n            null;\n    };\n    NgbTimeStructAdapter = __decorate([\n        Injectable()\n    ], NgbTimeStructAdapter);\n    return NgbTimeStructAdapter;\n}(NgbTimeAdapter));\n\nfunction NGB_TIMEPICKER_I18N_FACTORY(locale) {\n    return new NgbTimepickerI18nDefault(locale);\n}\n/**\n * Type of the service supplying day periods (for example, 'AM' and 'PM') to NgbTimepicker component.\n * The default implementation of this service honors the Angular locale, and uses the registered locale data,\n * as explained in the Angular i18n guide.\n */\nvar NgbTimepickerI18n = /** @class */ (function () {\n    function NgbTimepickerI18n() {\n    }\n    NgbTimepickerI18n.…µprov = …µ…µdefineInjectable({ factory: function NgbTimepickerI18n_Factory() { return NGB_TIMEPICKER_I18N_FACTORY(…µ…µinject(LOCALE_ID)); }, token: NgbTimepickerI18n, providedIn: \"root\" });\n    NgbTimepickerI18n = __decorate([\n        Injectable({ providedIn: 'root', useFactory: NGB_TIMEPICKER_I18N_FACTORY, deps: [LOCALE_ID] })\n    ], NgbTimepickerI18n);\n    return NgbTimepickerI18n;\n}());\nvar NgbTimepickerI18nDefault = /** @class */ (function (_super) {\n    __extends(NgbTimepickerI18nDefault, _super);\n    function NgbTimepickerI18nDefault(locale) {\n        var _this = _super.call(this) || this;\n        _this._periods = getLocaleDayPeriods(locale, FormStyle.Standalone, TranslationWidth.Narrow);\n        return _this;\n    }\n    NgbTimepickerI18nDefault.prototype.getMorningPeriod = function () { return this._periods[0]; };\n    NgbTimepickerI18nDefault.prototype.getAfternoonPeriod = function () { return this._periods[1]; };\n    NgbTimepickerI18nDefault.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n    ]; };\n    NgbTimepickerI18nDefault = __decorate([\n        Injectable(),\n        __param(0, Inject(LOCALE_ID))\n    ], NgbTimepickerI18nDefault);\n    return NgbTimepickerI18nDefault;\n}(NgbTimepickerI18n));\n\nvar FILTER_REGEX = /[^0-9]/g;\nvar NGB_TIMEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbTimepicker; }),\n    multi: true\n};\n/**\n * A directive that helps with wth picking hours, minutes and seconds.\n */\nvar NgbTimepicker = /** @class */ (function () {\n    function NgbTimepicker(_config, _ngbTimeAdapter, _cd, i18n) {\n        this._config = _config;\n        this._ngbTimeAdapter = _ngbTimeAdapter;\n        this._cd = _cd;\n        this.i18n = i18n;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this.meridian = _config.meridian;\n        this.spinners = _config.spinners;\n        this.seconds = _config.seconds;\n        this.hourStep = _config.hourStep;\n        this.minuteStep = _config.minuteStep;\n        this.secondStep = _config.secondStep;\n        this.disabled = _config.disabled;\n        this.readonlyInputs = _config.readonlyInputs;\n        this.size = _config.size;\n    }\n    Object.defineProperty(NgbTimepicker.prototype, \"hourStep\", {\n        get: function () { return this._hourStep; },\n        /**\n         * The number of hours to add/subtract when clicking hour spinners.\n         */\n        set: function (step) {\n            this._hourStep = isInteger(step) ? step : this._config.hourStep;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbTimepicker.prototype, \"minuteStep\", {\n        get: function () { return this._minuteStep; },\n        /**\n         * The number of minutes to add/subtract when clicking minute spinners.\n         */\n        set: function (step) {\n            this._minuteStep = isInteger(step) ? step : this._config.minuteStep;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbTimepicker.prototype, \"secondStep\", {\n        get: function () { return this._secondStep; },\n        /**\n         * The number of seconds to add/subtract when clicking second spinners.\n         */\n        set: function (step) {\n            this._secondStep = isInteger(step) ? step : this._config.secondStep;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgbTimepicker.prototype.writeValue = function (value) {\n        var structValue = this._ngbTimeAdapter.fromModel(value);\n        this.model = structValue ? new NgbTime(structValue.hour, structValue.minute, structValue.second) : new NgbTime();\n        if (!this.seconds && (!structValue || !isNumber(structValue.second))) {\n            this.model.second = 0;\n        }\n        this._cd.markForCheck();\n    };\n    NgbTimepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    NgbTimepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    NgbTimepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };\n    NgbTimepicker.prototype.changeHour = function (step) {\n        this.model.changeHour(step);\n        this.propagateModelChange();\n    };\n    NgbTimepicker.prototype.changeMinute = function (step) {\n        this.model.changeMinute(step);\n        this.propagateModelChange();\n    };\n    NgbTimepicker.prototype.changeSecond = function (step) {\n        this.model.changeSecond(step);\n        this.propagateModelChange();\n    };\n    NgbTimepicker.prototype.updateHour = function (newVal) {\n        var isPM = this.model.hour >= 12;\n        var enteredHour = toInteger(newVal);\n        if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\n            this.model.updateHour(enteredHour + 12);\n        }\n        else {\n            this.model.updateHour(enteredHour);\n        }\n        this.propagateModelChange();\n    };\n    NgbTimepicker.prototype.updateMinute = function (newVal) {\n        this.model.updateMinute(toInteger(newVal));\n        this.propagateModelChange();\n    };\n    NgbTimepicker.prototype.updateSecond = function (newVal) {\n        this.model.updateSecond(toInteger(newVal));\n        this.propagateModelChange();\n    };\n    NgbTimepicker.prototype.toggleMeridian = function () {\n        if (this.meridian) {\n            this.changeHour(12);\n        }\n    };\n    NgbTimepicker.prototype.formatInput = function (input) { input.value = input.value.replace(FILTER_REGEX, ''); };\n    NgbTimepicker.prototype.formatHour = function (value) {\n        if (isNumber(value)) {\n            if (this.meridian) {\n                return padNumber(value % 12 === 0 ? 12 : value % 12);\n            }\n            else {\n                return padNumber(value % 24);\n            }\n        }\n        else {\n            return padNumber(NaN);\n        }\n    };\n    NgbTimepicker.prototype.formatMinSec = function (value) { return padNumber(isNumber(value) ? value : NaN); };\n    Object.defineProperty(NgbTimepicker.prototype, \"isSmallSize\", {\n        get: function () { return this.size === 'small'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbTimepicker.prototype, \"isLargeSize\", {\n        get: function () { return this.size === 'large'; },\n        enumerable: true,\n        configurable: true\n    });\n    NgbTimepicker.prototype.ngOnChanges = function (changes) {\n        if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\n            this.model.second = 0;\n            this.propagateModelChange(false);\n        }\n    };\n    NgbTimepicker.prototype.propagateModelChange = function (touched) {\n        if (touched === void 0) { touched = true; }\n        if (touched) {\n            this.onTouched();\n        }\n        if (this.model.isValid(this.seconds)) {\n            this.onChange(this._ngbTimeAdapter.toModel({ hour: this.model.hour, minute: this.model.minute, second: this.model.second }));\n        }\n        else {\n            this.onChange(this._ngbTimeAdapter.toModel(null));\n        }\n    };\n    NgbTimepicker.ctorParameters = function () { return [\n        { type: NgbTimepickerConfig },\n        { type: NgbTimeAdapter },\n        { type: ChangeDetectorRef },\n        { type: NgbTimepickerI18n }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"meridian\", void 0);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"spinners\", void 0);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"seconds\", void 0);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"hourStep\", null);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"minuteStep\", null);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"secondStep\", null);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"readonlyInputs\", void 0);\n    __decorate([\n        Input()\n    ], NgbTimepicker.prototype, \"size\", void 0);\n    NgbTimepicker = __decorate([\n        Component({\n            selector: 'ngb-timepicker',\n            encapsulation: ViewEncapsulation.None,\n            template: \"\\n    <fieldset [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n      <div class=\\\"ngb-tp\\\">\\n        <div class=\\\"ngb-tp-input-container ngb-tp-hour\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeHour(hourStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-hours\\\">Increment hours</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"ngb-tp-input form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\"\\n            [class.form-control-lg]=\\\"isLargeSize\\\"\\n            maxlength=\\\"2\\\" inputmode=\\\"numeric\\\" placeholder=\\\"HH\\\" i18n-placeholder=\\\"@@ngb.timepicker.HH\\\"\\n            [value]=\\\"formatHour(model?.hour)\\\" (change)=\\\"updateHour($any($event).target.value)\\\"\\n            [readOnly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Hours\\\" i18n-aria-label=\\\"@@ngb.timepicker.hours\\\"\\n            (input)=\\\"formatInput($any($event).target)\\\"\\n            (keydown.ArrowUp)=\\\"changeHour(hourStep); $event.preventDefault()\\\"\\n            (keydown.ArrowDown)=\\\"changeHour(-hourStep); $event.preventDefault()\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeHour(-hourStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-hours\\\">Decrement hours</span>\\n          </button>\\n        </div>\\n        <div class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div class=\\\"ngb-tp-input-container ngb-tp-minute\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeMinute(minuteStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-minutes\\\">Increment minutes</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"ngb-tp-input form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\"\\n            maxlength=\\\"2\\\" inputmode=\\\"numeric\\\" placeholder=\\\"MM\\\" i18n-placeholder=\\\"@@ngb.timepicker.MM\\\"\\n            [value]=\\\"formatMinSec(model?.minute)\\\" (change)=\\\"updateMinute($any($event).target.value)\\\"\\n            [readOnly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Minutes\\\" i18n-aria-label=\\\"@@ngb.timepicker.minutes\\\"\\n            (input)=\\\"formatInput($any($event).target)\\\"\\n            (keydown.ArrowUp)=\\\"changeMinute(minuteStep); $event.preventDefault()\\\"\\n            (keydown.ArrowDown)=\\\"changeMinute(-minuteStep); $event.preventDefault()\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeMinute(-minuteStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"  [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\"  i18n=\\\"@@ngb.timepicker.decrement-minutes\\\">Decrement minutes</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-input-container ngb-tp-second\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeSecond(secondStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-seconds\\\">Increment seconds</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"ngb-tp-input form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\"\\n            maxlength=\\\"2\\\" inputmode=\\\"numeric\\\" placeholder=\\\"SS\\\" i18n-placeholder=\\\"@@ngb.timepicker.SS\\\"\\n            [value]=\\\"formatMinSec(model?.second)\\\" (change)=\\\"updateSecond($any($event).target.value)\\\"\\n            [readOnly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Seconds\\\" i18n-aria-label=\\\"@@ngb.timepicker.seconds\\\"\\n            (input)=\\\"formatInput($any($event).target)\\\"\\n            (keydown.ArrowUp)=\\\"changeSecond(secondStep); $event.preventDefault()\\\"\\n            (keydown.ArrowDown)=\\\"changeSecond(-secondStep); $event.preventDefault()\\\">\\n          <button *ngIf=\\\"spinners\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" (click)=\\\"changeSecond(-secondStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"  [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron ngb-tp-chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-seconds\\\">Decrement seconds</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-spacer\\\"></div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-meridian\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\"\\n                  (click)=\\\"toggleMeridian()\\\">\\n            <ng-container *ngIf=\\\"model && model.hour >= 12; else am\\\"\\n                          i18n=\\\"@@ngb.timepicker.PM\\\">{{ i18n.getAfternoonPeriod() }}</ng-container>\\n            <ng-template #am i18n=\\\"@@ngb.timepicker.AM\\\">{{ i18n.getMorningPeriod() }}</ng-template>\\n          </button>\\n        </div>\\n      </div>\\n    </fieldset>\\n  \",\n            providers: [NGB_TIMEPICKER_VALUE_ACCESSOR],\n            styles: [\"ngb-timepicker{font-size:1rem}.ngb-tp{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-tp-input-container{width:4em}.ngb-tp-chevron::before{border-style:solid;border-width:.29em .29em 0 0;content:\\\"\\\";display:inline-block;height:.69em;left:.05em;position:relative;top:.15em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);vertical-align:middle;width:.69em}.ngb-tp-chevron.bottom:before{top:-.3em;-webkit-transform:rotate(135deg);transform:rotate(135deg)}.ngb-tp-input{text-align:center}.ngb-tp-hour,.ngb-tp-meridian,.ngb-tp-minute,.ngb-tp-second{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.ngb-tp-spacer{width:1em;text-align:center}\"]\n        })\n    ], NgbTimepicker);\n    return NgbTimepicker;\n}());\n\nvar NgbTimepickerModule = /** @class */ (function () {\n    function NgbTimepickerModule() {\n    }\n    NgbTimepickerModule = __decorate([\n        NgModule({ declarations: [NgbTimepicker], exports: [NgbTimepicker], imports: [CommonModule] })\n    ], NgbTimepickerModule);\n    return NgbTimepickerModule;\n}());\n\n/**\n * Configuration service for the NgbToast component. You can inject this service, typically in your root component,\n * and customize the values of its properties in order to provide default values for all the toasts used in the\n * application.\n *\n * @since 5.0.0\n */\nvar NgbToastConfig = /** @class */ (function () {\n    function NgbToastConfig() {\n        this.autohide = true;\n        this.delay = 500;\n        this.ariaLive = 'polite';\n    }\n    NgbToastConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: \"root\" });\n    NgbToastConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbToastConfig);\n    return NgbToastConfig;\n}());\n\n/**\n * This directive allows the usage of HTML markup or other directives\n * inside of the toast's header.\n *\n * @since 5.0.0\n */\nvar NgbToastHeader = /** @class */ (function () {\n    function NgbToastHeader() {\n    }\n    NgbToastHeader = __decorate([\n        Directive({ selector: '[ngbToastHeader]' })\n    ], NgbToastHeader);\n    return NgbToastHeader;\n}());\n/**\n * Toasts provide feedback messages as notifications to the user.\n * Goal is to mimic the push notifications available both on mobile and desktop operating systems.\n *\n * @since 5.0.0\n */\nvar NgbToast = /** @class */ (function () {\n    function NgbToast(ariaLive, config) {\n        this.ariaLive = ariaLive;\n        /**\n         * A template like `<ng-template ngbToastHeader></ng-template>` can be\n         * used in the projected content to allow markup usage.\n         */\n        this.contentHeaderTpl = null;\n        /**\n         * An event fired immediately when toast's `hide()` method has been called.\n         * It can only occur in 2 different scenarios:\n         * - `autohide` timeout fires\n         * - user clicks on a closing cross (&times)\n         *\n         * Additionally this output is purely informative. The toast won't disappear. It's up to the user to take care of\n         * that.\n         */\n        this.hideOutput = new EventEmitter();\n        if (this.ariaLive == null) {\n            this.ariaLive = config.ariaLive;\n        }\n        this.delay = config.delay;\n        this.autohide = config.autohide;\n    }\n    NgbToast.prototype.ngAfterContentInit = function () { this._init(); };\n    NgbToast.prototype.ngOnChanges = function (changes) {\n        if ('autohide' in changes) {\n            this._clearTimeout();\n            this._init();\n        }\n    };\n    NgbToast.prototype.hide = function () {\n        this._clearTimeout();\n        this.hideOutput.emit();\n    };\n    NgbToast.prototype._init = function () {\n        var _this = this;\n        if (this.autohide && !this._timeoutID) {\n            this._timeoutID = setTimeout(function () { return _this.hide(); }, this.delay);\n        }\n    };\n    NgbToast.prototype._clearTimeout = function () {\n        if (this._timeoutID) {\n            clearTimeout(this._timeoutID);\n            this._timeoutID = null;\n        }\n    };\n    NgbToast.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Attribute, args: ['aria-live',] }] },\n        { type: NgbToastConfig }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbToast.prototype, \"delay\", void 0);\n    __decorate([\n        Input()\n    ], NgbToast.prototype, \"autohide\", void 0);\n    __decorate([\n        Input()\n    ], NgbToast.prototype, \"header\", void 0);\n    __decorate([\n        ContentChild(NgbToastHeader, { read: TemplateRef, static: true })\n    ], NgbToast.prototype, \"contentHeaderTpl\", void 0);\n    __decorate([\n        Output('hide')\n    ], NgbToast.prototype, \"hideOutput\", void 0);\n    NgbToast = __decorate([\n        Component({\n            selector: 'ngb-toast',\n            exportAs: 'ngbToast',\n            encapsulation: ViewEncapsulation.None,\n            host: {\n                'role': 'alert',\n                '[attr.aria-live]': 'ariaLive',\n                'aria-atomic': 'true',\n                '[class.toast]': 'true',\n                '[class.show]': 'true',\n            },\n            template: \"\\n    <ng-template #headerTpl>\\n      <strong class=\\\"mr-auto\\\">{{header}}</strong>\\n    </ng-template>\\n    <ng-template [ngIf]=\\\"contentHeaderTpl || header\\\">\\n      <div class=\\\"toast-header\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"contentHeaderTpl || headerTpl\\\"></ng-template>\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" i18n-aria-label=\\\"@@ngb.toast.close-aria\\\" (click)=\\\"hide()\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    </ng-template>\\n    <div class=\\\"toast-body\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  \",\n            styles: [\".ngb-toasts{position:fixed;top:0;right:0;margin:.5em;z-index:1200}ngb-toast .toast-header .close{margin-left:auto;margin-bottom:.25rem}\"]\n        }),\n        __param(0, Attribute('aria-live'))\n    ], NgbToast);\n    return NgbToast;\n}());\n\nvar NgbToastModule = /** @class */ (function () {\n    function NgbToastModule() {\n    }\n    NgbToastModule = __decorate([\n        NgModule({ declarations: [NgbToast, NgbToastHeader], imports: [CommonModule], exports: [NgbToast, NgbToastHeader] })\n    ], NgbToastModule);\n    return NgbToastModule;\n}());\n\n/**\n * A configuration service for the [`NgbTooltip`](#/components/tooltip/api#NgbTooltip) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the tooltips used in the application.\n */\nvar NgbTooltipConfig = /** @class */ (function () {\n    function NgbTooltipConfig() {\n        this.autoClose = true;\n        this.placement = 'auto';\n        this.triggers = 'hover focus';\n        this.disableTooltip = false;\n        this.openDelay = 0;\n        this.closeDelay = 0;\n    }\n    NgbTooltipConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbTooltipConfig_Factory() { return new NgbTooltipConfig(); }, token: NgbTooltipConfig, providedIn: \"root\" });\n    NgbTooltipConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbTooltipConfig);\n    return NgbTooltipConfig;\n}());\n\nvar nextId$5 = 0;\nvar NgbTooltipWindow = /** @class */ (function () {\n    function NgbTooltipWindow() {\n    }\n    __decorate([\n        Input()\n    ], NgbTooltipWindow.prototype, \"id\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltipWindow.prototype, \"tooltipClass\", void 0);\n    NgbTooltipWindow = __decorate([\n        Component({\n            selector: 'ngb-tooltip-window',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            host: { '[class]': '\"tooltip show\" + (tooltipClass ? \" \" + tooltipClass : \"\")', 'role': 'tooltip', '[id]': 'id' },\n            template: \"<div class=\\\"arrow\\\"></div><div class=\\\"tooltip-inner\\\"><ng-content></ng-content></div>\",\n            styles: [\"ngb-tooltip-window.bs-tooltip-bottom .arrow,ngb-tooltip-window.bs-tooltip-top .arrow{left:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-bottom-left .arrow,ngb-tooltip-window.bs-tooltip-top-left .arrow{left:1em}ngb-tooltip-window.bs-tooltip-bottom-right .arrow,ngb-tooltip-window.bs-tooltip-top-right .arrow{left:auto;right:.8rem}ngb-tooltip-window.bs-tooltip-left .arrow,ngb-tooltip-window.bs-tooltip-right .arrow{top:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-left-top .arrow,ngb-tooltip-window.bs-tooltip-right-top .arrow{top:.4rem}ngb-tooltip-window.bs-tooltip-left-bottom .arrow,ngb-tooltip-window.bs-tooltip-right-bottom .arrow{top:auto;bottom:.4rem}\"]\n        })\n    ], NgbTooltipWindow);\n    return NgbTooltipWindow;\n}());\n/**\n * A lightweight and extensible directive for fancy tooltip creation.\n */\nvar NgbTooltip = /** @class */ (function () {\n    function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._changeDetector = _changeDetector;\n        /**\n         * An event emitted when the tooltip is shown. Contains no payload.\n         */\n        this.shown = new EventEmitter();\n        /**\n         * An event emitted when the popover is hidden. Contains no payload.\n         */\n        this.hidden = new EventEmitter();\n        this._ngbTooltipWindowId = \"ngb-tooltip-\" + nextId$5++;\n        this._windowRef = null;\n        this.autoClose = config.autoClose;\n        this.placement = config.placement;\n        this.triggers = config.triggers;\n        this.container = config.container;\n        this.disableTooltip = config.disableTooltip;\n        this.tooltipClass = config.tooltipClass;\n        this.openDelay = config.openDelay;\n        this.closeDelay = config.closeDelay;\n        this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () {\n            if (_this._windowRef) {\n                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body', 'bs-tooltip');\n            }\n        });\n    }\n    Object.defineProperty(NgbTooltip.prototype, \"ngbTooltip\", {\n        get: function () { return this._ngbTooltip; },\n        /**\n         * The string content or a `TemplateRef` for the content to be displayed in the tooltip.\n         *\n         * If the content if falsy, the tooltip won't open.\n         */\n        set: function (value) {\n            this._ngbTooltip = value;\n            if (!value && this._windowRef) {\n                this.close();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens the tooltip.\n     *\n     * This is considered to be a \"manual\" triggering.\n     * The `context` is an optional value to be injected into the tooltip template when it is created.\n     */\n    NgbTooltip.prototype.open = function (context) {\n        var _this = this;\n        if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {\n            this._windowRef = this._popupService.open(this._ngbTooltip, context);\n            this._windowRef.instance.tooltipClass = this.tooltipClass;\n            this._windowRef.instance.id = this._ngbTooltipWindowId;\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);\n            if (this.container === 'body') {\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n            // We need to detect changes, because we don't know where .open() might be called from.\n            // Ex. opening tooltip from one of lifecycle hooks that run after the CD\n            // (say from ngAfterViewInit) will result in 'ExpressionHasChanged' exception\n            this._windowRef.changeDetectorRef.detectChanges();\n            // We need to mark for check, because tooltip won't work inside the OnPush component.\n            // Ex. when we use expression like `{{ tooltip.isOpen() : 'opened' : 'closed' }}`\n            // inside the template of an OnPush component and we change the tooltip from\n            // open -> closed, the expression in question won't be updated unless we explicitly\n            // mark the parent component to be checked.\n            this._windowRef.changeDetectorRef.markForCheck();\n            ngbAutoClose(this._ngZone, this._document, this.autoClose, function () { return _this.close(); }, this.hidden, [this._windowRef.location.nativeElement]);\n            this.shown.emit();\n        }\n    };\n    /**\n     * Closes the tooltip.\n     *\n     * This is considered to be a \"manual\" triggering of the tooltip.\n     */\n    NgbTooltip.prototype.close = function () {\n        if (this._windowRef != null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n            this._popupService.close();\n            this._windowRef = null;\n            this.hidden.emit();\n            this._changeDetector.markForCheck();\n        }\n    };\n    /**\n     * Toggles the tooltip.\n     *\n     * This is considered to be a \"manual\" triggering of the tooltip.\n     */\n    NgbTooltip.prototype.toggle = function () {\n        if (this._windowRef) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * Returns `true`, if the popover is currently shown.\n     */\n    NgbTooltip.prototype.isOpen = function () { return this._windowRef != null; };\n    NgbTooltip.prototype.ngOnInit = function () {\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.isOpen.bind(this), this.open.bind(this), this.close.bind(this), +this.openDelay, +this.closeDelay);\n    };\n    NgbTooltip.prototype.ngOnChanges = function (_a) {\n        var tooltipClass = _a.tooltipClass;\n        if (tooltipClass && this.isOpen()) {\n            this._windowRef.instance.tooltipClass = tooltipClass.currentValue;\n        }\n    };\n    NgbTooltip.prototype.ngOnDestroy = function () {\n        this.close();\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\n        if (this._unregisterListenersFn) {\n            this._unregisterListenersFn();\n        }\n        this._zoneSubscription.unsubscribe();\n    };\n    NgbTooltip.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: NgbTooltipConfig },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ChangeDetectorRef },\n        { type: ApplicationRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"autoClose\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"placement\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"triggers\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"container\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"disableTooltip\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"tooltipClass\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"openDelay\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"closeDelay\", void 0);\n    __decorate([\n        Output()\n    ], NgbTooltip.prototype, \"shown\", void 0);\n    __decorate([\n        Output()\n    ], NgbTooltip.prototype, \"hidden\", void 0);\n    __decorate([\n        Input()\n    ], NgbTooltip.prototype, \"ngbTooltip\", null);\n    NgbTooltip = __decorate([\n        Directive({ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' }),\n        __param(7, Inject(DOCUMENT))\n    ], NgbTooltip);\n    return NgbTooltip;\n}());\n\nvar NgbTooltipModule = /** @class */ (function () {\n    function NgbTooltipModule() {\n    }\n    NgbTooltipModule = __decorate([\n        NgModule({ declarations: [NgbTooltip, NgbTooltipWindow], exports: [NgbTooltip], entryComponents: [NgbTooltipWindow] })\n    ], NgbTooltipModule);\n    return NgbTooltipModule;\n}());\n\n/**\n * A component that helps with text highlighting.\n *\n * If splits the `result` text into parts that contain the searched `term` and generates the HTML markup to simplify\n * highlighting:\n *\n * Ex. `result=\"Alaska\"` and `term=\"as\"` will produce `Al<span class=\"ngb-highlight\">as</span>ka`.\n */\nvar NgbHighlight = /** @class */ (function () {\n    function NgbHighlight() {\n        /**\n         * The CSS class for `<span>` elements wrapping the `term` inside the `result`.\n         */\n        this.highlightClass = 'ngb-highlight';\n    }\n    NgbHighlight.prototype.ngOnChanges = function (changes) {\n        var result = toString(this.result);\n        var terms = Array.isArray(this.term) ? this.term : [this.term];\n        var escapedTerms = terms.map(function (term) { return regExpEscape(toString(term)); }).filter(function (term) { return term; });\n        this.parts = escapedTerms.length ? result.split(new RegExp(\"(\" + escapedTerms.join('|') + \")\", 'gmi')) : [result];\n    };\n    __decorate([\n        Input()\n    ], NgbHighlight.prototype, \"highlightClass\", void 0);\n    __decorate([\n        Input()\n    ], NgbHighlight.prototype, \"result\", void 0);\n    __decorate([\n        Input()\n    ], NgbHighlight.prototype, \"term\", void 0);\n    NgbHighlight = __decorate([\n        Component({\n            selector: 'ngb-highlight',\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.None,\n            template: \"<ng-template ngFor [ngForOf]=\\\"parts\\\" let-part let-isOdd=\\\"odd\\\">\" +\n                \"<span *ngIf=\\\"isOdd; else even\\\" [class]=\\\"highlightClass\\\">{{part}}</span><ng-template #even>{{part}}</ng-template>\" +\n                \"</ng-template>\",\n            styles: [\".ngb-highlight{font-weight:700}\"]\n        })\n    ], NgbHighlight);\n    return NgbHighlight;\n}());\n\nvar NgbTypeaheadWindow = /** @class */ (function () {\n    function NgbTypeaheadWindow() {\n        this.activeIdx = 0;\n        /**\n         * Flag indicating if the first row should be active initially\n         */\n        this.focusFirst = true;\n        /**\n         * A function used to format a given result before display. This function should return a formatted string without any\n         * HTML markup\n         */\n        this.formatter = toString;\n        /**\n         * Event raised when user selects a particular result row\n         */\n        this.selectEvent = new EventEmitter();\n        this.activeChangeEvent = new EventEmitter();\n    }\n    NgbTypeaheadWindow.prototype.hasActive = function () { return this.activeIdx > -1 && this.activeIdx < this.results.length; };\n    NgbTypeaheadWindow.prototype.getActive = function () { return this.results[this.activeIdx]; };\n    NgbTypeaheadWindow.prototype.markActive = function (activeIdx) {\n        this.activeIdx = activeIdx;\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.next = function () {\n        if (this.activeIdx === this.results.length - 1) {\n            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n        }\n        else {\n            this.activeIdx++;\n        }\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.prev = function () {\n        if (this.activeIdx < 0) {\n            this.activeIdx = this.results.length - 1;\n        }\n        else if (this.activeIdx === 0) {\n            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n        }\n        else {\n            this.activeIdx--;\n        }\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.resetActive = function () {\n        this.activeIdx = this.focusFirst ? 0 : -1;\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.select = function (item) { this.selectEvent.emit(item); };\n    NgbTypeaheadWindow.prototype.ngOnInit = function () { this.resetActive(); };\n    NgbTypeaheadWindow.prototype._activeChanged = function () {\n        this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\n    };\n    __decorate([\n        Input()\n    ], NgbTypeaheadWindow.prototype, \"id\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeaheadWindow.prototype, \"focusFirst\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeaheadWindow.prototype, \"results\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeaheadWindow.prototype, \"term\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeaheadWindow.prototype, \"formatter\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeaheadWindow.prototype, \"resultTemplate\", void 0);\n    __decorate([\n        Output('select')\n    ], NgbTypeaheadWindow.prototype, \"selectEvent\", void 0);\n    __decorate([\n        Output('activeChange')\n    ], NgbTypeaheadWindow.prototype, \"activeChangeEvent\", void 0);\n    NgbTypeaheadWindow = __decorate([\n        Component({\n            selector: 'ngb-typeahead-window',\n            exportAs: 'ngbTypeaheadWindow',\n            encapsulation: ViewEncapsulation.None,\n            host: { '(mousedown)': '$event.preventDefault()', 'class': 'dropdown-menu show', 'role': 'listbox', '[id]': 'id' },\n            template: \"\\n    <ng-template #rt let-result=\\\"result\\\" let-term=\\\"term\\\" let-formatter=\\\"formatter\\\">\\n      <ngb-highlight [result]=\\\"formatter(result)\\\" [term]=\\\"term\\\"></ngb-highlight>\\n    </ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"results\\\" let-result let-idx=\\\"index\\\">\\n      <button type=\\\"button\\\" class=\\\"dropdown-item\\\" role=\\\"option\\\"\\n        [id]=\\\"id + '-' + idx\\\"\\n        [class.active]=\\\"idx === activeIdx\\\"\\n        (mouseenter)=\\\"markActive(idx)\\\"\\n        (click)=\\\"select(result)\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"resultTemplate || rt\\\"\\n          [ngTemplateOutletContext]=\\\"{result: result, term: term, formatter: formatter}\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n  \"\n        })\n    ], NgbTypeaheadWindow);\n    return NgbTypeaheadWindow;\n}());\n\nvar ARIA_LIVE_DELAY = new InjectionToken('live announcer delay', { providedIn: 'root', factory: ARIA_LIVE_DELAY_FACTORY });\nfunction ARIA_LIVE_DELAY_FACTORY() {\n    return 100;\n}\nfunction getLiveElement(document, lazyCreate) {\n    if (lazyCreate === void 0) { lazyCreate = false; }\n    var element = document.body.querySelector('#ngb-live');\n    if (element == null && lazyCreate) {\n        element = document.createElement('div');\n        element.setAttribute('id', 'ngb-live');\n        element.setAttribute('aria-live', 'polite');\n        element.setAttribute('aria-atomic', 'true');\n        element.classList.add('sr-only');\n        document.body.appendChild(element);\n    }\n    return element;\n}\nvar Live = /** @class */ (function () {\n    function Live(_document, _delay) {\n        this._document = _document;\n        this._delay = _delay;\n    }\n    Live.prototype.ngOnDestroy = function () {\n        var element = getLiveElement(this._document);\n        if (element) {\n            // if exists, it will always be attached to the <body>\n            element.parentElement.removeChild(element);\n        }\n    };\n    Live.prototype.say = function (message) {\n        var element = getLiveElement(this._document, true);\n        var delay = this._delay;\n        if (element != null) {\n            element.textContent = '';\n            var setText = function () { return element.textContent = message; };\n            if (delay === null) {\n                setText();\n            }\n            else {\n                setTimeout(setText, delay);\n            }\n        }\n    };\n    Live.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [ARIA_LIVE_DELAY,] }] }\n    ]; };\n    Live.…µprov = …µ…µdefineInjectable({ factory: function Live_Factory() { return new Live(…µ…µinject(DOCUMENT), …µ…µinject(ARIA_LIVE_DELAY)); }, token: Live, providedIn: \"root\" });\n    Live = __decorate([\n        Injectable({ providedIn: 'root' }),\n        __param(0, Inject(DOCUMENT)), __param(1, Inject(ARIA_LIVE_DELAY))\n    ], Live);\n    return Live;\n}());\n\n/**\n * A configuration service for the [`NgbTypeahead`](#/components/typeahead/api#NgbTypeahead) component.\n *\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the typeaheads used in the application.\n */\nvar NgbTypeaheadConfig = /** @class */ (function () {\n    function NgbTypeaheadConfig() {\n        this.editable = true;\n        this.focusFirst = true;\n        this.showHint = false;\n        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\n    }\n    NgbTypeaheadConfig.…µprov = …µ…µdefineInjectable({ factory: function NgbTypeaheadConfig_Factory() { return new NgbTypeaheadConfig(); }, token: NgbTypeaheadConfig, providedIn: \"root\" });\n    NgbTypeaheadConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], NgbTypeaheadConfig);\n    return NgbTypeaheadConfig;\n}());\n\nvar NGB_TYPEAHEAD_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbTypeahead; }),\n    multi: true\n};\nvar nextWindowId = 0;\n/**\n * A directive providing a simple way of creating powerful typeaheads from any text input.\n */\nvar NgbTypeahead = /** @class */ (function () {\n    function NgbTypeahead(_elementRef, viewContainerRef, _renderer, injector, componentFactoryResolver, config, ngZone, _live, _document, _ngZone, _changeDetector, applicationRef) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._live = _live;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._changeDetector = _changeDetector;\n        this._subscription = null;\n        this._closed$ = new Subject();\n        this._inputValueBackup = null;\n        this._windowRef = null;\n        /**\n         * The value for the `autocomplete` attribute for the `<input>` element.\n         *\n         * Defaults to `\"off\"` to disable the native browser autocomplete, but you can override it if necessary.\n         *\n         * @since 2.1.0\n         */\n        this.autocomplete = 'off';\n        /**\n         * The preferred placement of the typeahead.\n         *\n         * Possible values are `\"top\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom\"`, `\"bottom-left\"`,\n         * `\"bottom-right\"`, `\"left\"`, `\"left-top\"`, `\"left-bottom\"`, `\"right\"`, `\"right-top\"`,\n         * `\"right-bottom\"`\n         *\n         * Accepts an array of strings or a string with space separated possible values.\n         *\n         * The default order of preference is `\"bottom-left bottom-right top-left top-right\"`\n         *\n         * Please see the [positioning overview](#/positioning) for more details.\n         */\n        this.placement = 'bottom-left';\n        /**\n         * An event emitted right before an item is selected from the result list.\n         *\n         * Event payload is of type [`NgbTypeaheadSelectItemEvent`](#/components/typeahead/api#NgbTypeaheadSelectItemEvent).\n         */\n        this.selectItem = new EventEmitter();\n        this.activeDescendant = null;\n        this.popupId = \"ngb-typeahead-\" + nextWindowId++;\n        this._onTouched = function () { };\n        this._onChange = function (_) { };\n        this.container = config.container;\n        this.editable = config.editable;\n        this.focusFirst = config.focusFirst;\n        this.showHint = config.showHint;\n        this.placement = config.placement;\n        this._valueChanges = fromEvent(_elementRef.nativeElement, 'input')\n            .pipe(map(function ($event) { return $event.target.value; }));\n        this._resubscribeTypeahead = new BehaviorSubject(null);\n        this._popupService = new PopupService(NgbTypeaheadWindow, injector, viewContainerRef, _renderer, componentFactoryResolver, applicationRef);\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\n            if (_this.isPopupOpen()) {\n                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');\n            }\n        });\n    }\n    NgbTypeahead.prototype.ngOnInit = function () {\n        var _this = this;\n        var inputValues$ = this._valueChanges.pipe(tap(function (value) {\n            _this._inputValueBackup = _this.showHint ? value : null;\n            _this._onChange(_this.editable ? value : undefined);\n        }));\n        var results$ = inputValues$.pipe(this.ngbTypeahead);\n        var userInput$ = this._resubscribeTypeahead.pipe(switchMap(function () { return results$; }));\n        this._subscription = this._subscribeToUserInput(userInput$);\n    };\n    NgbTypeahead.prototype.ngOnDestroy = function () {\n        this._closePopup();\n        this._unsubscribeFromUserInput();\n        this._zoneSubscription.unsubscribe();\n    };\n    NgbTypeahead.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n    NgbTypeahead.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };\n    NgbTypeahead.prototype.writeValue = function (value) {\n        this._writeInputValue(this._formatItemForInput(value));\n        if (this.showHint) {\n            this._inputValueBackup = value;\n        }\n    };\n    NgbTypeahead.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * Dismisses typeahead popup window\n     */\n    NgbTypeahead.prototype.dismissPopup = function () {\n        if (this.isPopupOpen()) {\n            this._resubscribeTypeahead.next(null);\n            this._closePopup();\n            if (this.showHint && this._inputValueBackup !== null) {\n                this._writeInputValue(this._inputValueBackup);\n            }\n            this._changeDetector.markForCheck();\n        }\n    };\n    /**\n     * Returns true if the typeahead popup window is displayed\n     */\n    NgbTypeahead.prototype.isPopupOpen = function () { return this._windowRef != null; };\n    NgbTypeahead.prototype.handleBlur = function () {\n        this._resubscribeTypeahead.next(null);\n        this._onTouched();\n    };\n    NgbTypeahead.prototype.handleKeyDown = function (event) {\n        if (!this.isPopupOpen()) {\n            return;\n        }\n        // tslint:disable-next-line:deprecation\n        switch (event.which) {\n            case Key.ArrowDown:\n                event.preventDefault();\n                this._windowRef.instance.next();\n                this._showHint();\n                break;\n            case Key.ArrowUp:\n                event.preventDefault();\n                this._windowRef.instance.prev();\n                this._showHint();\n                break;\n            case Key.Enter:\n            case Key.Tab:\n                var result = this._windowRef.instance.getActive();\n                if (isDefined(result)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this._selectResult(result);\n                }\n                this._closePopup();\n                break;\n        }\n    };\n    NgbTypeahead.prototype._openPopup = function () {\n        var _this = this;\n        if (!this.isPopupOpen()) {\n            this._inputValueBackup = this._elementRef.nativeElement.value;\n            this._windowRef = this._popupService.open();\n            this._windowRef.instance.id = this.popupId;\n            this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });\n            this._windowRef.instance.activeChangeEvent.subscribe(function (activeId) { return _this.activeDescendant = activeId; });\n            if (this.container === 'body') {\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n            this._changeDetector.markForCheck();\n            ngbAutoClose(this._ngZone, this._document, 'outside', function () { return _this.dismissPopup(); }, this._closed$, [this._elementRef.nativeElement, this._windowRef.location.nativeElement]);\n        }\n    };\n    NgbTypeahead.prototype._closePopup = function () {\n        this._closed$.next();\n        this._popupService.close();\n        this._windowRef = null;\n        this.activeDescendant = null;\n    };\n    NgbTypeahead.prototype._selectResult = function (result) {\n        var defaultPrevented = false;\n        this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });\n        this._resubscribeTypeahead.next(null);\n        if (!defaultPrevented) {\n            this.writeValue(result);\n            this._onChange(result);\n        }\n    };\n    NgbTypeahead.prototype._selectResultClosePopup = function (result) {\n        this._selectResult(result);\n        this._closePopup();\n    };\n    NgbTypeahead.prototype._showHint = function () {\n        var _a;\n        if (this.showHint && ((_a = this._windowRef) === null || _a === void 0 ? void 0 : _a.instance.hasActive()) && this._inputValueBackup != null) {\n            var userInputLowerCase = this._inputValueBackup.toLowerCase();\n            var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\n            if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\n                this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\n                this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\n            }\n            else {\n                this._writeInputValue(formattedVal);\n            }\n        }\n    };\n    NgbTypeahead.prototype._formatItemForInput = function (item) {\n        return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\n    };\n    NgbTypeahead.prototype._writeInputValue = function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\n    };\n    NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {\n        var _this = this;\n        return userInput$.subscribe(function (results) {\n            if (!results || results.length === 0) {\n                _this._closePopup();\n            }\n            else {\n                _this._openPopup();\n                _this._windowRef.instance.focusFirst = _this.focusFirst;\n                _this._windowRef.instance.results = results;\n                _this._windowRef.instance.term = _this._elementRef.nativeElement.value;\n                if (_this.resultFormatter) {\n                    _this._windowRef.instance.formatter = _this.resultFormatter;\n                }\n                if (_this.resultTemplate) {\n                    _this._windowRef.instance.resultTemplate = _this.resultTemplate;\n                }\n                _this._windowRef.instance.resetActive();\n                // The observable stream we are subscribing to might have async steps\n                // and if a component containing typeahead is using the OnPush strategy\n                // the change detection turn wouldn't be invoked automatically.\n                _this._windowRef.changeDetectorRef.detectChanges();\n                _this._showHint();\n            }\n            // live announcer\n            var count = results ? results.length : 0;\n            _this._live.say(count === 0 ? 'No results available' : count + \" result\" + (count === 1 ? '' : 's') + \" available\");\n        });\n    };\n    NgbTypeahead.prototype._unsubscribeFromUserInput = function () {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n        this._subscription = null;\n    };\n    NgbTypeahead.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: ComponentFactoryResolver },\n        { type: NgbTypeaheadConfig },\n        { type: NgZone },\n        { type: Live },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: ApplicationRef }\n    ]; };\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"autocomplete\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"container\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"editable\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"focusFirst\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"inputFormatter\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"ngbTypeahead\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"resultFormatter\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"resultTemplate\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"showHint\", void 0);\n    __decorate([\n        Input()\n    ], NgbTypeahead.prototype, \"placement\", void 0);\n    __decorate([\n        Output()\n    ], NgbTypeahead.prototype, \"selectItem\", void 0);\n    NgbTypeahead = __decorate([\n        Directive({\n            selector: 'input[ngbTypeahead]',\n            exportAs: 'ngbTypeahead',\n            host: {\n                '(blur)': 'handleBlur()',\n                '[class.open]': 'isPopupOpen()',\n                '(keydown)': 'handleKeyDown($event)',\n                '[autocomplete]': 'autocomplete',\n                'autocapitalize': 'off',\n                'autocorrect': 'off',\n                'role': 'combobox',\n                'aria-multiline': 'false',\n                '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\n                '[attr.aria-activedescendant]': 'activeDescendant',\n                '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\n                '[attr.aria-expanded]': 'isPopupOpen()'\n            },\n            providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\n        }),\n        __param(8, Inject(DOCUMENT))\n    ], NgbTypeahead);\n    return NgbTypeahead;\n}());\n\nvar NgbTypeaheadModule = /** @class */ (function () {\n    function NgbTypeaheadModule() {\n    }\n    NgbTypeaheadModule = __decorate([\n        NgModule({\n            declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],\n            exports: [NgbTypeahead, NgbHighlight],\n            imports: [CommonModule],\n            entryComponents: [NgbTypeaheadWindow]\n        })\n    ], NgbTypeaheadModule);\n    return NgbTypeaheadModule;\n}());\n\nvar NGB_MODULES = [\n    NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule,\n    NgbDropdownModule, NgbModalModule, NgbNavModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule,\n    NgbRatingModule, NgbTimepickerModule, NgbToastModule, NgbTooltipModule, NgbTypeaheadModule,\n    // tslint:disable-next-line:deprecation\n    NgbTabsetModule\n];\nvar NgbModule = /** @class */ (function () {\n    function NgbModule() {\n    }\n    NgbModule = __decorate([\n        NgModule({ imports: NGB_MODULES, exports: NGB_MODULES })\n    ], NgbModule);\n    return NgbModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ModalDismissReasons, NgbAccordion, NgbAccordionConfig, NgbAccordionModule, NgbActiveModal, NgbAlert, NgbAlertConfig, NgbAlertModule, NgbButtonLabel, NgbButtonsModule, NgbCalendar, NgbCalendarGregorian, NgbCalendarHebrew, NgbCalendarIslamicCivil, NgbCalendarIslamicUmalqura, NgbCalendarPersian, NgbCarousel, NgbCarouselConfig, NgbCarouselModule, NgbCheckBox, NgbCollapse, NgbCollapseModule, NgbDate, NgbDateAdapter, NgbDateNativeAdapter, NgbDateNativeUTCAdapter, NgbDateParserFormatter, NgbDatepicker, NgbDatepickerConfig, NgbDatepickerContent, NgbDatepickerI18n, NgbDatepickerI18nHebrew, NgbDatepickerKeyboardService, NgbDatepickerModule, NgbDatepickerMonth, NgbDropdown, NgbDropdownAnchor, NgbDropdownConfig, NgbDropdownItem, NgbDropdownMenu, NgbDropdownModule, NgbDropdownToggle, NgbHighlight, NgbInputDatepicker, NgbInputDatepickerConfig, NgbModal, NgbModalConfig, NgbModalModule, NgbModalRef, NgbModule, NgbNav, NgbNavConfig, NgbNavContent, NgbNavItem, NgbNavLink, NgbNavModule, NgbNavOutlet, NgbNavbar, NgbPagination, NgbPaginationConfig, NgbPaginationEllipsis, NgbPaginationFirst, NgbPaginationLast, NgbPaginationModule, NgbPaginationNext, NgbPaginationNumber, NgbPaginationPrevious, NgbPanel, NgbPanelContent, NgbPanelHeader, NgbPanelTitle, NgbPanelToggle, NgbPopover, NgbPopoverConfig, NgbPopoverModule, NgbProgressbar, NgbProgressbarConfig, NgbProgressbarModule, NgbRadio, NgbRadioGroup, NgbRating, NgbRatingConfig, NgbRatingModule, NgbSlide, NgbSlideEventDirection, NgbSlideEventSource, NgbTab, NgbTabContent, NgbTabTitle, NgbTabset, NgbTabsetConfig, NgbTabsetModule, NgbTimeAdapter, NgbTimepicker, NgbTimepickerConfig, NgbTimepickerI18n, NgbTimepickerModule, NgbToast, NgbToastConfig, NgbToastHeader, NgbToastModule, NgbTooltip, NgbTooltipConfig, NgbTooltipModule, NgbTypeahead, NgbTypeaheadConfig, NgbTypeaheadModule, NGB_CAROUSEL_DIRECTIVES as …µa, NGB_DATEPICKER_VALUE_ACCESSOR as …µb, Live as …µba, NgbCalendarHijri as …µbb, ContentRef as …µbc, NGB_DATEPICKER_CALENDAR_FACTORY as …µc, NgbDatepickerDayView as …µd, NgbDatepickerNavigation as …µe, NgbDatepickerNavigationSelect as …µf, NGB_DATEPICKER_18N_FACTORY as …µg, NgbDatepickerI18nDefault as …µh, NGB_DATEPICKER_DATE_ADAPTER_FACTORY as …µi, NgbDateStructAdapter as …µj, NGB_DATEPICKER_PARSER_FORMATTER_FACTORY as …µk, NgbDateISOParserFormatter as …µl, NgbPopoverWindow as …µm, NGB_DATEPICKER_TIME_ADAPTER_FACTORY as …µn, NgbTimeStructAdapter as …µo, NGB_TIMEPICKER_I18N_FACTORY as …µp, NgbTimepickerI18nDefault as …µq, NgbTooltipWindow as …µr, NgbTypeaheadWindow as …µs, NgbDatepickerService as …µt, NgbModalBackdrop as …µu, NgbModalWindow as …µv, NgbModalStack as …µw, ScrollBar as …µx, ARIA_LIVE_DELAY as …µy, ARIA_LIVE_DELAY_FACTORY as …µz };\n"]}