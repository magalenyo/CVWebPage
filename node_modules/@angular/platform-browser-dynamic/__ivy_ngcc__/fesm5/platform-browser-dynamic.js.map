{"version":3,"sources":["C:/Users/MiguelÁngelBuenoRive/Desktop/Angular project/ExperienceBCN/node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA6NyB,6BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwH/C;;;;;;0BAGqB","file":"platform-browser-dynamic.js","sourcesContent":["/**\n * @license Angular v9.0.2\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getUrlScheme, syntaxError, Identifiers, JitCompiler, ProviderMeta, I18NHtmlParser, CompilerConfig, CompileReflector, ResourceLoader, JitSummaryResolver, SummaryResolver, Lexer, Parser, HtmlParser, TemplateParser, ElementSchemaRegistry, JitEvaluator, DirectiveNormalizer, UrlResolver, CompileMetadataResolver, NgModuleResolver, DirectiveResolver, PipeResolver, StaticSymbolCache, StyleCompiler, ViewCompiler, NgModuleCompiler, DomElementSchemaRegistry } from '@angular/compiler';\nimport { ɵReflectionCapabilities, ɵstringify, ANALYZE_FOR_ENTRY_COMPONENTS, ElementRef, NgModuleRef, ViewContainerRef, ChangeDetectorRef, Renderer2, QueryList, TemplateRef, ɵCodegenComponentFactoryResolver, ComponentFactoryResolver, ComponentFactory, ComponentRef, NgModuleFactory, ɵcmf, ɵmod, ɵmpd, ɵregisterModuleFactory, Injector, ViewEncapsulation, ChangeDetectionStrategy, SecurityContext, LOCALE_ID, TRANSLATIONS_FORMAT, ɵinlineInterpolate, ɵinterpolate, ɵEMPTY_ARRAY, ɵEMPTY_MAP, ɵvid, ɵeld, ɵand, ɵted, ɵdid, ɵprd, ɵqud, ɵpad, ɵpod, ɵppd, ɵpid, ɵnov, ɵncd, ɵunv, ɵcrt, ɵccf, InjectionToken, PACKAGE_ROOT_URL, Compiler, MissingTranslationStrategy, ɵConsole, Optional, Inject, TRANSLATIONS, isDevMode, createPlatformFactory, platformCore, COMPILER_OPTIONS, CompilerFactory, Injectable, PLATFORM_ID, ɵglobal, Version } from '@angular/core';\nimport { __spread, __extends, __decorate } from 'tslib';\nimport { ɵPLATFORM_BROWSER_ID } from '@angular/common';\nimport { ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MODULE_SUFFIX = '';\nvar builtinExternalReferences = createBuiltinExternalReferencesMap();\nvar JitReflector = /** @class */ (function () {\n    function JitReflector() {\n        this.reflectionCapabilities = new ɵReflectionCapabilities();\n    }\n    JitReflector.prototype.componentModuleUrl = function (type, cmpMetadata) {\n        var moduleId = cmpMetadata.moduleId;\n        if (typeof moduleId === 'string') {\n            var scheme = getUrlScheme(moduleId);\n            return scheme ? moduleId : \"package:\" + moduleId + MODULE_SUFFIX;\n        }\n        else if (moduleId !== null && moduleId !== void 0) {\n            throw syntaxError(\"moduleId should be a string in \\\"\" + ɵstringify(type) + \"\\\". See https://goo.gl/wIDDiL for more information.\\n\" +\n                \"If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.\");\n        }\n        return \"./\" + ɵstringify(type);\n    };\n    JitReflector.prototype.parameters = function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    JitReflector.prototype.tryAnnotations = function (typeOrFunc) { return this.annotations(typeOrFunc); };\n    JitReflector.prototype.annotations = function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    JitReflector.prototype.shallowAnnotations = function (typeOrFunc) {\n        throw new Error('Not supported in JIT mode');\n    };\n    JitReflector.prototype.propMetadata = function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    JitReflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    JitReflector.prototype.guards = function (type) { return this.reflectionCapabilities.guards(type); };\n    JitReflector.prototype.resolveExternalReference = function (ref) {\n        return builtinExternalReferences.get(ref) || ref.runtime;\n    };\n    return JitReflector;\n}());\nfunction createBuiltinExternalReferencesMap() {\n    var map = new Map();\n    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);\n    map.set(Identifiers.ElementRef, ElementRef);\n    map.set(Identifiers.NgModuleRef, NgModuleRef);\n    map.set(Identifiers.ViewContainerRef, ViewContainerRef);\n    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);\n    map.set(Identifiers.Renderer2, Renderer2);\n    map.set(Identifiers.QueryList, QueryList);\n    map.set(Identifiers.TemplateRef, TemplateRef);\n    map.set(Identifiers.CodegenComponentFactoryResolver, ɵCodegenComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactory, ComponentFactory);\n    map.set(Identifiers.ComponentRef, ComponentRef);\n    map.set(Identifiers.NgModuleFactory, NgModuleFactory);\n    map.set(Identifiers.createModuleFactory, ɵcmf);\n    map.set(Identifiers.moduleDef, ɵmod);\n    map.set(Identifiers.moduleProviderDef, ɵmpd);\n    map.set(Identifiers.RegisterModuleFactoryFn, ɵregisterModuleFactory);\n    map.set(Identifiers.Injector, Injector);\n    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation);\n    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy);\n    map.set(Identifiers.SecurityContext, SecurityContext);\n    map.set(Identifiers.LOCALE_ID, LOCALE_ID);\n    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);\n    map.set(Identifiers.inlineInterpolate, ɵinlineInterpolate);\n    map.set(Identifiers.interpolate, ɵinterpolate);\n    map.set(Identifiers.EMPTY_ARRAY, ɵEMPTY_ARRAY);\n    map.set(Identifiers.EMPTY_MAP, ɵEMPTY_MAP);\n    map.set(Identifiers.viewDef, ɵvid);\n    map.set(Identifiers.elementDef, ɵeld);\n    map.set(Identifiers.anchorDef, ɵand);\n    map.set(Identifiers.textDef, ɵted);\n    map.set(Identifiers.directiveDef, ɵdid);\n    map.set(Identifiers.providerDef, ɵprd);\n    map.set(Identifiers.queryDef, ɵqud);\n    map.set(Identifiers.pureArrayDef, ɵpad);\n    map.set(Identifiers.pureObjectDef, ɵpod);\n    map.set(Identifiers.purePipeDef, ɵppd);\n    map.set(Identifiers.pipeDef, ɵpid);\n    map.set(Identifiers.nodeValue, ɵnov);\n    map.set(Identifiers.ngContentDef, ɵncd);\n    map.set(Identifiers.unwrapValue, ɵunv);\n    map.set(Identifiers.createRendererType2, ɵcrt);\n    map.set(Identifiers.createComponentFactory, ɵccf);\n    return map;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');\n/**\n * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.\n */\nvar DEFAULT_PACKAGE_URL_PROVIDER = {\n    provide: PACKAGE_ROOT_URL,\n    useValue: '/'\n};\nvar _NO_RESOURCE_LOADER = {\n    get: function (url) {\n        throw new Error(\"No ResourceLoader implementation has been provided. Can't read the url \\\"\" + url + \"\\\"\");\n    }\n};\nvar baseHtmlParser = new InjectionToken('HtmlParser');\nvar CompilerImpl = /** @class */ (function () {\n    function CompilerImpl(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console) {\n        this._metadataResolver = _metadataResolver;\n        this._delegate = new JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));\n        this.injector = injector;\n    }\n    CompilerImpl.prototype.getExtraNgModuleProviders = function () {\n        return [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useValue: this }))];\n    };\n    CompilerImpl.prototype.compileModuleSync = function (moduleType) {\n        return this._delegate.compileModuleSync(moduleType);\n    };\n    CompilerImpl.prototype.compileModuleAsync = function (moduleType) {\n        return this._delegate.compileModuleAsync(moduleType);\n    };\n    CompilerImpl.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n        var result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\n        return {\n            ngModuleFactory: result.ngModuleFactory,\n            componentFactories: result.componentFactories,\n        };\n    };\n    CompilerImpl.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n        return this._delegate.compileModuleAndAllComponentsAsync(moduleType)\n            .then(function (result) { return ({\n            ngModuleFactory: result.ngModuleFactory,\n            componentFactories: result.componentFactories,\n        }); });\n    };\n    CompilerImpl.prototype.loadAotSummaries = function (summaries) { this._delegate.loadAotSummaries(summaries); };\n    CompilerImpl.prototype.hasAotSummary = function (ref) { return this._delegate.hasAotSummary(ref); };\n    CompilerImpl.prototype.getComponentFactory = function (component) {\n        return this._delegate.getComponentFactory(component);\n    };\n    CompilerImpl.prototype.clearCache = function () { this._delegate.clearCache(); };\n    CompilerImpl.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };\n    CompilerImpl.prototype.getModuleId = function (moduleType) {\n        var meta = this._metadataResolver.getNgModuleMetadata(moduleType);\n        return meta && meta.id || undefined;\n    };\n    return CompilerImpl;\n}());\nvar ɵ0 = new JitReflector(), ɵ1 = _NO_RESOURCE_LOADER, ɵ2 = function (parser, translations, format, config, console) {\n    translations = translations || '';\n    var missingTranslation = translations ? config.missingTranslation : MissingTranslationStrategy.Ignore;\n    return new I18NHtmlParser(parser, translations, format, missingTranslation, console);\n}, ɵ3 = new CompilerConfig();\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n */\nvar COMPILER_PROVIDERS__PRE_R3__ = [\n    { provide: CompileReflector, useValue: ɵ0 },\n    { provide: ResourceLoader, useValue: ɵ1 },\n    { provide: JitSummaryResolver, deps: [] },\n    { provide: SummaryResolver, useExisting: JitSummaryResolver },\n    { provide: ɵConsole, deps: [] },\n    { provide: Lexer, deps: [] },\n    { provide: Parser, deps: [Lexer] },\n    {\n        provide: baseHtmlParser,\n        useClass: HtmlParser,\n        deps: [],\n    },\n    {\n        provide: I18NHtmlParser,\n        useFactory: ɵ2,\n        deps: [\n            baseHtmlParser,\n            [new Optional(), new Inject(TRANSLATIONS)],\n            [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\n            [CompilerConfig],\n            [ɵConsole],\n        ]\n    },\n    {\n        provide: HtmlParser,\n        useExisting: I18NHtmlParser,\n    },\n    {\n        provide: TemplateParser, deps: [CompilerConfig, CompileReflector,\n            Parser, ElementSchemaRegistry,\n            I18NHtmlParser, ɵConsole]\n    },\n    { provide: JitEvaluator, useClass: JitEvaluator, deps: [] },\n    { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig] },\n    { provide: CompileMetadataResolver, deps: [CompilerConfig, HtmlParser, NgModuleResolver,\n            DirectiveResolver, PipeResolver,\n            SummaryResolver,\n            ElementSchemaRegistry,\n            DirectiveNormalizer, ɵConsole,\n            [Optional, StaticSymbolCache],\n            CompileReflector,\n            [Optional, ERROR_COLLECTOR_TOKEN]] },\n    DEFAULT_PACKAGE_URL_PROVIDER,\n    { provide: StyleCompiler, deps: [UrlResolver] },\n    { provide: ViewCompiler, deps: [CompileReflector] },\n    { provide: NgModuleCompiler, deps: [CompileReflector] },\n    { provide: CompilerConfig, useValue: ɵ3 },\n    { provide: Compiler, useClass: CompilerImpl, deps: [Injector, CompileMetadataResolver,\n            TemplateParser, StyleCompiler,\n            ViewCompiler, NgModuleCompiler,\n            SummaryResolver, CompileReflector, JitEvaluator, CompilerConfig,\n            ɵConsole] },\n    { provide: DomElementSchemaRegistry, deps: [] },\n    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\n    { provide: UrlResolver, deps: [PACKAGE_ROOT_URL] },\n    { provide: DirectiveResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, deps: [CompileReflector] },\n];\nvar COMPILER_PROVIDERS__POST_R3__ = [{ provide: Compiler, useFactory: function () { return new Compiler(); } }];\nvar COMPILER_PROVIDERS = COMPILER_PROVIDERS__PRE_R3__;\n/**\n * @publicApi\n */\nvar JitCompilerFactory = /** @class */ (function () {\n    /* @internal */\n    function JitCompilerFactory(defaultOptions) {\n        var compilerOptions = {\n            useJit: true,\n            defaultEncapsulation: ViewEncapsulation.Emulated,\n            missingTranslation: MissingTranslationStrategy.Warning,\n        };\n        this._defaultOptions = __spread([compilerOptions], defaultOptions);\n    }\n    JitCompilerFactory.prototype.createCompiler = function (options) {\n        if (options === void 0) { options = []; }\n        var opts = _mergeOptions(this._defaultOptions.concat(options));\n        var injector = Injector.create([\n            COMPILER_PROVIDERS, {\n                provide: CompilerConfig,\n                useFactory: function () {\n                    return new CompilerConfig({\n                        // let explicit values from the compiler options overwrite options\n                        // from the app providers\n                        useJit: opts.useJit,\n                        jitDevMode: isDevMode(),\n                        // let explicit values from the compiler options overwrite options\n                        // from the app providers\n                        defaultEncapsulation: opts.defaultEncapsulation,\n                        missingTranslation: opts.missingTranslation,\n                        preserveWhitespaces: opts.preserveWhitespaces,\n                    });\n                },\n                deps: []\n            },\n            opts.providers\n        ]);\n        return injector.get(Compiler);\n    };\n    return JitCompilerFactory;\n}());\nfunction _mergeOptions(optionsArr) {\n    return {\n        useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),\n        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),\n        providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; })),\n        missingTranslation: _lastDefined(optionsArr.map(function (options) { return options.missingTranslation; })),\n        preserveWhitespaces: _lastDefined(optionsArr.map(function (options) { return options.preserveWhitespaces; })),\n    };\n}\nfunction _lastDefined(args) {\n    for (var i = args.length - 1; i >= 0; i--) {\n        if (args[i] !== undefined) {\n            return args[i];\n        }\n    }\n    return undefined;\n}\nfunction _mergeArrays(parts) {\n    var result = [];\n    parts.forEach(function (part) { return part && result.push.apply(result, __spread(part)); });\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ɵ0$1 = {};\n/**\n * A platform that included corePlatform and the compiler.\n *\n * @publicApi\n */\nvar platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\n    { provide: COMPILER_OPTIONS, useValue: ɵ0$1, multi: true },\n    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },\n]);\n\nvar ResourceLoaderImpl = /** @class */ (function (_super) {\n    __extends(ResourceLoaderImpl, _super);\n    function ResourceLoaderImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourceLoaderImpl.prototype.get = function (url) {\n        var resolve;\n        var reject;\n        var promise = new Promise(function (res, rej) {\n            resolve = res;\n            reject = rej;\n        });\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'text';\n        xhr.onload = function () {\n            // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n            // by IE10)\n            var response = xhr.response || xhr.responseText;\n            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n            var status = xhr.status === 1223 ? 204 : xhr.status;\n            // fix status code when it is 0 (0 status is undocumented).\n            // Occurs when accessing file resources or on Android 4.1 stock browser\n            // while retrieving files from application cache.\n            if (status === 0) {\n                status = response ? 200 : 0;\n            }\n            if (200 <= status && status <= 300) {\n                resolve(response);\n            }\n            else {\n                reject(\"Failed to load \" + url);\n            }\n        };\n        xhr.onerror = function () { reject(\"Failed to load \" + url); };\n        xhr.send();\n        return promise;\n    };\n    ResourceLoaderImpl = __decorate([\n        Injectable()\n    ], ResourceLoaderImpl);\n    return ResourceLoaderImpl;\n}(ResourceLoader));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ɵ0$2 = { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] }, ɵ1$1 = ɵPLATFORM_BROWSER_ID;\n/**\n * @publicApi\n */\nvar INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [\n    ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,\n    {\n        provide: COMPILER_OPTIONS,\n        useValue: ɵ0$2,\n        multi: true\n    },\n    { provide: PLATFORM_ID, useValue: ɵ1$1 },\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n *\n * @publicApi\n */\nvar CachedResourceLoader = /** @class */ (function (_super) {\n    __extends(CachedResourceLoader, _super);\n    function CachedResourceLoader() {\n        var _this = _super.call(this) || this;\n        _this._cache = ɵglobal.$templateCache;\n        if (_this._cache == null) {\n            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n        }\n        return _this;\n    }\n    CachedResourceLoader.prototype.get = function (url) {\n        if (this._cache.hasOwnProperty(url)) {\n            return Promise.resolve(this._cache[url]);\n        }\n        else {\n            return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);\n        }\n    };\n    return CachedResourceLoader;\n}(ResourceLoader));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar VERSION = new Version('9.0.2');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar RESOURCE_CACHE_PROVIDER = [{ provide: ResourceLoader, useClass: CachedResourceLoader, deps: [] }];\n/**\n * @publicApi\n */\nvar platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { JitCompilerFactory, RESOURCE_CACHE_PROVIDER, VERSION, platformBrowserDynamic, COMPILER_PROVIDERS__POST_R3__ as ɵCOMPILER_PROVIDERS__POST_R3__, CompilerImpl as ɵCompilerImpl, INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, ResourceLoaderImpl as ɵResourceLoaderImpl, CachedResourceLoader as ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a, platformCoreDynamic as ɵplatformCoreDynamic };\n"]}