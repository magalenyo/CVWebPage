{"version":3,"sources":["D:/Angular project/ExperienceBCN/node_modules/@fortawesome/angular-fontawesome/fesm5/angular-fontawesome.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kJA2CkJ;;;;;gDAGjI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sKA8DqJ;;;;;gDAGhJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA+EqC;;;;;;;;;;;;;oBAM1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA4JC,AAS3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAoD2C;;;;;;;;;;;;;;;;;;;;oBAMpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DA8C2B;;;;;;;;;;;;;;;;;;;;;oBAMhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CA8CiB,AAQpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCA4FO,AAQjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDA4BqB;;;;;;;;;;;;;;;oBAO1B;;;;;;KAMpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAuBqB","file":"angular-fontawesome.js","sourcesContent":["import { __decorate, __values, __spread, __param, __extends } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, Input, Directive, Optional, HostBinding, Component, Renderer2, ElementRef, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { findIconDefinition, parse, icon, counter, text } from '@fortawesome/fontawesome-svg-core';\n\nvar FaConfig = /** @class */ (function () {\n    function FaConfig() {\n        /**\n         * Default prefix to use, when one is not provided with the icon name.\n         *\n         * @default 'fas'\n         */\n        this.defaultPrefix = 'fas';\n        /**\n         * Provides a fallback icon to use whilst main icon is being loaded asynchronously.\n         * When value is null, then fa-icon component will throw an error if icon input is missing.\n         * When value is not null, then the provided icon will be used as a fallback icon if icon input is missing.\n         *\n         * @default null\n         */\n        this.fallbackIcon = null;\n        /**\n         * Whether components should lookup icon definitions in the global icon\n         * library (the one available from\n         * `import { library } from '@fortawesome/fontawesome-svg-core')`.\n         *\n         * See https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage/icon-library.md\n         * for detailed description of library modes.\n         *\n         * - 'unset' - Components should lookup icon definitions in the global library\n         * and emit warning if they find a definition there. This option is a default\n         * to assist existing applications with a migration. Applications are expected\n         * to switch to using {@link FaIconLibrary}.\n         * - true - Components should lookup icon definitions in the global library.\n         * Note that global icon library is deprecated and support for it will be\n         * removed. This option can be used to temporarily suppress warnings.\n         * - false - Components should not lookup icon definitions in the global\n         * library. Library will throw an error if missing icon is found in the global\n         * library.\n         *\n         * @deprecated This option is deprecated since 0.5.0. In 0.6.0 default will\n         * be changed to false. In 0.7.0 the option will be removed together with the\n         * support for the global icon library.\n         *\n         * @default false\n         */\n        this.globalLibrary = false;\n    }\n    FaConfig.ɵprov = ɵɵdefineInjectable({ factory: function FaConfig_Factory() { return new FaConfig(); }, token: FaConfig, providedIn: \"root\" });\n    FaConfig = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], FaConfig);\n    return FaConfig;\n}());\n\nvar FaIconLibrary = /** @class */ (function () {\n    function FaIconLibrary() {\n        this.definitions = {};\n    }\n    FaIconLibrary.prototype.addIcons = function () {\n        var e_1, _a;\n        var icons = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            icons[_i] = arguments[_i];\n        }\n        try {\n            for (var icons_1 = __values(icons), icons_1_1 = icons_1.next(); !icons_1_1.done; icons_1_1 = icons_1.next()) {\n                var icon = icons_1_1.value;\n                if (!(icon.prefix in this.definitions)) {\n                    this.definitions[icon.prefix] = {};\n                }\n                this.definitions[icon.prefix][icon.iconName] = icon;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (icons_1_1 && !icons_1_1.done && (_a = icons_1.return)) _a.call(icons_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    FaIconLibrary.prototype.addIconPacks = function () {\n        var e_2, _a;\n        var packs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            packs[_i] = arguments[_i];\n        }\n        var _loop_1 = function (pack) {\n            var icons = Object.keys(pack).map(function (key) { return pack[key]; });\n            this_1.addIcons.apply(this_1, __spread(icons));\n        };\n        var this_1 = this;\n        try {\n            for (var packs_1 = __values(packs), packs_1_1 = packs_1.next(); !packs_1_1.done; packs_1_1 = packs_1.next()) {\n                var pack = packs_1_1.value;\n                _loop_1(pack);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (packs_1_1 && !packs_1_1.done && (_a = packs_1.return)) _a.call(packs_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    FaIconLibrary.prototype.getIconDefinition = function (prefix, name) {\n        if (prefix in this.definitions && name in this.definitions[prefix]) {\n            return this.definitions[prefix][name];\n        }\n        return null;\n    };\n    FaIconLibrary.ɵprov = ɵɵdefineInjectable({ factory: function FaIconLibrary_Factory() { return new FaIconLibrary(); }, token: FaIconLibrary, providedIn: \"root\" });\n    FaIconLibrary = __decorate([\n        Injectable({ providedIn: 'root' })\n    ], FaIconLibrary);\n    return FaIconLibrary;\n}());\n\nvar faWarnIfIconDefinitionMissing = function (iconSpec) {\n    throw new Error(\"Could not find icon with iconName=\" + iconSpec.iconName + \" and prefix=\" + iconSpec.prefix + \" in the icon library.\");\n};\n\nvar faWarnIfIconSpecMissing = function () {\n    throw new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.');\n};\n\n/**\n * Fontawesome class list.\n * Returns classes array by props.\n */\nvar faClassList = function (props) {\n    var _a;\n    var classes = (_a = {\n            'fa-spin': props.spin,\n            'fa-pulse': props.pulse,\n            'fa-fw': props.fixedWidth,\n            'fa-border': props.border,\n            'fa-inverse': props.inverse,\n            'fa-layers-counter': props.counter,\n            'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',\n            'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both'\n        },\n        _a[\"fa-\" + props.size] = props.size !== null,\n        _a[\"fa-rotate-\" + props.rotate] = props.rotate !== null,\n        _a[\"fa-pull-\" + props.pull] = props.pull !== null,\n        _a[\"fa-stack-\" + props.stackItemSize] = props.stackItemSize != null,\n        _a);\n    return Object.keys(classes)\n        .map(function (key) { return (classes[key] ? key : null); })\n        .filter(function (key) { return key; });\n};\n\n/**\n * Returns if is IconLookup or not.\n */\nvar isIconLookup = function (i) {\n    return i.prefix !== undefined && i.iconName !== undefined;\n};\n\n/**\n * Normalizing icon spec.\n */\nvar faNormalizeIconSpec = function (iconSpec, defaultPrefix) {\n    if (isIconLookup(iconSpec)) {\n        return iconSpec;\n    }\n    if (Array.isArray(iconSpec) && iconSpec.length === 2) {\n        return { prefix: iconSpec[0], iconName: iconSpec[1] };\n    }\n    if (typeof iconSpec === 'string') {\n        return { prefix: defaultPrefix, iconName: iconSpec };\n    }\n};\n\nvar FaStackItemSizeDirective = /** @class */ (function () {\n    function FaStackItemSizeDirective() {\n        /**\n         * Specify whether icon inside {@link FaStackComponent} should be rendered in\n         * regular size (1x) or as a larger icon (2x).\n         */\n        this.stackItemSize = '1x';\n    }\n    FaStackItemSizeDirective.prototype.ngOnChanges = function (changes) {\n        if ('size' in changes) {\n            throw new Error('fa-icon is not allowed to customize size when used inside fa-stack. ' +\n                'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.');\n        }\n    };\n    __decorate([\n        Input()\n    ], FaStackItemSizeDirective.prototype, \"stackItemSize\", void 0);\n    __decorate([\n        Input()\n    ], FaStackItemSizeDirective.prototype, \"size\", void 0);\n    FaStackItemSizeDirective = __decorate([\n        Directive({\n            // tslint:disable-next-line:directive-selector\n            selector: 'fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]',\n        })\n    ], FaStackItemSizeDirective);\n    return FaStackItemSizeDirective;\n}());\n\nvar FaIconComponent = /** @class */ (function () {\n    function FaIconComponent(sanitizer, config, iconLibrary, stackItem) {\n        this.sanitizer = sanitizer;\n        this.config = config;\n        this.iconLibrary = iconLibrary;\n        this.stackItem = stackItem;\n        this.classes = [];\n    }\n    FaIconComponent.prototype.ngOnChanges = function (changes) {\n        if (this.icon == null && this.config.fallbackIcon == null) {\n            return faWarnIfIconSpecMissing();\n        }\n        var iconToBeRendered = null;\n        if (this.icon == null) {\n            iconToBeRendered = this.config.fallbackIcon;\n        }\n        else {\n            iconToBeRendered = this.icon;\n        }\n        if (changes) {\n            var iconDefinition = this.findIconDefinition(iconToBeRendered);\n            if (iconDefinition != null) {\n                var params = this.buildParams();\n                this.renderIcon(iconDefinition, params);\n            }\n        }\n    };\n    /**\n     * Programmatically trigger rendering of the icon.\n     *\n     * This method is useful, when creating {@link FaIconComponent} dynamically or\n     * changing its inputs programmatically as in these cases icon won't be\n     * re-rendered automatically.\n     */\n    FaIconComponent.prototype.render = function () {\n        this.ngOnChanges({});\n    };\n    FaIconComponent.prototype.findIconDefinition = function (i) {\n        var lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n        if ('icon' in lookup) {\n            return lookup;\n        }\n        var definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n        if (definition != null) {\n            return definition;\n        }\n        var globalDefinition = findIconDefinition(lookup);\n        if (globalDefinition != null) {\n            var message = 'Global icon library is deprecated. ' +\n                'Consult https://github.com/FortAwesome/angular-fontawesome/blob/master/UPGRADING.md ' +\n                'for the migration instructions.';\n            if (this.config.globalLibrary === 'unset') {\n                console.error('FontAwesome: ' + message);\n            }\n            else if (!this.config.globalLibrary) {\n                throw new Error(message);\n            }\n            return globalDefinition;\n        }\n        faWarnIfIconDefinitionMissing(lookup);\n        return null;\n    };\n    FaIconComponent.prototype.buildParams = function () {\n        var classOpts = {\n            flip: this.flip,\n            spin: this.spin,\n            pulse: this.pulse,\n            border: this.border,\n            inverse: this.inverse,\n            size: this.size || null,\n            pull: this.pull || null,\n            rotate: this.rotate || null,\n            fixedWidth: typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth,\n            stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null,\n        };\n        var parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n        return {\n            title: this.title,\n            transform: parsedTransform,\n            classes: __spread(faClassList(classOpts), this.classes),\n            mask: this.mask != null ? this.findIconDefinition(this.mask) : null,\n            styles: this.styles != null ? this.styles : {},\n            symbol: this.symbol,\n            attributes: {\n                role: this.a11yRole,\n            },\n        };\n    };\n    FaIconComponent.prototype.renderIcon = function (definition, params) {\n        var renderedIcon = icon(definition, params);\n        this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n    };\n    FaIconComponent.ctorParameters = function () { return [\n        { type: DomSanitizer },\n        { type: FaConfig },\n        { type: FaIconLibrary },\n        { type: FaStackItemSizeDirective, decorators: [{ type: Optional }] }\n    ]; };\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"icon\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"title\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"spin\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"pulse\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"mask\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"styles\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"flip\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"size\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"pull\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"border\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"inverse\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"symbol\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"rotate\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"fixedWidth\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"classes\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"transform\", void 0);\n    __decorate([\n        Input()\n    ], FaIconComponent.prototype, \"a11yRole\", void 0);\n    __decorate([\n        HostBinding('innerHTML')\n    ], FaIconComponent.prototype, \"renderedIconHTML\", void 0);\n    FaIconComponent = __decorate([\n        Component({\n            selector: 'fa-icon',\n            template: \"\",\n            host: {\n                class: 'ng-fa-icon',\n                '[attr.title]': 'title',\n            }\n        }),\n        __param(3, Optional())\n    ], FaIconComponent);\n    return FaIconComponent;\n}());\n\nvar FaDuotoneIconComponent = /** @class */ (function (_super) {\n    __extends(FaDuotoneIconComponent, _super);\n    function FaDuotoneIconComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FaDuotoneIconComponent.prototype.findIconDefinition = function (i) {\n        var lookup = _super.prototype.findIconDefinition.call(this, i);\n        if (lookup != null && lookup.prefix !== 'fad') {\n            throw new Error('The specified icon does not appear to be a Duotone icon. ' +\n                'Check that you specified the correct style: ' +\n                (\"<fa-duotone-icon [icon]=\\\"['fab', '\" + lookup.iconName + \"']\\\"></fa-duotone-icon> \") +\n                (\"or use: <fa-icon icon=\\\"\" + lookup.iconName + \"\\\"></fa-icon> instead.\"));\n        }\n        return lookup;\n    };\n    FaDuotoneIconComponent.prototype.buildParams = function () {\n        var params = _super.prototype.buildParams.call(this);\n        if (this.swapOpacity === true || this.swapOpacity === 'true') {\n            params.classes.push('fa-swap-opacity');\n        }\n        if (this.primaryOpacity != null) {\n            params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();\n        }\n        if (this.secondaryOpacity != null) {\n            params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();\n        }\n        if (this.primaryColor != null) {\n            params.styles['--fa-primary-color'] = this.primaryColor;\n        }\n        if (this.secondaryColor != null) {\n            params.styles['--fa-secondary-color'] = this.secondaryColor;\n        }\n        return params;\n    };\n    __decorate([\n        Input()\n    ], FaDuotoneIconComponent.prototype, \"swapOpacity\", void 0);\n    __decorate([\n        Input()\n    ], FaDuotoneIconComponent.prototype, \"primaryOpacity\", void 0);\n    __decorate([\n        Input()\n    ], FaDuotoneIconComponent.prototype, \"secondaryOpacity\", void 0);\n    __decorate([\n        Input()\n    ], FaDuotoneIconComponent.prototype, \"primaryColor\", void 0);\n    __decorate([\n        Input()\n    ], FaDuotoneIconComponent.prototype, \"secondaryColor\", void 0);\n    FaDuotoneIconComponent = __decorate([\n        Component({\n            selector: 'fa-duotone-icon',\n            template: \"\"\n        })\n    ], FaDuotoneIconComponent);\n    return FaDuotoneIconComponent;\n}(FaIconComponent));\n\n/**\n * Warns if parent component not existing.\n */\nvar faWarnIfParentNotExist = function (parent, parentName, childName) {\n    if (!parent) {\n        throw new Error(childName + \" should be used as child of \" + parentName + \" only.\");\n    }\n};\n\n/**\n * Fontawesome layers.\n */\nvar FaLayersComponent = /** @class */ (function () {\n    function FaLayersComponent(renderer, elementRef, config) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.config = config;\n    }\n    FaLayersComponent.prototype.ngOnInit = function () {\n        this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n        this.fixedWidth = typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth;\n    };\n    FaLayersComponent.prototype.ngOnChanges = function (changes) {\n        if ('size' in changes) {\n            if (changes.size.currentValue != null) {\n                this.renderer.addClass(this.elementRef.nativeElement, \"fa-\" + changes.size.currentValue);\n            }\n            if (changes.size.previousValue != null) {\n                this.renderer.removeClass(this.elementRef.nativeElement, \"fa-\" + changes.size.previousValue);\n            }\n        }\n    };\n    FaLayersComponent.ctorParameters = function () { return [\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: FaConfig }\n    ]; };\n    __decorate([\n        Input()\n    ], FaLayersComponent.prototype, \"size\", void 0);\n    __decorate([\n        Input(), HostBinding('class.fa-fw')\n    ], FaLayersComponent.prototype, \"fixedWidth\", void 0);\n    FaLayersComponent = __decorate([\n        Component({\n            selector: 'fa-layers',\n            template: \"\\n    <ng-content select=\\\"fa-icon, fa-duotone-icon, fa-layers-text, fa-layers-counter\\\"></ng-content>\\n  \"\n        })\n    ], FaLayersComponent);\n    return FaLayersComponent;\n}());\n\nvar FaLayersCounterComponent = /** @class */ (function () {\n    function FaLayersCounterComponent(parent, sanitizer) {\n        this.parent = parent;\n        this.sanitizer = sanitizer;\n        this.classes = [];\n        faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n    }\n    FaLayersCounterComponent.prototype.ngOnChanges = function (changes) {\n        if (changes) {\n            var params = this.buildParams();\n            this.updateContent(params);\n        }\n    };\n    FaLayersCounterComponent.prototype.buildParams = function () {\n        return {\n            title: this.title,\n            classes: this.classes,\n            styles: this.styles,\n        };\n    };\n    FaLayersCounterComponent.prototype.updateContent = function (params) {\n        this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(counter(this.content || '', params).html.join(''));\n    };\n    FaLayersCounterComponent.ctorParameters = function () { return [\n        { type: FaLayersComponent, decorators: [{ type: Optional }] },\n        { type: DomSanitizer }\n    ]; };\n    __decorate([\n        Input()\n    ], FaLayersCounterComponent.prototype, \"content\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersCounterComponent.prototype, \"title\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersCounterComponent.prototype, \"styles\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersCounterComponent.prototype, \"classes\", void 0);\n    __decorate([\n        HostBinding('innerHTML')\n    ], FaLayersCounterComponent.prototype, \"renderedHTML\", void 0);\n    FaLayersCounterComponent = __decorate([\n        Component({\n            selector: 'fa-layers-counter',\n            template: '',\n            host: {\n                class: 'ng-fa-layers-counter',\n            }\n        }),\n        __param(0, Optional())\n    ], FaLayersCounterComponent);\n    return FaLayersCounterComponent;\n}());\n\nvar FaLayersTextComponent = /** @class */ (function () {\n    function FaLayersTextComponent(parent, sanitizer) {\n        this.parent = parent;\n        this.sanitizer = sanitizer;\n        this.classes = [];\n        faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n    }\n    FaLayersTextComponent.prototype.ngOnChanges = function (changes) {\n        if (changes) {\n            var params = this.buildParams();\n            this.updateContent(params);\n        }\n    };\n    /**\n     * Updating params by component props.\n     */\n    FaLayersTextComponent.prototype.buildParams = function () {\n        var classOpts = {\n            flip: this.flip,\n            spin: this.spin,\n            pulse: this.pulse,\n            border: this.border,\n            inverse: this.inverse,\n            size: this.size || null,\n            pull: this.pull || null,\n            rotate: this.rotate || null,\n            fixedWidth: this.fixedWidth,\n        };\n        var parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n        return {\n            transform: parsedTransform,\n            classes: __spread(faClassList(classOpts), this.classes),\n            title: this.title,\n            styles: this.styles,\n        };\n    };\n    FaLayersTextComponent.prototype.updateContent = function (params) {\n        this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(text(this.content || '', params).html.join('\\n'));\n    };\n    FaLayersTextComponent.ctorParameters = function () { return [\n        { type: FaLayersComponent, decorators: [{ type: Optional }] },\n        { type: DomSanitizer }\n    ]; };\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"content\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"title\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"styles\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"classes\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"spin\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"pulse\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"flip\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"size\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"pull\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"border\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"inverse\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"rotate\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"fixedWidth\", void 0);\n    __decorate([\n        Input()\n    ], FaLayersTextComponent.prototype, \"transform\", void 0);\n    __decorate([\n        HostBinding('innerHTML')\n    ], FaLayersTextComponent.prototype, \"renderedHTML\", void 0);\n    FaLayersTextComponent = __decorate([\n        Component({\n            selector: 'fa-layers-text',\n            template: '',\n            host: {\n                class: 'ng-fa-layers-text',\n            }\n        }),\n        __param(0, Optional())\n    ], FaLayersTextComponent);\n    return FaLayersTextComponent;\n}());\n\nvar FaStackComponent = /** @class */ (function () {\n    function FaStackComponent(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n    }\n    FaStackComponent.prototype.ngOnInit = function () {\n        this.renderer.addClass(this.elementRef.nativeElement, 'fa-stack');\n    };\n    FaStackComponent.prototype.ngOnChanges = function (changes) {\n        if ('size' in changes) {\n            if (changes.size.currentValue != null) {\n                this.renderer.addClass(this.elementRef.nativeElement, \"fa-\" + changes.size.currentValue);\n            }\n            if (changes.size.previousValue != null) {\n                this.renderer.removeClass(this.elementRef.nativeElement, \"fa-\" + changes.size.previousValue);\n            }\n        }\n    };\n    FaStackComponent.ctorParameters = function () { return [\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input()\n    ], FaStackComponent.prototype, \"size\", void 0);\n    FaStackComponent = __decorate([\n        Component({\n            selector: 'fa-stack',\n            // TODO: See if it is better to select fa-icon and throw if it does not have stackItemSize directive\n            template: \"\\n    <ng-content select=\\\"fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]\\\"></ng-content>\\n  \"\n        })\n    ], FaStackComponent);\n    return FaStackComponent;\n}());\n\nvar FontAwesomeModule = /** @class */ (function () {\n    function FontAwesomeModule() {\n    }\n    FontAwesomeModule = __decorate([\n        NgModule({\n            declarations: [\n                FaIconComponent,\n                FaDuotoneIconComponent,\n                FaLayersComponent,\n                FaLayersTextComponent,\n                FaLayersCounterComponent,\n                FaStackComponent,\n                FaStackItemSizeDirective,\n            ],\n            exports: [\n                FaIconComponent,\n                FaDuotoneIconComponent,\n                FaLayersComponent,\n                FaLayersTextComponent,\n                FaLayersCounterComponent,\n                FaStackComponent,\n                FaStackItemSizeDirective,\n            ],\n            entryComponents: [FaIconComponent, FaDuotoneIconComponent],\n        })\n    ], FontAwesomeModule);\n    return FontAwesomeModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FaConfig, FaDuotoneIconComponent, FaIconComponent, FaIconLibrary, FaLayersComponent, FaLayersCounterComponent, FaLayersTextComponent, FaStackComponent, FaStackItemSizeDirective, FontAwesomeModule };\n"]}